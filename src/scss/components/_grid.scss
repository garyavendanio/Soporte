// Name:            Grid
// Description:     Component to create responsive, fluid and nestable grids
//
// Component:       `x-grid`
//
// Modifiers:       `x-grid-small`
//                  `x-grid-medium`
//                  `x-grid-large`
//                  `x-grid-collapse`
//                  `x-grid-divider`
//                  `x-grid-match`
//                  `x-grid-stack`
//                  `x-grid-margin`
//                  `x-grid-margin-small`
//                  `x-grid-margin-medium`
//                  `x-grid-margin-large`
//                  `x-grid-margin-collapse`
//
// Sub-modifier:    `x-grid-item-match`
//
// States:          `x-first-column`
//
// ========================================================================


// Variables
// ========================================================================

$grid-gutter-horizontal  : $global-gutter !default;
$grid-gutter-vertical    : $grid-gutter-horizontal !default;
$grid-gutter-horizontal-l: $global-medium-gutter !default;
$grid-gutter-vertical-l  : $grid-gutter-horizontal-l !default;

$grid-small-gutter-horizontal: $global-small-gutter !default;
$grid-small-gutter-vertical  : $grid-small-gutter-horizontal !default;

$grid-medium-gutter-horizontal: $global-gutter !default;
$grid-medium-gutter-vertical  : $grid-medium-gutter-horizontal !default;

$grid-large-gutter-horizontal  : $global-medium-gutter !default;
$grid-large-gutter-vertical    : $grid-large-gutter-horizontal !default;
$grid-large-gutter-horizontal-l: $global-large-gutter !default;
$grid-large-gutter-vertical-l  : $grid-large-gutter-horizontal-l !default;

$grid-divider-border-width: $global-border-width !default;
$grid-divider-border      : $global-border !default;


/* ========================================================================
   Component: Grid
 ========================================================================== */

/*
 * 1. Allow cells to wrap into the next line
 * 2. Reset list
 */

.x-grid {
    display   : flex;
    /* 1 */
    flex-wrap : wrap;
    /* 2 */
    margin    : 0;
    padding   : 0;
    list-style: none;
}

/*
 * Grid cell
 * Note: Space is allocated solely based on content dimensions, but shrinks: 0 1 auto
 * Reset margin for e.g. paragraphs
 */

.x-grid>* {
    margin: 0;
}

/*
 * Remove margin from the last-child
 */

.x-grid>*> :last-child {
    margin-bottom: 0;
}


/* Gutter
 ========================================================================== */

/*
 * Default
 */

/* Horizontal */
.x-grid {
    margin-left: (-$grid-gutter-horizontal);
}

.x-grid>* {
    padding-left: $grid-gutter-horizontal;
}

/* Vertical */
.x-grid+.x-grid,
.x-grid>.x-grid-margin,
*+.x-grid-margin {
    margin-top: $grid-gutter-vertical;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Horizontal */
    .x-grid {
        margin-left: (-$grid-gutter-horizontal-l);
    }

    .x-grid>* {
        padding-left: $grid-gutter-horizontal-l;
    }

    /* Vertical */
    .x-grid+.x-grid,
    .x-grid>.x-grid-margin,
    *+.x-grid-margin {
        margin-top: $grid-gutter-vertical-l;
    }

}

/*
 * Small
 */

/* Horizontal */
.x-grid-small,
.x-grid-column-small {
    margin-left: (-$grid-small-gutter-horizontal);
}

.x-grid-small>*,
.x-grid-column-small>* {
    padding-left: $grid-small-gutter-horizontal;
}

/* Vertical */
.x-grid+.x-grid-small,
.x-grid+.x-grid-row-small,
.x-grid-small>.x-grid-margin,
.x-grid-row-small>.x-grid-margin,
*+.x-grid-margin-small {
    margin-top: $grid-small-gutter-vertical;
}

/*
 * Medium
 */

/* Horizontal */
.x-grid-medium,
.x-grid-column-medium {
    margin-left: (-$grid-medium-gutter-horizontal);
}

.x-grid-medium>*,
.x-grid-column-medium>* {
    padding-left: $grid-medium-gutter-horizontal;
}

/* Vertical */
.x-grid+.x-grid-medium,
.x-grid+.x-grid-row-medium,
.x-grid-medium>.x-grid-margin,
.x-grid-row-medium>.x-grid-margin,
*+.x-grid-margin-medium {
    margin-top: $grid-medium-gutter-vertical;
}

/*
 * Large
 */

/* Horizontal */
.x-grid-large,
.x-grid-column-large {
    margin-left: (-$grid-large-gutter-horizontal);
}

.x-grid-large>*,
.x-grid-column-large>* {
    padding-left: $grid-large-gutter-horizontal;
}

/* Vertical */
.x-grid+.x-grid-large,
.x-grid+.x-grid-row-large,
.x-grid-large>.x-grid-margin,
.x-grid-row-large>.x-grid-margin,
*+.x-grid-margin-large {
    margin-top: $grid-large-gutter-vertical;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Horizontal */
    .x-grid-large,
    .x-grid-column-large {
        margin-left: (-$grid-large-gutter-horizontal-l);
    }

    .x-grid-large>*,
    .x-grid-column-large>* {
        padding-left: $grid-large-gutter-horizontal-l;
    }

    /* Vertical */
    .x-grid+.x-grid-large,
    .x-grid+.x-grid-row-large,
    .x-grid-large>.x-grid-margin,
    .x-grid-row-large>.x-grid-margin,
    *+.x-grid-margin-large {
        margin-top: $grid-large-gutter-vertical-l;
    }

}

/*
 * Collapse
 */

/* Horizontal */
.x-grid-collapse,
.x-grid-column-collapse {
    margin-left: 0;
}

.x-grid-collapse>*,
.x-grid-column-collapse>* {
    padding-left: 0;
}

/* Vertical */
.x-grid+.x-grid-collapse,
.x-grid+.x-grid-row-collapse,
.x-grid-collapse>.x-grid-margin,
.x-grid-row-collapse>.x-grid-margin {
    margin-top: 0;
}


/* Divider
 ========================================================================== */

.x-grid-divider>* {
    position: relative;
}

.x-grid-divider> :not(.x-first-column)::before {
    content    : "";
    position   : absolute;
    top        : 0;
    bottom     : 0;
    border-left: $grid-divider-border-width solid $grid-divider-border;
}

/* Vertical */
.x-grid-divider.x-grid-stack>.x-grid-margin::before {
    content   : "";
    position  : absolute;
    left      : 0;
    right     : 0;
    border-top: $grid-divider-border-width solid $grid-divider-border;
}

/*
 * Default
 */

/* Horizontal */
.x-grid-divider {
    margin-left: -($grid-gutter-horizontal * 2);
}

.x-grid-divider>* {
    padding-left: ($grid-gutter-horizontal * 2);
}

.x-grid-divider> :not(.x-first-column)::before {
    left: $grid-gutter-horizontal;
}

/* Vertical */
.x-grid-divider.x-grid-stack>.x-grid-margin {
    margin-top: ($grid-gutter-vertical * 2);
}

.x-grid-divider.x-grid-stack>.x-grid-margin::before {
    top : (-$grid-gutter-vertical);
    left: ($grid-gutter-horizontal * 2);
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Horizontal */
    .x-grid-divider {
        margin-left: -($grid-gutter-horizontal-l * 2);
    }

    .x-grid-divider>* {
        padding-left: ($grid-gutter-horizontal-l * 2);
    }

    .x-grid-divider> :not(.x-first-column)::before {
        left: $grid-gutter-horizontal-l;
    }

    /* Vertical */
    .x-grid-divider.x-grid-stack>.x-grid-margin {
        margin-top: ($grid-gutter-vertical-l * 2);
    }

    .x-grid-divider.x-grid-stack>.x-grid-margin::before {
        top : (-$grid-gutter-vertical-l);
        left: ($grid-gutter-horizontal-l * 2);
    }

}

/*
 * Small
 */

/* Horizontal */
.x-grid-divider.x-grid-small,
.x-grid-divider.x-grid-column-small {
    margin-left: -($grid-small-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-small>*,
.x-grid-divider.x-grid-column-small>* {
    padding-left: ($grid-small-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-small> :not(.x-first-column)::before,
.x-grid-divider.x-grid-column-small> :not(.x-first-column)::before {
    left: $grid-small-gutter-horizontal;
}

/* Vertical */
.x-grid-divider.x-grid-small.x-grid-stack>.x-grid-margin,
.x-grid-divider.x-grid-row-small.x-grid-stack>.x-grid-margin {
    margin-top: ($grid-small-gutter-vertical * 2);
}

.x-grid-divider.x-grid-small.x-grid-stack>.x-grid-margin::before {
    top : (-$grid-small-gutter-vertical);
    left: ($grid-small-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-row-small.x-grid-stack>.x-grid-margin::before {
    top: (-$grid-small-gutter-vertical);
}

.x-grid-divider.x-grid-column-small.x-grid-stack>.x-grid-margin::before {
    left: ($grid-small-gutter-horizontal * 2);
}

/*
 * Medium
 */

/* Horizontal */
.x-grid-divider.x-grid-medium,
.x-grid-divider.x-grid-column-medium {
    margin-left: -($grid-medium-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-medium>*,
.x-grid-divider.x-grid-column-medium>* {
    padding-left: ($grid-medium-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-medium> :not(.x-first-column)::before,
.x-grid-divider.x-grid-column-medium> :not(.x-first-column)::before {
    left: $grid-medium-gutter-horizontal;
}

/* Vertical */
.x-grid-divider.x-grid-medium.x-grid-stack>.x-grid-margin,
.x-grid-divider.x-grid-row-medium.x-grid-stack>.x-grid-margin {
    margin-top: ($grid-medium-gutter-vertical * 2);
}

.x-grid-divider.x-grid-medium.x-grid-stack>.x-grid-margin::before {
    top : (-$grid-medium-gutter-vertical);
    left: ($grid-medium-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-row-medium.x-grid-stack>.x-grid-margin::before {
    top: (-$grid-medium-gutter-vertical);
}

.x-grid-divider.x-grid-column-medium.x-grid-stack>.x-grid-margin::before {
    left: ($grid-medium-gutter-horizontal * 2);
}

/*
 * Large
 */

/* Horizontal */
.x-grid-divider.x-grid-large,
.x-grid-divider.x-grid-column-large {
    margin-left: -($grid-large-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-large>*,
.x-grid-divider.x-grid-column-large>* {
    padding-left: ($grid-large-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-large> :not(.x-first-column)::before,
.x-grid-divider.x-grid-column-large> :not(.x-first-column)::before {
    left: $grid-large-gutter-horizontal;
}

/* Vertical */
.x-grid-divider.x-grid-large.x-grid-stack>.x-grid-margin,
.x-grid-divider.x-grid-row-large.x-grid-stack>.x-grid-margin {
    margin-top: ($grid-large-gutter-vertical * 2);
}

.x-grid-divider.x-grid-large.x-grid-stack>.x-grid-margin::before {
    top : (-$grid-large-gutter-vertical);
    left: ($grid-large-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-row-large.x-grid-stack>.x-grid-margin::before {
    top: (-$grid-large-gutter-vertical);
}

.x-grid-divider.x-grid-column-large.x-grid-stack>.x-grid-margin::before {
    left: ($grid-large-gutter-horizontal * 2);
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Horizontal */
    .x-grid-divider.x-grid-large,
    .x-grid-divider.x-grid-column-large {
        margin-left: -($grid-large-gutter-horizontal-l * 2);
    }

    .x-grid-divider.x-grid-large>*,
    .x-grid-divider.x-grid-column-large>* {
        padding-left: ($grid-large-gutter-horizontal-l * 2);
    }

    .x-grid-divider.x-grid-large> :not(.x-first-column)::before,
    .x-grid-divider.x-grid-column-large> :not(.x-first-column)::before {
        left: $grid-large-gutter-horizontal-l;
    }

    /* Vertical */
    .x-grid-divider.x-grid-large.x-grid-stack>.x-grid-margin,
    .x-grid-divider.x-grid-row-large.x-grid-stack>.x-grid-margin {
        margin-top: ($grid-large-gutter-vertical-l * 2);
    }

    .x-grid-divider.x-grid-large.x-grid-stack>.x-grid-margin::before {
        top : (-$grid-large-gutter-vertical-l);
        left: ($grid-large-gutter-horizontal-l * 2);
    }

    .x-grid-divider.x-grid-row-large.x-grid-stack>.x-grid-margin::before {
        top: (-$grid-large-gutter-vertical-l);
    }

    .x-grid-divider.x-grid-column-large.x-grid-stack>.x-grid-margin::before {
        left: ($grid-large-gutter-horizontal-l * 2);
    }

}


/* Match child of a grid cell
 ========================================================================== */

/*
 * Behave like a block element
 * 1. Wrap into the next line
 * 2. Take the full width, at least 100%. Only if no class from the Width component is set.
 * 3. Expand width even if larger than 100%, e.g. because of negative margin (Needed for nested grids)
 */

.x-grid-match>*,
.x-grid-item-match {
    display  : flex;
    /* 1 */
    flex-wrap: wrap;
}

.x-grid-match>*> :not([class*='x-width']),
.x-grid-item-match> :not([class*='x-width']) {
    /* 2 */
    box-sizing: border-box;
    width     : 100%;
    /* 3 */
    flex      : auto;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-grid-misc)) {
    @include hook-grid-misc();
}

// @mixin hook-grid-misc(){}


// Inverse
// ========================================================================

$inverse-grid-divider-border: $inverse-global-border !default;

//
// Component: Grid
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-grid-misc(){}