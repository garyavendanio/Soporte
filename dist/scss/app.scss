// Name:            Accordion
// Description:     Component to create accordions
//
// Component:       `x-accordion`
//
// Sub-objects:     `x-accordion-title`
//                  `x-accordion-content`
//
// States:          `x-open`
//
// ========================================================================


// Variables
// ========================================================================

$accordion-item-margin-top: $global-margin !default;

$accordion-title-font-size  : $global-medium-font-size !default;
$accordion-title-line-height: 1.4 !default;
$accordion-title-color      : $global-emphasis-color !default;
$accordion-title-hover-color: $global-color !default;

$accordion-content-margin-top: $global-margin !default;


/* ========================================================================
   Component: Accordion
 ========================================================================== */

.x-accordion {
    padding   : 0;
    list-style: none;

    @if(mixin-exists(hook-accordion)) {
        @include hook-accordion();
    }
}


/* Item
 ========================================================================== */

.x-accordion> :nth-child(n+2) {
    margin-top: $accordion-item-margin-top;

    @if(mixin-exists(hook-accordion-item)) {
        @include hook-accordion-item();
    }
}


/* Title
 ========================================================================== */

.x-accordion-title {
    display    : block;
    font-size  : $accordion-title-font-size;
    line-height: $accordion-title-line-height;
    color      : $accordion-title-color;

    @if(mixin-exists(hook-accordion-title)) {
        @include hook-accordion-title();
    }
}

/* Hover + Focus */
.x-accordion-title:hover,
.x-accordion-title:focus {
    color          : $accordion-title-hover-color;
    text-decoration: none;
    outline        : none;

    @if(mixin-exists(hook-accordion-title-hover)) {
        @include hook-accordion-title-hover();
    }
}


/* Content
 ========================================================================== */

.x-accordion-content {
    display   : flow-root;
    margin-top: $accordion-content-margin-top;

    @if(mixin-exists(hook-accordion-content)) {
        @include hook-accordion-content();
    }
}

/*
 * Remove margin from the last-child
 */

.x-accordion-content> :last-child {
    margin-bottom: 0;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-accordion-misc)) {
    @include hook-accordion-misc();
}

// @mixin hook-accordion(){}
// @mixin hook-accordion-item(){}
// @mixin hook-accordion-title(){}
// @mixin hook-accordion-title-hover(){}
// @mixin hook-accordion-content(){}
// @mixin hook-accordion-misc(){}


// Inverse
// ========================================================================

$inverse-accordion-title-color      : $inverse-global-emphasis-color !default;
$inverse-accordion-title-hover-color: $inverse-global-color !default;



// @mixin hook-inverse-accordion-item(){}
// @mixin hook-inverse-accordion-title(){}
// @mixin hook-inverse-accordion-title-hover(){}

//
// Component: Accordion
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$accordion-icon-margin-left    : 10px !default;
$accordion-icon-color          : $global-color !default;
$internal-accordion-open-image : "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2213%22%20height%3D%2213%22%20viewBox%3D%220%200%2013%2013%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Crect%20fill%3D%22#000%22%20width%3D%2213%22%20height%3D%221%22%20x%3D%220%22%20y%3D%226%22%20%2F%3E%0A%3C%2Fsvg%3E" !default;
$internal-accordion-close-image: "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2213%22%20height%3D%2213%22%20viewBox%3D%220%200%2013%2013%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Crect%20fill%3D%22#000%22%20width%3D%2213%22%20height%3D%221%22%20x%3D%220%22%20y%3D%226%22%20%2F%3E%0A%20%20%20%20%3Crect%20fill%3D%22#000%22%20width%3D%221%22%20height%3D%2213%22%20x%3D%226%22%20y%3D%220%22%20%2F%3E%0A%3C%2Fsvg%3E" !default;


// Component
// ========================================================================

// @mixin hook-accordion(){}


// Item
// ========================================================================

// @mixin hook-accordion-item(){}


// Title
// ========================================================================



// @mixin hook-accordion-title-hover(){}


// Content
// ========================================================================

// @mixin hook-accordion-content(){}


// Miscellaneous
// ========================================================================

// @mixin hook-accordion-misc(){}

// Inverse
// ========================================================================

// @mixin hook-inverse-accordion-item(){}

// @mixin hook-inverse-accordion-title(){}
// @mixin hook-inverse-accordion-title-hover(){}
// Name:            Alert
// Description:     Component to create alert messages
//
// Component:       `x-alert`
//
// Adopted:         `x-alert-close`
//
// Modifiers:       `x-alert-primary`
//                  `x-alert-success`
//                  `x-alert-warning`
//                  `x-alert-danger`
//
// ========================================================================


// Variables
// ========================================================================

$alert-margin-vertical: $global-margin !default;
$alert-padding        : $global-small-gutter !default;
$alert-padding-right  : $alert-padding+14px !default;
$alert-background     : $global-muted-background !default;
$alert-color          : $global-color !default;

$alert-close-top  : $alert-padding+5px !default;
$alert-close-right: $alert-padding !default;

$alert-primary-background: lighten(mix(white, $global-primary-background, 40%), 20%) !default;
$alert-primary-color     : $global-primary-background !default;

$alert-success-background: lighten(mix(white, $global-success-background, 40%), 25%) !default;
$alert-success-color     : $global-success-background !default;

$alert-warning-background: lighten(mix(white, $global-warning-background, 45%), 15%) !default;
$alert-warning-color     : $global-warning-background !default;

$alert-danger-background: lighten(mix(white, $global-danger-background, 40%), 20%) !default;
$alert-danger-color     : $global-danger-background !default;


/* ========================================================================
   Component: Alert
 ========================================================================== */

.x-alert {
    position     : relative;
    margin-bottom: $alert-margin-vertical;
    padding      : $alert-padding $alert-padding-right $alert-padding $alert-padding;
    background   : $alert-background;
    color        : $alert-color;

    @if(mixin-exists(hook-alert)) {
        @include hook-alert();
    }
}

/* Add margin if adjacent element */
*+.x-alert {
    margin-top: $alert-margin-vertical;
}

/*
 * Remove margin from the last-child
 */

.x-alert> :last-child {
    margin-bottom: 0;
}


/* Close
 * Adopts `x-close`
 ========================================================================== */

.x-alert-close {
    position: absolute;
    top     : $alert-close-top;
    right   : $alert-close-right;

    @if(mixin-exists(hook-alert-close)) {
        @include hook-alert-close();
    }
}

/*
 * Remove margin from adjacent element
 */

.x-alert-close:first-child+* {
    margin-top: 0;
}

/*
 * Hover + Focus
 */

.x-alert-close:hover,
.x-alert-close:focus {
    @if(mixin-exists(hook-alert-close-hover)) {
        @include hook-alert-close-hover();
    }
}


/* Style modifiers
 ========================================================================== */

/*
 * Primary
 */

.x-alert-primary {
    background: $alert-primary-background;
    color     : $alert-primary-color;

    @if(mixin-exists(hook-alert-primary)) {
        @include hook-alert-primary();
    }
}

/*
 * Success
 */

.x-alert-success {
    background: $alert-success-background;
    color     : $alert-success-color;

    @if(mixin-exists(hook-alert-success)) {
        @include hook-alert-success();
    }
}

/*
 * Warning
 */

.x-alert-warning {
    background: $alert-warning-background;
    color     : $alert-warning-color;

    @if(mixin-exists(hook-alert-warning)) {
        @include hook-alert-warning();
    }
}

/*
 * Danger
 */

.x-alert-danger {
    background: $alert-danger-background;
    color     : $alert-danger-color;

    @if(mixin-exists(hook-alert-danger)) {
        @include hook-alert-danger();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-alert-misc)) {
    @include hook-alert-misc();
}

// @mixin hook-alert(){}
// @mixin hook-alert-close(){}
// @mixin hook-alert-close-hover(){}
// @mixin hook-alert-primary(){}
// @mixin hook-alert-success(){}
// @mixin hook-alert-warning(){}
// @mixin hook-alert-danger(){}
// @mixin hook-alert-misc(){}

//
// Component: Alert
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$alert-close-opacity:                            0.4 !default;
$alert-close-hover-opacity:                      0.8 !default;


// Component
// ========================================================================

// @mixin hook-alert(){}


// Close
// ========================================================================






// Style modifiers
// ========================================================================

// @mixin hook-alert-primary(){}

// @mixin hook-alert-success(){}

// @mixin hook-alert-warning(){}

// @mixin hook-alert-danger(){}


// Miscellaneous
// ========================================================================


// Name:            Align
// Description:     Utilities to align embedded content
//
// Component:       `x-align-left-*`
//                  `x-align-right-*`
//                  `x-align-center`
//
// ========================================================================


// Variables
// ========================================================================

$align-margin-horizontal: $global-gutter !default;
$align-margin-vertical  : $global-gutter !default;

$align-margin-horizontal-l: $global-medium-gutter !default;


/* ========================================================================
   Component: Align
 ========================================================================== */

/*
 * Default
 */

[class*='x-align'] {
    display      : block;
    margin-bottom: $align-margin-vertical;
}

*+[class*='x-align'] {
    margin-top: $align-margin-vertical;
}

/*
 * Center
 */

.x-align-center {
    margin-left : auto;
    margin-right: auto;
}

/*
 * Left/Right
 */

.x-align-left {
    margin-top  : 0;
    margin-right: $align-margin-horizontal;
    float       : left;
}

.x-align-right {
    margin-top : 0;
    margin-left: $align-margin-horizontal;
    float      : right;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-align-left\:small {
        margin-top  : 0;
        margin-right: $align-margin-horizontal;
        float       : left;
    }

    .x-align-right\:small {
        margin-top : 0;
        margin-left: $align-margin-horizontal;
        float      : right;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-align-left\:medium {
        margin-top  : 0;
        margin-right: $align-margin-horizontal;
        float       : left;
    }

    .x-align-right\:medium {
        margin-top : 0;
        margin-left: $align-margin-horizontal;
        float      : right;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-align-left\:large {
        margin-top: 0;
        float     : left;
    }

    .x-align-right\:large {
        margin-top: 0;
        float     : right;
    }

    .x-align-left,
    .x-align-left\:small,
    .x-align-left\:medium,
    .x-align-left\:large {
        margin-right: $align-margin-horizontal-l;
    }

    .x-align-right,
    .x-align-right\:small,
    .x-align-right\:medium,
    .x-align-right\:large {
        margin-left: $align-margin-horizontal-l;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-align-left\:xlarge {
        margin-top  : 0;
        margin-right: $align-margin-horizontal-l;
        float       : left;
    }

    .x-align-right\:xlarge {
        margin-top : 0;
        margin-left: $align-margin-horizontal-l;
        float      : right;
    }

}


// Hooks
// ========================================================================

@if(mixin-exists(hook-align-misc)) {
    @include hook-align-misc();
}

// @mixin hook-align-misc(){}

//
// Component: Align
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-align-misc(){}
// Name:            Animation
// Description:     Utilities for keyframe animations
//
// Component:       `x-animation-*`
//
// Modifiers:       `x-animation-fade`
//                  `x-animation-scale-up`
//                  `x-animation-scale-down`
//                  `x-animation-slide-top-*`
//                  `x-animation-slide-bottom-*`
//                  `x-animation-slide-left-*`
//                  `x-animation-slide-right-*`
//                  `x-animation-kenburns`
//                  `x-animation-shake`
//                  `x-animation-stroke`
//                  `x-animation-reverse`
//                  `x-animation-fast`
//
// Sub-objects:     `x-animation-toggle`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$animation-duration         : 0.5s !default;
$animation-fade-duration    : 0.8s !default;
$animation-stroke-duration  : 2s !default;
$animation-kenburns-duration: 15s !default;
$animation-fast-duration    : 0.1s !default;

$animation-slide-small-translate : 10px !default;
$animation-slide-medium-translate: 50px !default;


/* ========================================================================
   Component: Animation
 ========================================================================== */

[class*='x-animation-'] {
    animation-duration       : $animation-duration;
    animation-timing-function: ease-out;
    animation-fill-mode      : both;
}


/* Animations
 ========================================================================== */

/*
 * Fade
 */

.x-animation-fade {
    animation-name           : x-fade;
    animation-duration       : $animation-fade-duration;
    animation-timing-function: linear;
}

/*
 * Scale
 */

.x-animation-scale-up {
    animation-name: x-fade-scale-02;
}

.x-animation-scale-down {
    animation-name: x-fade-scale-18;
}

/*
 * Slide
 */

.x-animation-slide-top {
    animation-name: x-fade-top;
}

.x-animation-slide-bottom {
    animation-name: x-fade-bottom;
}

.x-animation-slide-left {
    animation-name: x-fade-left;
}

.x-animation-slide-right {
    animation-name: x-fade-right;
}

/*
 * Slide Small
 */

.x-animation-slide-top-small {
    animation-name: x-fade-top-small;
}

.x-animation-slide-bottom-small {
    animation-name: x-fade-bottom-small;
}

.x-animation-slide-left-small {
    animation-name: x-fade-left-small;
}

.x-animation-slide-right-small {
    animation-name: x-fade-right-small;
}

/*
 * Slide Medium
 */

.x-animation-slide-top-medium {
    animation-name: x-fade-top-medium;
}

.x-animation-slide-bottom-medium {
    animation-name: x-fade-bottom-medium;
}

.x-animation-slide-left-medium {
    animation-name: x-fade-left-medium;
}

.x-animation-slide-right-medium {
    animation-name: x-fade-right-medium;
}

/*
 * Kenburns
 */

.x-animation-kenburns {
    animation-name    : x-scale-kenburns;
    animation-duration: $animation-kenburns-duration;
}

/*
 * Shake
 */

.x-animation-shake {
    animation-name: x-shake;
}

/*
 * SVG Stroke
 * The `--x-animation-stroke` custom property contains the longest path length.
 * Set it manually or use `x-svg="stroke-animation: true"` to set it automatically.
 * All strokes are animated by the same pace and doesn't end simultaneously.
 * To end simultaneously, `pathLength="1"` could be used, but it's not working in Safari yet.
 */

.x-animation-stroke {
    animation-name    : x-stroke;
    stroke-dasharray  : var(--x-animation-stroke);
    animation-duration: $animation-stroke-duration;
}


/* Direction modifier
 ========================================================================== */

.x-animation-reverse {
    animation-direction      : reverse;
    animation-timing-function: ease-in;
}


/* Duration modifier
 ========================================================================== */

.x-animation-fast {
    animation-duration: $animation-fast-duration;
}


/* Toggle (Hover + Focus)
========================================================================== */

/*
 * The toggle is triggered on touch devices using `:focus` and tabindex
 */

.x-animation-toggle:not(:hover):not(:focus) [class*='x-animation-'] {
    animation-name: none;
}

/*
 * 1. Prevent tab highlighting on iOS.
 */

.x-animation-toggle {
    /* 1 */
    -webkit-tap-highlight-color: transparent;
}

/*
 * Remove outline for `tabindex`
 */

.x-animation-toggle:focus {
    outline: none;
}


/* Keyframes used by animation classes
 ========================================================================== */

/*
 * Fade
 */

@keyframes x-fade {
    0% {
        opacity: 0;
    }

    100% {
        opacity: 1;
    }
}

/*
 * Slide Top
 */

@keyframes x-fade-top {
    0% {
        opacity  : 0;
        transform: translateY(-100%);
    }

    100% {
        opacity  : 1;
        transform: translateY(0);
    }
}

/*
 * Slide Bottom
 */

@keyframes x-fade-bottom {
    0% {
        opacity  : 0;
        transform: translateY(100%);
    }

    100% {
        opacity  : 1;
        transform: translateY(0);
    }
}

/*
 * Slide Left
 */

@keyframes x-fade-left {
    0% {
        opacity  : 0;
        transform: translateX(-100%);
    }

    100% {
        opacity  : 1;
        transform: translateX(0);
    }
}

/*
 * Slide Right
 */

@keyframes x-fade-right {
    0% {
        opacity  : 0;
        transform: translateX(100%);
    }

    100% {
        opacity  : 1;
        transform: translateX(0);
    }
}

/*
 * Slide Top Small
 */

@keyframes x-fade-top-small {
    0% {
        opacity  : 0;
        transform: translateY(-$animation-slide-small-translate);
    }

    100% {
        opacity  : 1;
        transform: translateY(0);
    }
}

/*
 * Slide Bottom Small
 */

@keyframes x-fade-bottom-small {
    0% {
        opacity  : 0;
        transform: translateY($animation-slide-small-translate);
    }

    100% {
        opacity  : 1;
        transform: translateY(0);
    }
}

/*
 * Slide Left Small
 */

@keyframes x-fade-left-small {
    0% {
        opacity  : 0;
        transform: translateX(-$animation-slide-small-translate);
    }

    100% {
        opacity  : 1;
        transform: translateX(0);
    }
}

/*
 * Slide Right Small
 */

@keyframes x-fade-right-small {
    0% {
        opacity  : 0;
        transform: translateX($animation-slide-small-translate);
    }

    100% {
        opacity  : 1;
        transform: translateX(0);
    }
}

/*
 * Slide Top Medium
 */

@keyframes x-fade-top-medium {
    0% {
        opacity  : 0;
        transform: translateY(-$animation-slide-medium-translate);
    }

    100% {
        opacity  : 1;
        transform: translateY(0);
    }
}

/*
 * Slide Bottom Medium
 */

@keyframes x-fade-bottom-medium {
    0% {
        opacity  : 0;
        transform: translateY($animation-slide-medium-translate);
    }

    100% {
        opacity  : 1;
        transform: translateY(0);
    }
}

/*
 * Slide Left Medium
 */

@keyframes x-fade-left-medium {
    0% {
        opacity  : 0;
        transform: translateX(-$animation-slide-medium-translate);
    }

    100% {
        opacity  : 1;
        transform: translateX(0);
    }
}

/*
 * Slide Right Medium
 */

@keyframes x-fade-right-medium {
    0% {
        opacity  : 0;
        transform: translateX($animation-slide-medium-translate);
    }

    100% {
        opacity  : 1;
        transform: translateX(0);
    }
}

/*
 * Scale Up
 */

@keyframes x-fade-scale-02 {
    0% {
        opacity  : 0;
        transform: scale(0.2);
    }

    100% {
        opacity  : 1;
        transform: scale(1);
    }
}

/*
 * Scale Down
 */

@keyframes x-fade-scale-18 {
    0% {
        opacity  : 0;
        transform: scale(1.8);
    }

    100% {
        opacity  : 1;
        transform: scale(1);
    }
}

/*
 * Kenburns
 */

@keyframes x-scale-kenburns {
    0% {
        transform: scale(1);
    }

    100% {
        transform: scale(1.2);
    }
}

/*
 * Shake
 */

@keyframes x-shake {

    0%,
    100% {
        transform: translateX(0);
    }

    10% {
        transform: translateX(-9px);
    }

    20% {
        transform: translateX(8px);
    }

    30% {
        transform: translateX(-7px);
    }

    40% {
        transform: translateX(6px);
    }

    50% {
        transform: translateX(-5px);
    }

    60% {
        transform: translateX(4px);
    }

    70% {
        transform: translateX(-3px);
    }

    80% {
        transform: translateX(2px);
    }

    90% {
        transform: translateX(-1px);
    }
}

/*
 * Stroke
 */

@keyframes x-stroke {
    0% {
        stroke-dashoffset: var(--x-animation-stroke);
    }

    100% {
        stroke-dashoffset: 0;
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-animation-misc)) {
    @include hook-animation-misc();
}

// @mixin hook-animation-misc(){}


//
// Component: Animation
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-animation-misc(){}
// Name:            Article
// Description:     Component to create articles
//
// Component:       `x-article`
//
// Sub-objects:     `x-article-title`
//                  `x-article-meta`
//
// ========================================================================


// Variables
// ========================================================================

$article-margin-top: $global-large-margin !default;

$article-title-font-size-m: $global-2xlarge-font-size !default;
$article-title-font-size  : $article-title-font-size-m * 0.85 !default;
$article-title-line-height: 1.2 !default;

$article-meta-font-size  : $global-small-font-size !default;
$article-meta-line-height: 1.4 !default;
$article-meta-color      : $global-muted-color !default;


/* ========================================================================
   Component: Article
 ========================================================================== */

.x-article {
    display: flow-root;

    @if(mixin-exists(hook-article)) {
        @include hook-article();
    }
}

/*
 * Remove margin from the last-child
 */

.x-article> :last-child {
    margin-bottom: 0;
}


/* Adjacent sibling
 ========================================================================== */

.x-article+.x-article {
    margin-top: $article-margin-top;

    @if(mixin-exists(hook-article-adjacent)) {
        @include hook-article-adjacent();
    }
}


/* Title
 ========================================================================== */

.x-article-title {
    font-size  : $article-title-font-size;
    line-height: $article-title-line-height;

    @if(mixin-exists(hook-article-title)) {
        @include hook-article-title();
    }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-article-title {
        font-size: $article-title-font-size-m;
    }

}


/* Meta
 ========================================================================== */

.x-article-meta {
    font-size  : $article-meta-font-size;
    line-height: $article-meta-line-height;
    color      : $article-meta-color;

    @if(mixin-exists(hook-article-meta)) {
        @include hook-article-meta();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-article-misc)) {
    @include hook-article-misc();
}

// @mixin hook-article(){}
// @mixin hook-article-adjacent(){}
// @mixin hook-article-title(){}
// @mixin hook-article-meta(){}
// @mixin hook-article-misc(){}


// Inverse
// ========================================================================

$inverse-article-meta-color: $inverse-global-muted-color !default;



// @mixin hook-inverse-article-title(){}
// @mixin hook-inverse-article-meta(){}


//
// Component: Article
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$article-meta-link-color:                        $article-meta-color !default;
$article-meta-link-hover-color:                  $global-color !default;


// Component
// ========================================================================

// @mixin hook-article(){}


// Adjacent sibling
// ========================================================================

// @mixin hook-article-adjacent(){}


// Title
// ========================================================================

// @mixin hook-article-title(){}


// Meta
// ========================================================================




// Miscellaneous
// ========================================================================

// @mixin hook-article-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-article-meta(){}
// Name:            Background
// Description:     Utilities for backgrounds
//
// Component:       `x-background-*`
//
// ========================================================================


// Variables
// ========================================================================

$background-default-background  : $global-background !default;
$background-muted-background    : $global-muted-background !default;
$background-primary-background  : $global-primary-background !default;
$background-secondary-background: $global-secondary-background !default;


/* ========================================================================
   Component: Background
 ========================================================================== */


/* Color
 ========================================================================== */

.x-background-default {
    background-color: $background-default-background;
}

.x-background-muted {
    background-color: $background-muted-background;
}

.x-background-primary {
    background-color: $background-primary-background;
}

.x-background-secondary {
    background-color: $background-secondary-background;
}


/* Size
 ========================================================================== */

.x-background-cover,
.x-background-contain,
.x-background-width-1-1,
.x-background-height-1-1 {
    background-position: 50% 50%;
    background-repeat  : no-repeat;
}

.x-background-cover {
    background-size: cover;
}

.x-background-contain {
    background-size: contain;
}

.x-background-width-1-1 {
    background-size: 100%;
}

.x-background-height-1-1 {
    background-size: auto 100%;
}


/* Position
 ========================================================================== */

.x-background-top-left {
    background-position: 0 0;
}

.x-background-top-center {
    background-position: 50% 0;
}

.x-background-top-right {
    background-position: 100% 0;
}

.x-background-center-left {
    background-position: 0 50%;
}

.x-background-center-center {
    background-position: 50% 50%;
}

.x-background-center-right {
    background-position: 100% 50%;
}

.x-background-bottom-left {
    background-position: 0 100%;
}

.x-background-bottom-center {
    background-position: 50% 100%;
}

.x-background-bottom-right {
    background-position: 100% 100%;
}


/* Repeat
 ========================================================================== */

.x-background-norepeat {
    background-repeat: no-repeat;
}


/* Attachment
 ========================================================================== */

/*
 * 1. Fix bug introduced in Chrome 67: the background image is not visible if any element on the page uses `translate3d`
 */

.x-background-fixed {
    background-attachment: fixed;
    /* 1 */
    backface-visibility  : hidden;
}

/*
 * Exclude touch devices because `fixed` doesn't work on iOS and Android
 */

@media (pointer: coarse) {
    .x-background-fixed {
        background-attachment: scroll;
    }
}


/* Image
 ========================================================================== */

/* Phone portrait and smaller */
@media (max-width: $breakpoint-xsmall-max) {

    .x-background-image\:small {
        background-image: none !important;
    }

}

/* Phone landscape and smaller */
@media (max-width: $breakpoint-small-max) {

    .x-background-image\:medium {
        background-image: none !important;
    }

}

/* Tablet landscape and smaller */
@media (max-width: $breakpoint-medium-max) {

    .x-background-image\:large {
        background-image: none !important;
    }

}

/* Desktop and smaller */
@media (max-width: $breakpoint-large-max) {

    .x-background-image\:xlarge {
        background-image: none !important;
    }

}


/* Blend modes
 ========================================================================== */

.x-background-blend-multiply {
    background-blend-mode: multiply;
}

.x-background-blend-screen {
    background-blend-mode: screen;
}

.x-background-blend-overlay {
    background-blend-mode: overlay;
}

.x-background-blend-darken {
    background-blend-mode: darken;
}

.x-background-blend-lighten {
    background-blend-mode: lighten;
}

.x-background-blend-color-dodge {
    background-blend-mode: color-dodge;
}

.x-background-blend-color-burn {
    background-blend-mode: color-burn;
}

.x-background-blend-hard-light {
    background-blend-mode: hard-light;
}

.x-background-blend-soft-light {
    background-blend-mode: soft-light;
}

.x-background-blend-difference {
    background-blend-mode: difference;
}

.x-background-blend-exclusion {
    background-blend-mode: exclusion;
}

.x-background-blend-hue {
    background-blend-mode: hue;
}

.x-background-blend-saturation {
    background-blend-mode: saturation;
}

.x-background-blend-color {
    background-blend-mode: color;
}

.x-background-blend-luminosity {
    background-blend-mode: luminosity;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-background-misc)) {
    @include hook-background-misc();
}

// @mixin hook-background-misc(){}

//
// Component: Background
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-background-misc(){}
// Name:            Badge
// Description:     Component to create notification badges
//
// Component:       `x-badge`
//
// ========================================================================


// Variables
// ========================================================================

$badge-size              : 22px !default;
$badge-padding-vertical  : 0 !default;
$badge-padding-horizontal: 5px !default;
$badge-border-radius     : 500px !default;
$badge-background        : $global-primary-background !default;
$badge-color             : $global-inverse-color !default;
$badge-font-size         : $global-small-font-size !default;

$badge-hover-color: $global-inverse-color !default;


/* ========================================================================
   Component: Badge
 ========================================================================== */

/*
 * 1. Style
 * 2. Center child vertically and horizontally
 */

.x-badge {
    box-sizing     : border-box;
    min-width      : $badge-size;
    height         : $badge-size;
    padding        : $badge-padding-vertical $badge-padding-horizontal;
    border-radius  : $badge-border-radius;
    vertical-align : middle;
    /* 1 */
    background     : $badge-background;
    color          : $badge-color;
    font-size      : $badge-font-size;
    /* 2 */
    display        : inline-flex;
    justify-content: center;
    align-items    : center;

    @if(mixin-exists(hook-badge)) {
        @include hook-badge();
    }
}

/*
 * Required for `a`
 */

.x-badge:hover,
.x-badge:focus {
    color          : $badge-hover-color;
    text-decoration: none;
    outline        : none;

    @if(mixin-exists(hook-badge-hover)) {
        @include hook-badge-hover();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-badge-misc)) {
    @include hook-badge-misc();
}

// @mixin hook-badge(){}
// @mixin hook-badge-hover(){}
// @mixin hook-badge-misc(){}


// Inverse
// ========================================================================

$inverse-badge-background : $inverse-global-primary-background !default;
$inverse-badge-color      : $inverse-global-inverse-color !default;
$inverse-badge-hover-color: $inverse-global-inverse-color !default;



// @mixin hook-inverse-badge(){}
// @mixin hook-inverse-badge-hover(){}

//
// Component: Badge
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-badge(){}

// @mixin hook-badge-hover(){}


// Miscellaneous
// ========================================================================

// @mixin hook-badge-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-badge(){}
// @mixin hook-inverse-badge-hover(){}
// Name:            Base
// Description:     Default values for HTML elements
//
// Component:       `x-link`
//                  `x-h1`, `x-h2`, `x-h3`, `x-h4`, `x-h5`, `x-h6`
//                  `x-hr`
//
// ========================================================================


// Variables
// ========================================================================

$base-body-background : $global-background !default;
$base-body-font-family: $global-font-family !default;
$base-body-font-weight: normal !default;
$base-body-font-size  : $global-font-size !default;
$base-body-line-height: $global-line-height !default;
$base-body-color      : $global-color !default;

$base-link-color                : $global-link-color !default;
$base-link-text-decoration      : none !default;
$base-link-hover-color          : $global-link-hover-color !default;
$base-link-hover-text-decoration: underline !default;

$base-strong-font-weight: bolder !default;
$base-code-font-size    : $global-small-font-size !default;
$base-code-font-family  : Consolas,
monaco,
monospace !default;
$base-code-color      : $global-danger-background !default;
$base-em-color        : $global-danger-background !default;
$base-ins-background  : #ffd !default;
$base-ins-color       : $global-color !default;
$base-mark-background : #ffd !default;
$base-mark-color      : $global-color !default;
$base-quote-font-style: italic !default;
$base-small-font-size : 80% !default;

$base-margin-vertical: $global-margin !default;

$base-heading-font-family   : $global-font-family !default;
$base-heading-font-weight   : normal !default;
$base-heading-color         : $global-emphasis-color !default;
$base-heading-text-transform: none !default;
$base-heading-margin-top    : $global-medium-margin !default;
$base-h1-font-size-m        : $global-2xlarge-font-size !default;
$base-h1-font-size          : $base-h1-font-size-m * 0.85 !default;
$base-h1-line-height        : 1.2 !default;
$base-h2-font-size-m        : $global-xlarge-font-size !default;
$base-h2-font-size          : $base-h2-font-size-m * 0.85 !default;
$base-h2-line-height        : 1.3 !default;
$base-h3-font-size          : $global-large-font-size !default;
$base-h3-line-height        : 1.4 !default;
$base-h4-font-size          : $global-medium-font-size !default;
$base-h4-line-height        : 1.4 !default;
$base-h5-font-size          : $global-font-size !default;
$base-h5-line-height        : 1.4 !default;
$base-h6-font-size          : $global-small-font-size !default;
$base-h6-line-height        : 1.4 !default;

$base-list-padding-left: 30px !default;

$base-hr-margin-vertical: $global-margin !default;
$base-hr-border-width   : $global-border-width !default;
$base-hr-border         : $global-border !default;

$base-blockquote-font-size         : $global-medium-font-size !default;
$base-blockquote-line-height       : 1.5 !default;
$base-blockquote-font-style        : italic !default;
$base-blockquote-margin-vertical   : $global-margin !default;
$base-blockquote-footer-margin-top : $global-small-margin !default;
$base-blockquote-footer-font-size  : $global-small-font-size !default;
$base-blockquote-footer-line-height: 1.5 !default;

$base-pre-font-size  : $global-small-font-size !default;
$base-pre-line-height: 1.5 !default;
$base-pre-font-family: $base-code-font-family !default;
$base-pre-color      : $global-color !default;

$base-selection-background: #39f !default;
$base-selection-color     : $global-inverse-color !default;


/* ========================================================================
   Component: Base
 ========================================================================== */

/*
 * 1. Set `font-size` to support `rem` units
 *    Not using `font` property because a leading hyphen (e.g. -apple-system) causes the font to break in IE11 and Edge
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 * 3. Style
 */

html {
    /* 1 */
    font-family             : $base-body-font-family;
    font-size               : $base-body-font-size;
    font-weight             : $base-body-font-weight;
    line-height             : $base-body-line-height;
    /* 2 */
    -webkit-text-size-adjust: 100%;
    /* 3 */
    background              : $base-body-background;
    color                   : $base-body-color;

    @if(mixin-exists(hook-base-body)) {
        @include hook-base-body();
    }
}

/*
 * Remove the margin in all browsers.
 */

body {
    margin: 0;
}


/* Links
 ========================================================================== */

/*
 * Remove the outline on focused links when they are also active or hovered
 */

a:active,
a:hover {
    outline: none;
}

/*
 * Style
 */

a,
.x-link {
    color          : $base-link-color;
    text-decoration: $base-link-text-decoration;
    cursor         : pointer;

    @if(mixin-exists(hook-base-link)) {
        @include hook-base-link();
    }
}

a:hover,
.x-link:hover,
.x-link-toggle:hover .x-link,
.x-link-toggle:focus .x-link {
    color          : $base-link-hover-color;
    text-decoration: $base-link-hover-text-decoration;

    @if(mixin-exists(hook-base-link-hover)) {
        @include hook-base-link-hover();
    }
}


/* Text-level semantics
 ========================================================================== */

/*
 * 1. Add the correct text decoration in Edge.
 * 2. The shorthand declaration `underline dotted` is not supported in Safari.
 */

abbr[title] {
    /* 1 */
    text-decoration              : underline dotted;
    /* 2 */
    text-decoration-style: dotted;
    -webkit-text-decoration-style: dotted;
}

/*
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
    font-weight: $base-strong-font-weight;
}

/*
 * 1. Consolas has a better baseline in running text compared to `Courier`
 * 2. Correct the odd `em` font sizing in all browsers.
 * 3. Style
 */

:not(pre)>code,
:not(pre)>kbd,
:not(pre)>samp {
    /* 1 */
    font-family: $base-code-font-family;
    /* 2 */
    font-size  : $base-code-font-size;
    /* 3 */
    color      : $base-code-color;
    white-space: nowrap;

    @if(mixin-exists(hook-base-code)) {
        @include hook-base-code();
    }
}

/*
 * Emphasize
 */

em {
    color: $base-em-color;
}

/*
 * Insert
 */

ins {
    background     : $base-ins-background;
    color          : $base-ins-color;
    text-decoration: none;
}

/*
 * Mark
 */

mark {
    background: $base-mark-background;
    color     : $base-mark-color;
}

/*
 * Quote
 */

q {
    font-style: $base-quote-font-style;
}

/*
 * Add the correct font size in all browsers.
 */

small {
    font-size: $base-small-font-size;
}

/*
 * Prevents `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size     : 75%;
    line-height   : 0;
    position      : relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}


/* Embedded content
 ========================================================================== */

/*
 * Remove the gap between embedded content and the bottom of their containers.
 */

audio,
canvas,
iframe,
img,
svg,
video {
    vertical-align: middle;
}

/*
 * 1. Add responsiveness.
 * 2. Auto-scale the height. Only needed if `height` attribute is present.
 * 3. Corrects responsive `max-width` behavior if padding and border are used.
 * 4. Exclude SVGs for IE11 because they don't preserve their aspect ratio.
 */

canvas,
img,
video {
    /* 1 */
    max-width : 100%;
    /* 2 */
    height    : auto;
    /* 3 */
    box-sizing: border-box;
}

/* 4 */
@supports (display: block) {

    svg {
        max-width : 100%;
        height    : auto;
        box-sizing: border-box;
    }

}

/*
 * Hide the overflow in IE.
 */

svg:not(:root) {
    overflow: hidden;
}

/*
 * 1. Fix lazy loading images if parent element is set to `display: inline` and has `overflow: hidden`.
 * 2. Hide `alt` text for lazy loading images.
 * Note: Selector for background while loading img[data-src*='.jpg'][src*='data:image'] { background: grey; }
 */

img:not([src]) {
    /* 1 */
    min-width : 1px;
    /* 2 */
    visibility: hidden;
}

/*
 * Iframe
 * Remove border in all browsers
 */

iframe {
    border: 0;
}


/* Block elements
 ========================================================================== */

/*
 * Margins
 */

p,
ul,
ol,
dl,
pre,
address,
fieldset,
figure {
    margin: 0 0 $base-margin-vertical 0;
}

/* Add margin if adjacent element */
*+p,
*+ul,
*+ol,
*+dl,
*+pre,
*+address,
*+fieldset,
*+figure {
    margin-top: $base-margin-vertical;
}


/* Headings
 ========================================================================== */

h1,
.x-h1,
h2,
.x-h2,
h3,
.x-h3,
h4,
.x-h4,
h5,
.x-h5,
h6,
.x-h6,
.x-heading-small,
.x-heading-medium,
.x-heading-large,
.x-heading-xlarge,
.x-heading-2xlarge {
    margin        : 0 0 $base-margin-vertical 0;
    font-family   : $base-heading-font-family;
    font-weight   : $base-heading-font-weight;
    color         : $base-heading-color;
    text-transform: $base-heading-text-transform;

    @if(mixin-exists(hook-base-heading)) {
        @include hook-base-heading();
    }
}

/* Add margin if adjacent element */
*+h1,
*+.x-h1,
*+h2,
*+.x-h2,
*+h3,
*+.x-h3,
*+h4,
*+.x-h4,
*+h5,
*+.x-h5,
*+h6,
*+.x-h6,
*+.x-heading-small,
*+.x-heading-medium,
*+.x-heading-large,
*+.x-heading-xlarge,
*+.x-heading-2xlarge {
    margin-top: $base-heading-margin-top;
}

/*
 * Sizes
 */

h1,
.x-h1 {
    font-size  : $base-h1-font-size;
    line-height: $base-h1-line-height;

    @if(mixin-exists(hook-base-h1)) {
        @include hook-base-h1();
    }
}

h2,
.x-h2 {
    font-size  : $base-h2-font-size;
    line-height: $base-h2-line-height;

    @if(mixin-exists(hook-base-h2)) {
        @include hook-base-h2();
    }
}

h3,
.x-h3 {
    font-size  : $base-h3-font-size;
    line-height: $base-h3-line-height;

    @if(mixin-exists(hook-base-h3)) {
        @include hook-base-h3();
    }
}

h4,
.x-h4 {
    font-size  : $base-h4-font-size;
    line-height: $base-h4-line-height;

    @if(mixin-exists(hook-base-h4)) {
        @include hook-base-h4();
    }
}

h5,
.x-h5 {
    font-size  : $base-h5-font-size;
    line-height: $base-h5-line-height;

    @if(mixin-exists(hook-base-h5)) {
        @include hook-base-h5();
    }
}

h6,
.x-h6 {
    font-size  : $base-h6-font-size;
    line-height: $base-h6-line-height;

    @if(mixin-exists(hook-base-h6)) {
        @include hook-base-h6();
    }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    h1,
    .x-h1 {
        font-size: $base-h1-font-size-m;
    }

    h2,
    .x-h2 {
        font-size: $base-h2-font-size-m;
    }

}


/* Lists
 ========================================================================== */

ul,
ol {
    padding-left: $base-list-padding-left;
}

/*
 * Reset margin for nested lists
 */

ul>li>ul,
ul>li>ol,
ol>li>ol,
ol>li>ul {
    margin: 0;
}


/* Description lists
 ========================================================================== */

dt {
    font-weight: bold;
}

dd {
    margin-left: 0;
}


/* Horizontal rules
 ========================================================================== */

/*
 * 1. Show the overflow in Chrome, Edge and IE.
 * 2. Add the correct text-align in Edge and IE.
 * 3. Style
 */

hr,
.x-hr {
    /* 1 */
    overflow  : visible;
    /* 2 */
    text-align: inherit;
    /* 3 */
    margin    : 0 0 $base-hr-margin-vertical 0;
    border    : 0;
    border-top: $base-hr-border-width solid $base-hr-border;

    @if(mixin-exists(hook-base-hr)) {
        @include hook-base-hr();
    }
}

/* Add margin if adjacent element */
*+hr,
*+.x-hr {
    margin-top: $base-hr-margin-vertical
}


/* Address
 ========================================================================== */

address {
    font-style: normal;
}


/* Blockquotes
 ========================================================================== */

blockquote {
    margin     : 0 0 $base-blockquote-margin-vertical 0;
    font-size  : $base-blockquote-font-size;
    line-height: $base-blockquote-line-height;
    font-style : $base-blockquote-font-style;

    @if(mixin-exists(hook-base-blockquote)) {
        @include hook-base-blockquote();
    }
}

/* Add margin if adjacent element */
*+blockquote {
    margin-top: $base-blockquote-margin-vertical;
}

/*
 * Content
 */

blockquote p:last-of-type {
    margin-bottom: 0;
}

blockquote footer {
    margin-top : $base-blockquote-footer-margin-top;
    font-size  : $base-blockquote-footer-font-size;
    line-height: $base-blockquote-footer-line-height;

    @if(mixin-exists(hook-base-blockquote-footer)) {
        @include hook-base-blockquote-footer();
    }
}


/* Preformatted text
 ========================================================================== */

/*
 * 1. Contain overflow in all browsers.
 */

pre {
    font         : $base-pre-font-size unquote("/") $base-pre-line-height $base-pre-font-family;
    color        : $base-pre-color;
    -moz-tab-size: 4;
    tab-size     : 4;
    /* 1 */
    overflow     : auto;

    @if(mixin-exists(hook-base-pre)) {
        @include hook-base-pre();
    }
}

pre code {
    font-family: $base-pre-font-family;
}


/* Selection pseudo-element
 ========================================================================== */

::selection {
    background : $base-selection-background;
    color      : $base-selection-color;
    text-shadow: none;
}


/* HTML5 elements
 ========================================================================== */

/*
 * 1. Add the correct display in Edge, IE 10+, and Firefox.
 * 2. Add the correct display in IE.
 */

details,
/* 1 */
main {
    /* 2 */
    display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
    display: list-item;
}

/*
 * Add the correct display in IE.
 */

template {
    display: none;
}


/* Pass media breakpoints to JS
 ========================================================================== */

/*
 * Breakpoints
 */

.x-breakpoint-s::before {
    content: '#{$breakpoint-small}';
}

.x-breakpoint-m::before {
    content: '#{$breakpoint-medium}';
}

.x-breakpoint-l::before {
    content: '#{$breakpoint-large}';
}

.x-breakpoint-xl::before {
    content: '#{$breakpoint-xlarge}';
}

:root {
    --x-breakpoint-s : #{$breakpoint-small};
    --x-breakpoint-m : #{$breakpoint-medium};
    --x-breakpoint-l : #{$breakpoint-large};
    --x-breakpoint-xl: #{$breakpoint-xlarge};
}

// Hooks
// ========================================================================

@if(mixin-exists(hook-base-misc)) {
    @include hook-base-misc();
}

// @mixin hook-base-body(){}
// @mixin hook-base-link(){}
// @mixin hook-base-link-hover(){}
// @mixin hook-base-code(){}
// @mixin hook-base-heading(){}
// @mixin hook-base-h1(){}
// @mixin hook-base-h2(){}
// @mixin hook-base-h3(){}
// @mixin hook-base-h4(){}
// @mixin hook-base-h5(){}
// @mixin hook-base-h6(){}
// @mixin hook-base-hr(){}
// @mixin hook-base-blockquote(){}
// @mixin hook-base-blockquote-footer(){}
// @mixin hook-base-pre(){}
// @mixin hook-base-misc(){}


// Inverse
// ========================================================================

$inverse-base-color           : $inverse-global-color !default;
$inverse-base-link-color      : $inverse-global-emphasis-color !default;
$inverse-base-link-hover-color: $inverse-global-emphasis-color !default;
$inverse-base-code-color      : $inverse-global-color !default;
$inverse-base-em-color        : $inverse-global-emphasis-color !default;
$inverse-base-heading-color   : $inverse-global-emphasis-color !default;
$inverse-base-hr-border       : $inverse-global-border !default;



// @mixin hook-inverse-base-link(){}
// @mixin hook-inverse-base-link-hover(){}
// @mixin hook-inverse-base-code(){}
// @mixin hook-inverse-base-heading(){}
// @mixin hook-inverse-base-h1(){}
// @mixin hook-inverse-base-h2(){}
// @mixin hook-inverse-base-h3(){}
// @mixin hook-inverse-base-h4(){}
// @mixin hook-inverse-base-h5(){}
// @mixin hook-inverse-base-h6(){}
// @mixin hook-inverse-base-blockquote(){}
// @mixin hook-inverse-base-blockquote-footer(){}
// @mixin hook-inverse-base-hr(){}


//
// Component: Base
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$base-code-padding-horizontal:                   6px !default;
$base-code-padding-vertical:                     2px !default;
$base-code-background:                           $global-muted-background !default;

$base-blockquote-color:                          $global-emphasis-color !default;

$base-blockquote-footer-color:                   $global-color !default;

$base-pre-padding:                               10px !default;
$base-pre-background:                            $global-background !default;
$base-pre-border-width:                          $global-border-width !default;
$base-pre-border:                                $global-border !default;
$base-pre-border-radius:                         3px !default;


// Body
// ========================================================================

// @mixin hook-base-body(){}


// Links
// ========================================================================

// @mixin hook-base-link(){}

// @mixin hook-base-link-hover(){}


// Text-level semantics
// ========================================================================




// Headings
// ========================================================================

// @mixin hook-base-heading(){}

// @mixin hook-base-h1(){}

// @mixin hook-base-h2(){}

// @mixin hook-base-h3(){}

// @mixin hook-base-h4(){}

// @mixin hook-base-h5(){}

// @mixin hook-base-h6(){}


// Horizontal rules
// ========================================================================

// @mixin hook-base-hr(){}


// Blockquotes
// ========================================================================






// Preformatted text
// ========================================================================




// Miscellaneous
// ========================================================================

// @mixin hook-base-misc(){}


// Inverse
// ========================================================================

$inverse-base-blockquote-color:                 $inverse-global-emphasis-color !default;
$inverse-base-blockquote-footer-color:          $inverse-global-color !default;

// @mixin hook-inverse-base-link(){}
// @mixin hook-inverse-base-link-hover(){}



// @mixin hook-inverse-base-heading(){}

// @mixin hook-inverse-base-h1(){}
// @mixin hook-inverse-base-h2(){}
// @mixin hook-inverse-base-h3(){}
// @mixin hook-inverse-base-h4(){}
// @mixin hook-inverse-base-h5(){}
// @mixin hook-inverse-base-h6(){}




// @mixin hook-inverse-base-hr(){}
// Name:            Breadcrumb
// Description:     Component to create a breadcrumb navigation
//
// Component:       `x-breadcrumb`
//
// States:          `x-disabled`
//
// ========================================================================


// Variables
// ========================================================================

$breadcrumb-item-font-size            : $global-small-font-size !default;
$breadcrumb-item-color                : $global-muted-color !default;
$breadcrumb-item-hover-color          : $global-color !default;
$breadcrumb-item-hover-text-decoration: none !default;
$breadcrumb-item-active-color         : $global-color !default;

$breadcrumb-divider                  : "/" !default;
$breadcrumb-divider-margin-horizontal: 20px !default;
$breadcrumb-divider-font-size        : $breadcrumb-item-font-size !default;
$breadcrumb-divider-color            : $global-muted-color !default;


/* ========================================================================
   Component: Breadcrumb
 ========================================================================== */

/*
 * Reset list
 */

.x-breadcrumb {
    padding   : 0;
    list-style: none;

    @if(mixin-exists(hook-breadcrumb)) {
        @include hook-breadcrumb();
    }
}

/*
 * 1. Doesn't generate any box and replaced by child boxes
 */

.x-breadcrumb>* {
    display: contents;
}


/* Items
 ========================================================================== */

.x-breadcrumb>*>* {
    font-size: $breadcrumb-item-font-size;
    color    : $breadcrumb-item-color;

    @if(mixin-exists(hook-breadcrumb-item)) {
        @include hook-breadcrumb-item();
    }
}

/* Hover + Focus */
.x-breadcrumb>*> :hover,
.x-breadcrumb>*> :focus {
    color          : $breadcrumb-item-hover-color;
    text-decoration: $breadcrumb-item-hover-text-decoration;

    @if(mixin-exists(hook-breadcrumb-item-hover)) {
        @include hook-breadcrumb-item-hover();
    }
}

/* Disabled */
.x-breadcrumb>.x-disabled>* {
    @if(mixin-exists(hook-breadcrumb-item-disabled)) {
        @include hook-breadcrumb-item-disabled();
    }
}

/* Active */
.x-breadcrumb> :last-child>span,
.x-breadcrumb> :last-child>a:not([href]) {
    color: $breadcrumb-item-active-color;

    @if(mixin-exists(hook-breadcrumb-item-active)) {
        @include hook-breadcrumb-item-active();
    }
}

/*
 * Divider
 * `nth-child` makes it also work without JS if it's only one row
 * 1. Remove space between inline block elements.
 * 2. Style
 */

.x-breadcrumb> :nth-child(n+2):not(.x-first-column)::before {
    content  : $breadcrumb-divider;
    display  : inline-block;
    /* 1 */
    margin   : 0 $breadcrumb-divider-margin-horizontal 0 unquote('calc(#{$breadcrumb-divider-margin-horizontal} - 4px)');
    /* 2 */
    font-size: $breadcrumb-divider-font-size;
    color    : $breadcrumb-divider-color;

    @if(mixin-exists(hook-breadcrumb-divider)) {
        @include hook-breadcrumb-divider();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-breadcrumb-misc)) {
    @include hook-breadcrumb-misc();
}

// @mixin hook-breadcrumb(){}
// @mixin hook-breadcrumb-item(){}
// @mixin hook-breadcrumb-item-hover(){}
// @mixin hook-breadcrumb-item-disabled(){}
// @mixin hook-breadcrumb-item-active(){}
// @mixin hook-breadcrumb-divider(){}
// @mixin hook-breadcrumb-misc(){}


// Inverse
// ========================================================================

$inverse-breadcrumb-item-color       : $inverse-global-muted-color !default;
$inverse-breadcrumb-item-hover-color : $inverse-global-color !default;
$inverse-breadcrumb-item-active-color: $inverse-global-color !default;
$inverse-breadcrumb-divider-color    : $inverse-global-muted-color !default;



// @mixin hook-inverse-breadcrumb-item(){}
// @mixin hook-inverse-breadcrumb-item-hover(){}
// @mixin hook-inverse-breadcrumb-item-disabled(){}
// @mixin hook-inverse-breadcrumb-item-active(){}
// @mixin hook-inverse-breadcrumb-divider(){}

//
// Component: Breadcrumb
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-breadcrumb(){}


// Items
// ========================================================================

// @mixin hook-breadcrumb-item(){}

// @mixin hook-breadcrumb-item-hover(){}

// @mixin hook-breadcrumb-item-disabled(){}

// @mixin hook-breadcrumb-item-active(){}

// @mixin hook-breadcrumb-divider(){}


// Miscellaneous
// ========================================================================

// @mixin hook-breadcrumb-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-breadcrumb-item(){}
// @mixin hook-inverse-breadcrumb-item-hover(){}
// @mixin hook-inverse-breadcrumb-item-disabled(){}
// @mixin hook-inverse-breadcrumb-item-active(){}

// @mixin hook-inverse-breadcrumb-divider(){}
// Name:            Button
// Description:     Styles for buttons
//
// Component:       `x-button`
//
// Sub-objects:     `x-button-group`
//
// Modifiers:       `x-button-default`
//                  `x-button-primary`
//                  `x-button-secondary`
//                  `x-button-danger`
//                  `x-button-text`
//                  `x-button-link`
//                  `x-button-small`
//                  `x-button-large`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$button-line-height      : $global-control-height !default;
$button-small-line-height: $global-control-small-height !default;
$button-large-line-height: $global-control-large-height !default;

$button-font-size      : $global-font-size !default;
$button-small-font-size: $global-small-font-size !default;
$button-large-font-size: $global-medium-font-size !default;

$button-padding-horizontal      : $global-gutter !default;
$button-small-padding-horizontal: $global-small-gutter !default;
$button-large-padding-horizontal: $global-medium-gutter !default;

$button-default-background       : $global-muted-background !default;
$button-default-color            : $global-emphasis-color !default;
$button-default-hover-background : darken($button-default-background, 5%) !default;
$button-default-hover-color      : $global-emphasis-color !default;
$button-default-active-background: darken($button-default-background, 10%) !default;
$button-default-active-color     : $global-emphasis-color !default;

$button-primary-background       : $global-primary-background !default;
$button-primary-color            : $global-inverse-color !default;
$button-primary-hover-background : darken($button-primary-background, 5%) !default;
$button-primary-hover-color      : $global-inverse-color !default;
$button-primary-active-background: darken($button-primary-background, 10%) !default;
$button-primary-active-color     : $global-inverse-color !default;

$button-secondary-background       : $global-secondary-background !default;
$button-secondary-color            : $global-inverse-color !default;
$button-secondary-hover-background : darken($button-secondary-background, 5%) !default;
$button-secondary-hover-color      : $global-inverse-color !default;
$button-secondary-active-background: darken($button-secondary-background, 10%) !default;
$button-secondary-active-color     : $global-inverse-color !default;

$button-danger-background       : $global-danger-background !default;
$button-danger-color            : $global-inverse-color !default;
$button-danger-hover-background : darken($button-danger-background, 5%) !default;
$button-danger-hover-color      : $global-inverse-color !default;
$button-danger-active-background: darken($button-danger-background, 10%) !default;
$button-danger-active-color     : $global-inverse-color !default;

$button-disabled-background: $global-muted-background !default;
$button-disabled-color     : $global-muted-color !default;

$button-text-line-height   : $global-line-height !default;
$button-text-color         : $global-muted-color !default;
$button-text-hover-color   : $global-color !default;
$button-text-disabled-color: $global-muted-color !default;

$button-link-line-height          : $global-line-height !default;
$button-link-color                : $global-link-color !default;
$button-link-hover-color          : $global-link-hover-color !default;
$button-link-hover-text-decoration: underline !default;
$button-link-disabled-color       : $global-muted-color !default;


/* ========================================================================
   Component: Button
 ========================================================================== */

/*
 * 1. Remove margins in Chrome, Safari and Opera.
 * 2. Remove borders for `button`.
 * 3. Address `overflow` set to `hidden` in IE.
 * 4. Correct `font` properties and `color` not being inherited for `button`.
 * 5. Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 6. Remove default style for `input type="submit"`in iOS.
 * 7. Style
 * 8. `line-height` is used to create a height because it also centers the text vertically for `a` elements.
 *    Better would be to use height and flexbox to center the text vertically but flexbox doesn't work in Firefox on `button` elements.
 * 9. Align text if button has a width
 * 10. Required for `a`.
 */

.x-button {
    /* 1 */
    margin            : 0;
    /* 2 */
    border            : none;
    /* 3 */
    overflow          : visible;
    /* 4 */
    font              : inherit;
    color             : inherit;
    /* 5 */
    text-transform    : none;
    /* 6 */
    -webkit-appearance: none;
    border-radius     : 0;
    /* 7 */
    display           : inline-block;
    box-sizing        : border-box;
    padding           : 0 $button-padding-horizontal;
    vertical-align    : middle;
    font-size         : $button-font-size;
    /* 8 */
    line-height       : $button-line-height;
    /* 9 */
    text-align        : center;
    /* 10 */
    text-decoration   : none;

    @if(mixin-exists(hook-button)) {
        @include hook-button();
    }
}

.x-button:not(:disabled) {
    cursor: pointer;
}

/*
 * Remove the inner border and padding in Firefox.
 */

.x-button::-moz-focus-inner {
    border : 0;
    padding: 0;
}

/* Hover */
.x-button:hover {
    /* 9 */
    text-decoration: none;

    @if(mixin-exists(hook-button-hover)) {
        @include hook-button-hover();
    }
}

/* Focus */
.x-button:focus {
    outline: none;

    @if(mixin-exists(hook-button-focus)) {
        @include hook-button-focus();
    }
}

/* OnClick + Active */
.x-button:active,
.x-button.x-active {
    @if(mixin-exists(hook-button-active)) {
        @include hook-button-active();
    }
}


/* Style modifiers
 ========================================================================== */

/*
 * Default
 */

.x-button-default {
    background-color: $button-default-background;
    color           : $button-default-color;

    @if(mixin-exists(hook-button-default)) {
        @include hook-button-default();
    }
}

/* Hover + Focus */
.x-button-default:hover,
.x-button-default:focus {
    background-color: $button-default-hover-background;
    color           : $button-default-hover-color;

    @if(mixin-exists(hook-button-default-hover)) {
        @include hook-button-default-hover();
    }
}

/* OnClick + Active */
.x-button-default:active,
.x-button-default.x-active {
    background-color: $button-default-active-background;
    color           : $button-default-active-color;

    @if(mixin-exists(hook-button-default-active)) {
        @include hook-button-default-active();
    }
}

/*
 * Primary
 */

.x-button-primary {
    background-color: $button-primary-background;
    color           : $button-primary-color;

    @if(mixin-exists(hook-button-primary)) {
        @include hook-button-primary();
    }
}

/* Hover + Focus */
.x-button-primary:hover,
.x-button-primary:focus {
    background-color: $button-primary-hover-background;
    color           : $button-primary-hover-color;

    @if(mixin-exists(hook-button-primary-hover)) {
        @include hook-button-primary-hover();
    }
}

/* OnClick + Active */
.x-button-primary:active,
.x-button-primary.x-active {
    background-color: $button-primary-active-background;
    color           : $button-primary-active-color;

    @if(mixin-exists(hook-button-primary-active)) {
        @include hook-button-primary-active();
    }
}

/*
 * Secondary
 */

.x-button-secondary {
    background-color: $button-secondary-background;
    color           : $button-secondary-color;

    @if(mixin-exists(hook-button-secondary)) {
        @include hook-button-secondary();
    }
}

/* Hover + Focus */
.x-button-secondary:hover,
.x-button-secondary:focus {
    background-color: $button-secondary-hover-background;
    color           : $button-secondary-hover-color;

    @if(mixin-exists(hook-button-secondary-hover)) {
        @include hook-button-secondary-hover();
    }
}

/* OnClick + Active */
.x-button-secondary:active,
.x-button-secondary.x-active {
    background-color: $button-secondary-active-background;
    color           : $button-secondary-active-color;

    @if(mixin-exists(hook-button-secondary-active)) {
        @include hook-button-secondary-active();
    }
}

/*
 * Danger
 */

.x-button-danger {
    background-color: $button-danger-background;
    color           : $button-danger-color;

    @if(mixin-exists(hook-button-danger)) {
        @include hook-button-danger();
    }
}

/* Hover + Focus */
.x-button-danger:hover,
.x-button-danger:focus {
    background-color: $button-danger-hover-background;
    color           : $button-danger-hover-color;

    @if(mixin-exists(hook-button-danger-hover)) {
        @include hook-button-danger-hover();
    }
}

/* OnClick + Active */
.x-button-danger:active,
.x-button-danger.x-active {
    background-color: $button-danger-active-background;
    color           : $button-danger-active-color;

    @if(mixin-exists(hook-button-danger-active)) {
        @include hook-button-danger-active();
    }
}

/*
 * Disabled
 * The same for all style modifiers
 */

.x-button-default:disabled,
.x-button-primary:disabled,
.x-button-secondary:disabled,
.x-button-danger:disabled {
    background-color: $button-disabled-background;
    color           : $button-disabled-color;

    @if(mixin-exists(hook-button-disabled)) {
        @include hook-button-disabled();
    }
}


/* Size modifiers
 ========================================================================== */

.x-button-small {
    padding    : 0 $button-small-padding-horizontal;
    line-height: $button-small-line-height;
    font-size  : $button-small-font-size;

    @if(mixin-exists(hook-button-small)) {
        @include hook-button-small();
    }
}

.x-button-large {
    padding    : 0 $button-large-padding-horizontal;
    line-height: $button-large-line-height;
    font-size  : $button-large-font-size;

    @if(mixin-exists(hook-button-large)) {
        @include hook-button-large();
    }
}


/* Text modifiers
 ========================================================================== */

/*
 * Text
 * 1. Reset
 * 2. Style
 */

.x-button-text {
    /* 1 */
    padding    : 0;
    line-height: $button-text-line-height;
    background : none;
    /* 2 */
    color      : $button-text-color;

    @if(mixin-exists(hook-button-text)) {
        @include hook-button-text();
    }
}

/* Hover + Focus */
.x-button-text:hover,
.x-button-text:focus {
    color: $button-text-hover-color;

    @if(mixin-exists(hook-button-text-hover)) {
        @include hook-button-text-hover();
    }
}

/* Disabled */
.x-button-text:disabled {
    color: $button-text-disabled-color;

    @if(mixin-exists(hook-button-text-disabled)) {
        @include hook-button-text-disabled();
    }
}

/*
 * Link
 * 1. Reset
 * 2. Style
 */

.x-button-link {
    /* 1 */
    padding    : 0;
    line-height: $button-link-line-height;
    background : none;
    /* 2 */
    color      : $button-link-color;

    @if(mixin-exists(hook-button-link)) {
        @include hook-button-link();
    }
}

/* Hover + Focus */
.x-button-link:hover,
.x-button-link:focus {
    color          : $button-link-hover-color;
    text-decoration: $button-link-hover-text-decoration;
}

/* Disabled */
.x-button-link:disabled {
    color          : $button-link-disabled-color;
    text-decoration: none;
}


/* Group
 ========================================================================== */

/*
 * 1. Using `flex` instead of `inline-block` to prevent whitespace betweent child elements
 * 2. Behave like button
 * 3. Create position context
 */

.x-button-group {
    /* 1 */
    display       : inline-flex;
    /* 2 */
    vertical-align: middle;
    /* 3 */
    position      : relative;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-button-misc)) {
    @include hook-button-misc();
}

// @mixin hook-button(){}
// @mixin hook-button-hover(){}
// @mixin hook-button-focus(){}
// @mixin hook-button-active(){}
// @mixin hook-button-default(){}
// @mixin hook-button-default-hover(){}
// @mixin hook-button-default-active(){}
// @mixin hook-button-primary(){}
// @mixin hook-button-primary-hover(){}
// @mixin hook-button-primary-active(){}
// @mixin hook-button-secondary(){}
// @mixin hook-button-secondary-hover(){}
// @mixin hook-button-secondary-active(){}
// @mixin hook-button-danger(){}
// @mixin hook-button-danger-hover(){}
// @mixin hook-button-danger-active(){}
// @mixin hook-button-disabled(){}
// @mixin hook-button-small(){}
// @mixin hook-button-large(){}
// @mixin hook-button-text(){}
// @mixin hook-button-text-hover(){}
// @mixin hook-button-text-disabled(){}
// @mixin hook-button-link(){}
// @mixin hook-button-misc(){}


// Inverse
// ========================================================================

$inverse-button-default-background         : $inverse-global-primary-background !default;
$inverse-button-default-color              : $inverse-global-inverse-color !default;
$inverse-button-default-hover-background   : darken($inverse-button-default-background, 5%) !default;
$inverse-button-default-hover-color        : $inverse-global-inverse-color !default;
$inverse-button-default-active-background  : darken($inverse-button-default-background, 10%) !default;
$inverse-button-default-active-color       : $inverse-global-inverse-color !default;
$inverse-button-primary-background         : $inverse-global-primary-background !default;
$inverse-button-primary-color              : $inverse-global-inverse-color !default;
$inverse-button-primary-hover-background   : darken($inverse-button-primary-background, 5%) !default;
$inverse-button-primary-hover-color        : $inverse-global-inverse-color !default;
$inverse-button-primary-active-background  : darken($inverse-button-primary-background, 10%) !default;
$inverse-button-primary-active-color       : $inverse-global-inverse-color !default;
$inverse-button-secondary-background       : $inverse-global-primary-background !default;
$inverse-button-secondary-color            : $inverse-global-inverse-color !default;
$inverse-button-secondary-hover-background : darken($inverse-button-secondary-background, 5%) !default;
$inverse-button-secondary-hover-color      : $inverse-global-inverse-color !default;
$inverse-button-secondary-active-background: darken($inverse-button-secondary-background, 10%) !default;
$inverse-button-secondary-active-color     : $inverse-global-inverse-color !default;
$inverse-button-text-color                 : $inverse-global-muted-color !default;
$inverse-button-text-hover-color           : $inverse-global-color !default;
$inverse-button-text-disabled-color        : $inverse-global-muted-color !default;
$inverse-button-link-color                 : $inverse-global-muted-color !default;
$inverse-button-link-hover-color           : $inverse-global-color !default;



// @mixin hook-inverse-button-default(){}
// @mixin hook-inverse-button-default-hover(){}
// @mixin hook-inverse-button-default-active(){}
// @mixin hook-inverse-button-primary(){}
// @mixin hook-inverse-button-primary-hover(){}
// @mixin hook-inverse-button-primary-active(){}
// @mixin hook-inverse-button-secondary(){}
// @mixin hook-inverse-button-secondary-hover(){}
// @mixin hook-inverse-button-secondary-active(){}
// @mixin hook-inverse-button-text(){}
// @mixin hook-inverse-button-text-hover(){}
// @mixin hook-inverse-button-text-disabled(){}
// @mixin hook-inverse-button-link(){}

//
// Component: Button
//
// ========================================================================


// Variables
// ========================================================================

$button-line-height:                             $global-control-height - ($button-border-width * 2) !default;
$button-small-line-height:                       $global-control-small-height - ($button-border-width * 2) !default;
$button-large-line-height:                       $global-control-large-height - ($button-border-width * 2) !default;

$button-font-size:                               $global-small-font-size !default;
$button-large-font-size:                         $global-small-font-size !default;

$button-default-background:                      transparent !default;
$button-default-hover-background:                transparent !default;
$button-default-active-background:               transparent !default;

$button-disabled-background:                     transparent !default;

$button-text-color:                              $global-emphasis-color !default;
$button-text-hover-color:                        $global-emphasis-color !default;

//
// New
//

$button-text-transform:                          uppercase !default;

$button-border-width:                            $global-border-width !default;

$button-default-border:                          $global-border !default;
$button-default-hover-border:                    darken($global-border, 20%) !default;
$button-default-active-border:                   darken($global-border, 30%) !default;

$button-disabled-border:                         $global-border !default;

$button-text-border-width:                       $global-border-width !default;
$button-text-border:                             $button-text-hover-color !default;


// Component
// ========================================================================



// @mixin hook-button-hover(){}

// @mixin hook-button-focus(){}

// @mixin hook-button-active(){}


// Style modifiers
// ========================================================================







//
// Primary
//



// @mixin hook-button-primary-hover(){}

// @mixin hook-button-primary-active(){}

//
// Secondary
//



// @mixin hook-button-secondary-hover(){}

// @mixin hook-button-secondary-active(){}

//
// Danger
//



// @mixin hook-button-danger-hover(){}

// @mixin hook-button-danger-active(){}


// Disabled
// ========================================================================




// Size modifiers
// ========================================================================

// @mixin hook-button-small(){}

// @mixin hook-button-large(){}


// Text modifier
// ========================================================================








// Link modifier
// ========================================================================

// @mixin hook-button-link(){}


// Miscellaneous
// ========================================================================




// Inverse
// ========================================================================

$inverse-button-default-background:             transparent !default;
$inverse-button-default-color:                  $inverse-global-emphasis-color !default;
$inverse-button-default-hover-background:       transparent !default;
$inverse-button-default-hover-color:            $inverse-global-emphasis-color !default;
$inverse-button-default-active-background:      transparent !default;
$inverse-button-default-active-color:           $inverse-global-emphasis-color !default;

$inverse-button-text-color:                     $inverse-global-emphasis-color !default;
$inverse-button-text-hover-color:               $inverse-global-emphasis-color !default;





// @mixin hook-inverse-button-primary(){}
// @mixin hook-inverse-button-primary-hover(){}
// @mixin hook-inverse-button-primary-active(){}

// @mixin hook-inverse-button-secondary(){}
// @mixin hook-inverse-button-secondary-hover(){}
// @mixin hook-inverse-button-secondary-active(){}


// @mixin hook-inverse-button-text-hover(){}
// @mixin hook-inverse-button-text-disabled(){}

// @mixin hook-inverse-button-link(){}
// Name:            Card
// Description:     Component to create boxed content containers
//
// Component:       `x-card`
//
// Sub-objects:     `x-card-body`
//                  `x-card-header`
//                  `x-card-footer`
//                  `x-card-media-*`
//                  `x-card-title`
//                  `x-card-badge`
//
// Modifiers:       `x-card-hover`
//                  `x-card-default`
//                  `x-card-primary`
//                  `x-card-secondary`
//                  `x-card-small`
//                  `x-card-large`
//
// Uses:            `x-grid-stack`
//
// ========================================================================


// Variables
// ========================================================================

$card-body-padding-horizontal: $global-gutter !default;
$card-body-padding-vertical  : $global-gutter !default;

$card-body-padding-horizontal-l: $global-medium-gutter !default;
$card-body-padding-vertical-l  : $global-medium-gutter !default;

$card-header-padding-horizontal: $global-gutter !default;
$card-header-padding-vertical  : round($global-gutter / 2) !default;

$card-header-padding-horizontal-l: $global-medium-gutter !default;
$card-header-padding-vertical-l  : round($global-medium-gutter / 2) !default;

$card-footer-padding-horizontal: $global-gutter !default;
$card-footer-padding-vertical  : ($global-gutter / 2) !default;

$card-footer-padding-horizontal-l: $global-medium-gutter !default;
$card-footer-padding-vertical-l  : round($global-medium-gutter / 2) !default;

$card-title-font-size  : $global-large-font-size !default;
$card-title-line-height: 1.4 !default;

$card-badge-top  : $global-gutter !default;
$card-badge-right: $card-badge-top !default;

$card-hover-background: $global-muted-background !default;

$card-default-background      : $global-muted-background !default;
$card-default-color           : $global-color !default;
$card-default-title-color     : $global-emphasis-color !default;
$card-default-hover-background: darken($card-default-background, 5%) !default;

$card-primary-background      : $global-primary-background !default;
$card-primary-color           : $global-inverse-color !default;
$card-primary-title-color     : $card-primary-color !default;
$card-primary-hover-background: darken($card-primary-background, 5%) !default;
$card-primary-color-mode      : light !default;

$card-secondary-background      : $global-secondary-background !default;
$card-secondary-color           : $global-inverse-color !default;
$card-secondary-title-color     : $card-secondary-color !default;
$card-secondary-hover-background: darken($card-secondary-background, 5%) !default;
$card-secondary-color-mode      : light !default;

$card-small-body-padding-horizontal  : $global-margin !default;
$card-small-body-padding-vertical    : $global-margin !default;
$card-small-header-padding-horizontal: $global-margin !default;
$card-small-header-padding-vertical  : round($global-margin / 1.5) !default;
$card-small-footer-padding-horizontal: $global-margin !default;
$card-small-footer-padding-vertical  : round($global-margin / 1.5) !default;

$card-large-body-padding-horizontal-l  : $global-large-gutter !default;
$card-large-body-padding-vertical-l    : $global-large-gutter !default;
$card-large-header-padding-horizontal-l: $global-large-gutter !default;
$card-large-header-padding-vertical-l  : round($global-large-gutter / 2) !default;
$card-large-footer-padding-horizontal-l: $global-large-gutter !default;
$card-large-footer-padding-vertical-l  : round($global-large-gutter / 2) !default;


/* ========================================================================
   Component: Card
 ========================================================================== */

.x-card {
    position  : relative;
    box-sizing: border-box;

    @if(mixin-exists(hook-card)) {
        @include hook-card();
    }
}


/* Sections
 ========================================================================== */

.x-card-body {
    display: flow-root;
    padding: $card-body-padding-vertical $card-body-padding-horizontal;

    @if(mixin-exists(hook-card-body)) {
        @include hook-card-body();
    }
}

.x-card-header {
    display: flow-root;
    padding: $card-header-padding-vertical $card-header-padding-horizontal;

    @if(mixin-exists(hook-card-header)) {
        @include hook-card-header();
    }
}

.x-card-footer {
    display: flow-root;
    padding: $card-footer-padding-vertical $card-footer-padding-horizontal;

    @if(mixin-exists(hook-card-footer)) {
        @include hook-card-footer();
    }
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-card-body {
        padding: $card-body-padding-vertical-l $card-body-padding-horizontal-l;
    }

    .x-card-header {
        padding: $card-header-padding-vertical-l $card-header-padding-horizontal-l;
    }

    .x-card-footer {
        padding: $card-footer-padding-vertical-l $card-footer-padding-horizontal-l;
    }

}

/*
 * Remove margin from the last-child
 */

.x-card-body> :last-child,
.x-card-header> :last-child,
.x-card-footer> :last-child {
    margin-bottom: 0;
}


/* Media
 ========================================================================== */

/*
 * Reserved alignment modifier to style the media element, e.g. with `border-radius`
 * Implemented by the theme
 */

[class*='x-card-media'] {
    @if(mixin-exists(hook-card-media)) {
        @include hook-card-media();
    }
}

.x-card-media-top,
.x-grid-stack>.x-card-media-left,
.x-grid-stack>.x-card-media-right {
    @if(mixin-exists(hook-card-media-top)) {
        @include hook-card-media-top();
    }
}

.x-card-media-bottom {
    @if(mixin-exists(hook-card-media-bottom)) {
        @include hook-card-media-bottom();
    }
}

:not(.x-grid-stack)>.x-card-media-left {
    @if(mixin-exists(hook-card-media-left)) {
        @include hook-card-media-left();
    }
}

:not(.x-grid-stack)>.x-card-media-right {
    @if(mixin-exists(hook-card-media-right)) {
        @include hook-card-media-right();
    }
}


/* Title
 ========================================================================== */

.x-card-title {
    font-size  : $card-title-font-size;
    line-height: $card-title-line-height;

    @if(mixin-exists(hook-card-title)) {
        @include hook-card-title();
    }
}


/* Badge
 ========================================================================== */

.x-card-badge {
    position: absolute;
    top     : $card-badge-top;
    right   : $card-badge-right;
    z-index : 1;

    @if(mixin-exists(hook-card-badge)) {
        @include hook-card-badge();
    }
}

/*
 * Remove margin from adjacent element
 */

.x-card-badge:first-child+* {
    margin-top: 0;
}


/* Hover modifier
 ========================================================================== */

.x-card-hover:not(.x-card-default):not(.x-card-primary):not(.x-card-secondary):hover {
    background: $card-hover-background;

    @if(mixin-exists(hook-card-hover)) {
        @include hook-card-hover();
    }
}


/* Style modifiers
 ========================================================================== */

/*
 * Default
 * Note: Header and Footer are only implemented for the default style
 */

.x-card-default {
    background: $card-default-background;
    color     : $card-default-color;

    @if(mixin-exists(hook-card-default)) {
        @include hook-card-default();
    }
}

.x-card-default .x-card-title {
    color: $card-default-title-color;

    @if(mixin-exists(hook-card-default-title)) {
        @include hook-card-default-title();
    }
}

.x-card-default.x-card-hover:hover {
    background-color: $card-default-hover-background;

    @if(mixin-exists(hook-card-default-hover)) {
        @include hook-card-default-hover();
    }
}

.x-card-default .x-card-header {
    @if(mixin-exists(hook-card-default-header)) {
        @include hook-card-default-header();
    }
}

.x-card-default .x-card-footer {
    @if(mixin-exists(hook-card-default-footer)) {
        @include hook-card-default-footer();
    }
}

/*
 * Primary
 */

.x-card-primary {
    background: $card-primary-background;
    color     : $card-primary-color;

    @if(mixin-exists(hook-card-primary)) {
        @include hook-card-primary();
    }
}

.x-card-primary .x-card-title {
    color: $card-primary-title-color;

    @if(mixin-exists(hook-card-primary-title)) {
        @include hook-card-primary-title();
    }
}

.x-card-primary.x-card-hover:hover {
    background-color: $card-primary-hover-background;

    @if(mixin-exists(hook-card-primary-hover)) {
        @include hook-card-primary-hover();
    }
}

// Color Mode
@if ($card-primary-color-mode==light) {
    .x-card-primary.x-card-body {
        @extend .x-light !optional;
    }
}

@if ($card-primary-color-mode==light) {
    .x-card-primary> :not([class*='x-card-media']) {
        @extend .x-light !optional;
    }
}

@if ($card-primary-color-mode==dark) {
    .x-card-primary.x-card-body {
        @extend .x-dark !optional;
    }
}

@if ($card-primary-color-mode==dark) {
    .x-card-primary> :not([class*='x-card-media']) {
        @extend .x-dark !optional;
    }
}

/*
 * Secondary
 */

.x-card-secondary {
    background: $card-secondary-background;
    color     : $card-secondary-color;

    @if(mixin-exists(hook-card-secondary)) {
        @include hook-card-secondary();
    }
}

.x-card-secondary .x-card-title {
    color: $card-secondary-title-color;

    @if(mixin-exists(hook-card-secondary-title)) {
        @include hook-card-secondary-title();
    }
}

.x-card-secondary.x-card-hover:hover {
    background-color: $card-secondary-hover-background;

    @if(mixin-exists(hook-card-secondary-hover)) {
        @include hook-card-secondary-hover();
    }
}

// Color Mode
@if ($card-secondary-color-mode==light) {
    .x-card-secondary.x-card-body {
        @extend .x-light !optional;
    }
}

@if ($card-secondary-color-mode==light) {
    .x-card-secondary> :not([class*='x-card-media']) {
        @extend .x-light !optional;
    }
}

@if ($card-secondary-color-mode==dark) {
    .x-card-secondary.x-card-body {
        @extend .x-dark !optional;
    }
}

@if ($card-secondary-color-mode==dark) {
    .x-card-secondary> :not([class*='x-card-media']) {
        @extend .x-dark !optional;
    }
}


/* Size modifier
 ========================================================================== */

/*
 * Small
 */

.x-card-small.x-card-body,
.x-card-small .x-card-body {
    padding: $card-small-body-padding-vertical $card-small-body-padding-horizontal;
}

.x-card-small .x-card-header {
    padding: $card-small-header-padding-vertical $card-small-header-padding-horizontal;
}

.x-card-small .x-card-footer {
    padding: $card-small-footer-padding-vertical $card-small-footer-padding-horizontal;
}

/*
 * Large
 */

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-card-large.x-card-body,
    .x-card-large .x-card-body {
        padding: $card-large-body-padding-vertical-l $card-large-body-padding-horizontal-l;
    }

    .x-card-large .x-card-header {
        padding: $card-large-header-padding-vertical-l $card-large-header-padding-horizontal-l;
    }

    .x-card-large .x-card-footer {
        padding: $card-large-footer-padding-vertical-l $card-large-footer-padding-horizontal-l;
    }

}


// Hooks
// ========================================================================

@if(mixin-exists(hook-card-misc)) {
    @include hook-card-misc();
}

// @mixin hook-card(){}
// @mixin hook-card-body(){}
// @mixin hook-card-header(){}
// @mixin hook-card-footer(){}
// @mixin hook-card-media(){}
// @mixin hook-card-media-top(){}
// @mixin hook-card-media-bottom(){}
// @mixin hook-card-media-left(){}
// @mixin hook-card-media-right(){}
// @mixin hook-card-title(){}
// @mixin hook-card-badge(){}
// @mixin hook-card-hover(){}
// @mixin hook-card-default(){}
// @mixin hook-card-default-title(){}
// @mixin hook-card-default-hover(){}
// @mixin hook-card-default-header(){}
// @mixin hook-card-default-footer(){}
// @mixin hook-card-primary(){}
// @mixin hook-card-primary-title(){}
// @mixin hook-card-primary-hover(){}
// @mixin hook-card-secondary(){}
// @mixin hook-card-secondary-title(){}
// @mixin hook-card-secondary-hover(){}
// @mixin hook-card-misc(){}

//
// Component: Card
//
// ========================================================================


// Variables
// ========================================================================

$card-hover-background:                         $global-background !default;

$card-default-background:                       $global-background !default;
$card-default-hover-background:                 $card-default-background !default;

$card-primary-hover-background:                 $card-primary-background !default;

$card-secondary-hover-background:               $card-secondary-background !default;

//
// New
//

$card-hover-box-shadow:                         $global-large-box-shadow !default;

$card-default-box-shadow:                       $global-medium-box-shadow !default;
$card-default-hover-box-shadow:                 $global-large-box-shadow !default;

$card-default-header-border-width:              $global-border-width !default;
$card-default-header-border:                    $global-border !default;

$card-default-footer-border-width:              $global-border-width !default;
$card-default-footer-border:                    $global-border !default;

$card-primary-box-shadow:                       $global-medium-box-shadow !default;
$card-primary-hover-box-shadow:                 $global-large-box-shadow !default;

$card-secondary-box-shadow:                     $global-medium-box-shadow !default;
$card-secondary-hover-box-shadow:               $global-large-box-shadow !default;


// Component
// ========================================================================




// Sections
// ========================================================================

// @mixin hook-card-body(){}

// @mixin hook-card-header(){}

// @mixin hook-card-footer(){}


// Media
// ========================================================================

// @mixin hook-card-media(){}

// @mixin hook-card-media-top(){}

// @mixin hook-card-media-bottom(){}

// @mixin hook-card-media-left(){}

// @mixin hook-card-media-right(){}


// Title
// ========================================================================

// @mixin hook-card-title(){}


// Badge
// ========================================================================

// @mixin hook-card-badge(){}


// Hover modifier
// ========================================================================




// Style modifiers
// ========================================================================



// @mixin hook-card-default-title(){}







//
// Primary
//



// @mixin hook-card-primary-title(){}



//
// Secondary
//



// @mixin hook-card-secondary-title(){}




// Miscellaneous
// ========================================================================


// Name:            Close
// Description:     Component to create a close button
//
// Component:       `x-close`
//
// ========================================================================


// Variables
// ========================================================================

$close-color      : $global-muted-color !default;
$close-hover-color: $global-color !default;


/* ========================================================================
   Component: Close
 ========================================================================== */

/*
 * Adopts `x-icon`
 */

.x-close {
    color: $close-color;

    @if(mixin-exists(hook-close)) {
        @include hook-close();
    }
}

/* Hover + Focus */
.x-close:hover,
.x-close:focus {
    color  : $close-hover-color;
    outline: none;

    @if(mixin-exists(hook-close-hover)) {
        @include hook-close-hover();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-close-misc)) {
    @include hook-close-misc();
}

// @mixin hook-close(){}
// @mixin hook-close-hover(){}
// @mixin hook-close-misc(){}


// Inverse
// ========================================================================

$inverse-close-color      : $inverse-global-muted-color !default;
$inverse-close-hover-color: $inverse-global-color !default;



// @mixin hook-inverse-close(){}
// @mixin hook-inverse-close-hover(){}

//
// Component: Close
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================



// @mixin hook-close-hover(){}


// Miscellaneous
// ========================================================================

// @mixin hook-close-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-close(){}
// @mixin hook-inverse-close-hover(){}
// Name:            Column
// Description:     Utilities for text columns
//
// Component:       `x-column-*`
//
// Sub-objects:     `x-column-span`
//
// Modifiers:       `x-column-divider`
//
// ========================================================================


// Variables
// ========================================================================

$column-gutter  : $global-gutter !default;
$column-gutter-l: $global-medium-gutter !default;

$column-divider-rule-color: $global-border !default;
$column-divider-rule-width: 1px !default;


/* ========================================================================
   Component: Column
 ========================================================================== */

[class*='x-column-'] {
    column-gap: $column-gutter;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    [class*='x-column-'] {
        column-gap: $column-gutter-l;
    }

}

/*
 * Fix image 1px line wrapping into the next column in Chrome
 */

[class*='x-column-'] img {
    transform: translate3d(0, 0, 0);
}


/* Divider
 ========================================================================== */

/*
 * 1. Double the column gap
 */

.x-column-divider {
    column-rule: $column-divider-rule-width solid $column-divider-rule-color;
    /* 1 */
    column-gap : ($column-gutter * 2);
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-column-divider {
        column-gap: ($column-gutter-l * 2);
    }

}


/* Width modifiers
 ========================================================================== */

.x-column-1-2 {
    column-count: 2;
}

.x-column-1-3 {
    column-count: 3;
}

.x-column-1-4 {
    column-count: 4;
}

.x-column-1-5 {
    column-count: 5;
}

.x-column-1-6 {
    column-count: 6;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-column-1-2\:small {
        column-count: 2;
    }

    .x-column-1-3\:small {
        column-count: 3;
    }

    .x-column-1-4\:small {
        column-count: 4;
    }

    .x-column-1-5\:small {
        column-count: 5;
    }

    .x-column-1-6\:small {
        column-count: 6;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-column-1-2\:medium {
        column-count: 2;
    }

    .x-column-1-3\:medium {
        column-count: 3;
    }

    .x-column-1-4\:medium {
        column-count: 4;
    }

    .x-column-1-5\:medium {
        column-count: 5;
    }

    .x-column-1-6\:medium {
        column-count: 6;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-column-1-2\:large {
        column-count: 2;
    }

    .x-column-1-3\:large {
        column-count: 3;
    }

    .x-column-1-4\:large {
        column-count: 4;
    }

    .x-column-1-5\:large {
        column-count: 5;
    }

    .x-column-1-6\:large {
        column-count: 6;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-column-1-2\:xlarge {
        column-count: 2;
    }

    .x-column-1-3\:xlarge {
        column-count: 3;
    }

    .x-column-1-4\:xlarge {
        column-count: 4;
    }

    .x-column-1-5\:xlarge {
        column-count: 5;
    }

    .x-column-1-6\:xlarge {
        column-count: 6;
    }

}

/* Make element span across all columns
 * Does not work in Firefox yet
 ========================================================================== */

.x-column-span {
    column-span: all;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-column-misc)) {
    @include hook-column-misc();
}

// @mixin hook-column-misc(){}


// Inverse
// ========================================================================

$inverse-column-divider-rule-color: $inverse-global-border !default;

//
// Component: Column
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-column-misc(){}
// Name:            Comment
// Description:     Component to create nested comments
//
// Component:       `x-comment`
//
// Sub-objects:     `x-comment-body`
//                  `x-comment-header`
//                  `x-comment-title`
//                  `x-comment-meta`
//                  `x-comment-avatar`
//                  `x-comment-list`
//
// Modifier:        `x-comment-primary`
//
// ========================================================================


// Variables
// ========================================================================

$comment-header-margin-bottom: $global-margin !default;

$comment-title-font-size  : $global-medium-font-size !default;
$comment-title-line-height: 1.4 !default;

$comment-meta-font-size  : $global-small-font-size !default;
$comment-meta-line-height: 1.4 !default;
$comment-meta-color      : $global-muted-color !default;

$comment-list-margin-top    : $global-large-margin !default;
$comment-list-padding-left  : 30px !default;
$comment-list-padding-left-m: 100px !default;


/* ========================================================================
   Component: Comment
 ========================================================================== */

.x-comment {
    @if(mixin-exists(hook-comment)) {
        @include hook-comment();
    }
}


/* Sections
 ========================================================================== */

.x-comment-body {
    display      : flow-root;
    overflow-wrap: break-word;
    word-wrap    : break-word;

    @if(mixin-exists(hook-comment-body)) {
        @include hook-comment-body();
    }
}

.x-comment-header {
    display      : flow-root;
    margin-bottom: $comment-header-margin-bottom;

    @if(mixin-exists(hook-comment-header)) {
        @include hook-comment-header();
    }
}

/*
 * Remove margin from the last-child
 */

.x-comment-body> :last-child,
.x-comment-header> :last-child {
    margin-bottom: 0;
}


/* Title
 ========================================================================== */

.x-comment-title {
    font-size  : $comment-title-font-size;
    line-height: $comment-title-line-height;

    @if(mixin-exists(hook-comment-title)) {
        @include hook-comment-title();
    }
}


/* Meta
 ========================================================================== */

.x-comment-meta {
    font-size  : $comment-meta-font-size;
    line-height: $comment-meta-line-height;
    color      : $comment-meta-color;

    @if(mixin-exists(hook-comment-meta)) {
        @include hook-comment-meta();
    }
}


/* Avatar
 ========================================================================== */

.x-comment-avatar {
    @if(mixin-exists(hook-comment-avatar)) {
        @include hook-comment-avatar();
    }
}


/* List
 ========================================================================== */

.x-comment-list {
    padding   : 0;
    list-style: none;
}

/* Adjacent siblings */
.x-comment-list> :nth-child(n+2) {
    margin-top: $comment-list-margin-top;

    @if(mixin-exists(hook-comment-list-adjacent)) {
        @include hook-comment-list-adjacent();
    }
}

/*
 * Sublists
 * Note: General sibling selector allows reply block between comment and sublist
 */

.x-comment-list .x-comment~ul {
    margin      : $comment-list-margin-top 0 0 0;
    padding-left: $comment-list-padding-left;
    list-style  : none;

    @if(mixin-exists(hook-comment-list-sub)) {
        @include hook-comment-list-sub();
    }
}

/* Tablet and bigger */
@media (min-width: $breakpoint-medium) {

    .x-comment-list .x-comment~ul {
        padding-left: $comment-list-padding-left-m;
    }

}

/* Adjacent siblings */
.x-comment-list .x-comment~ul> :nth-child(n+2) {
    margin-top: $comment-list-margin-top;

    @if(mixin-exists(hook-comment-list-sub-adjacent)) {
        @include hook-comment-list-sub-adjacent();
    }
}


/* Style modifier
 ========================================================================== */

.x-comment-primary {
    @if(mixin-exists(hook-comment-primary)) {
        @include hook-comment-primary();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-comment-misc)) {
    @include hook-comment-misc();
}

// @mixin hook-comment(){}
// @mixin hook-comment-body(){}
// @mixin hook-comment-header(){}
// @mixin hook-comment-title(){}
// @mixin hook-comment-meta(){}
// @mixin hook-comment-avatar(){}
// @mixin hook-comment-list-adjacent(){}
// @mixin hook-comment-list-sub(){}
// @mixin hook-comment-list-sub-adjacent(){}
// @mixin hook-comment-primary(){}
// @mixin hook-comment-misc(){}

//
// Component: Comment
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$comment-primary-padding:                        $global-gutter !default;
$comment-primary-background:                     $global-muted-background !default;


// Component
// ========================================================================

// @mixin hook-comment(){}


// Sections
// ========================================================================

// @mixin hook-comment-body(){}

// @mixin hook-comment-header(){}


// Title
// ========================================================================

// @mixin hook-comment-title(){}


// Meta
// ========================================================================

// @mixin hook-comment-meta(){}


// Avatar
// ========================================================================

// @mixin hook-comment-avatar(){}


// List
// ========================================================================

// @mixin hook-comment-list-adjacent(){}

// @mixin hook-comment-list-sub(){}

// @mixin hook-comment-list-sub-adjacent(){}


// Style modifier
// ========================================================================




// Miscellaneous
// ========================================================================

// @mixin hook-comment-misc(){}
// Name:            Container
// Description:     Component to align and center your site and grid content
//
// Component:       `x-container`
//
// Modifier:        `x-container-small`
//                  `x-container-large`
//                  `x-container-expand`
//                  `x-container-expand-left`
//                  `x-container-expand-right`
//                  `x-container-item-padding-remove-left`
//                  `x-container-item-padding-remove-right`
//
// ========================================================================


// Variables
// ========================================================================

$container-max-width       : 1200px !default;
$container-xsmall-max-width: 750px !default;
$container-small-max-width : 900px !default;
$container-large-max-width : 1400px !default;
$container-xlarge-max-width: 1600px !default;

$container-padding-horizontal  : 15px !default;
$container-padding-horizontal-s: $global-gutter !default;
$container-padding-horizontal-m: $global-medium-gutter !default;


/* ========================================================================
   Component: Container
 ========================================================================== */

/*
 * 1. Box sizing has to be `content-box` so the max-width is always the same and
 *    unaffected by the padding on different breakpoints. It's important for the size modifiers.
 */

.x-container {
    display      : flow-root;
    /* 1 */
    box-sizing   : content-box;
    max-width    : $container-max-width;
    margin-left  : auto;
    margin-right : auto;
    padding-left : $container-padding-horizontal;
    padding-right: $container-padding-horizontal;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-container {
        padding-left : $container-padding-horizontal-s;
        padding-right: $container-padding-horizontal-s;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-container {
        padding-left : $container-padding-horizontal-m;
        padding-right: $container-padding-horizontal-m;
    }

}

/*
 * Remove margin from the last-child
 */

.x-container> :last-child {
    margin-bottom: 0;
}

/*
 * Remove padding from nested containers
 */

.x-container .x-container {
    padding-left : 0;
    padding-right: 0;
}


/* Size modifier
 ========================================================================== */

.x-container-xsmall {
    max-width: $container-xsmall-max-width;
}

.x-container-small {
    max-width: $container-small-max-width;
}

.x-container-large {
    max-width: $container-large-max-width;
}

.x-container-xlarge {
    max-width: $container-xlarge-max-width;
}

.x-container-expand {
    max-width: none;
}


/* Expand modifier
 ========================================================================== */

/*
 * Expand one side only
 */

.x-container-expand-left {
    margin-left: 0;
}

.x-container-expand-right {
    margin-right: 0;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-container-expand-left.x-container-xsmall,
    .x-container-expand-right.x-container-xsmall {
        max-width: unquote('calc(50% + (#{$container-xsmall-max-width} / 2) - #{$container-padding-horizontal-s})');
    }

    .x-container-expand-left.x-container-small,
    .x-container-expand-right.x-container-small {
        max-width: unquote('calc(50% + (#{$container-small-max-width} / 2) - #{$container-padding-horizontal-s})');
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-container-expand-left,
    .x-container-expand-right {
        max-width: unquote('calc(50% + (#{$container-max-width} / 2) - #{$container-padding-horizontal-m})');
    }

    .x-container-expand-left.x-container-xsmall,
    .x-container-expand-right.x-container-xsmall {
        max-width: unquote('calc(50% + (#{$container-xsmall-max-width} / 2) - #{$container-padding-horizontal-m})');
    }

    .x-container-expand-left.x-container-small,
    .x-container-expand-right.x-container-small {
        max-width: unquote('calc(50% + (#{$container-small-max-width} / 2) - #{$container-padding-horizontal-m})');
    }

    .x-container-expand-left.x-container-large,
    .x-container-expand-right.x-container-large {
        max-width: unquote('calc(50% + (#{$container-large-max-width} / 2) - #{$container-padding-horizontal-m})');
    }

    .x-container-expand-left.x-container-xlarge,
    .x-container-expand-right.x-container-xlarge {
        max-width: unquote('calc(50% + (#{$container-xlarge-max-width} / 2) - #{$container-padding-horizontal-m})');
    }

}


/* Item
 ========================================================================== */

/*
 * Utility classes to reset container padding on the left or right side
 * Note: It has to be negative margin on the item, because it's specific to the item.
 */

.x-container-item-padding-remove-left,
.x-container-item-padding-remove-right {
    width: unquote('calc(100% + #{$container-padding-horizontal})')
}

.x-container-item-padding-remove-left {
    margin-left: (-$container-padding-horizontal);
}

.x-container-item-padding-remove-right {
    margin-right: (-$container-padding-horizontal);
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-container-item-padding-remove-left,
    .x-container-item-padding-remove-right {
        width: unquote('calc(100% + #{$container-padding-horizontal-s})')
    }

    .x-container-item-padding-remove-left {
        margin-left: (-$container-padding-horizontal-s);
    }

    .x-container-item-padding-remove-right {
        margin-right: (-$container-padding-horizontal-s);
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-container-item-padding-remove-left,
    .x-container-item-padding-remove-right {
        width: unquote('calc(100% + #{$container-padding-horizontal-m})')
    }

    .x-container-item-padding-remove-left {
        margin-left: (-$container-padding-horizontal-m);
    }

    .x-container-item-padding-remove-right {
        margin-right: (-$container-padding-horizontal-m);
    }

}


// Hooks
// ========================================================================

@if(mixin-exists(hook-container-misc)) {
    @include hook-container-misc();
}

// @mixin hook-container-misc(){}

//
// Component: Container
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-container-misc(){}
// Name:            Countdown
// Description:     Component to create countdown timers
//
// Component:       `x-countdown`
//
// Sub-objects:     `x-countdown-number`
//                  `x-countdown-separator`
//                  `x-countdown-label`
//
// ========================================================================


// Variables
// ========================================================================

$countdown-number-line-height: 0.8 !default;
$countdown-number-font-size  : 2rem !default; // 32px
$countdown-number-font-size-s: 4rem !default; // 64px
$countdown-number-font-size-m: 6rem !default; // 96px

$countdown-separator-line-height: 1.6 !default;
$countdown-separator-font-size  : 1rem !default; // 16px
$countdown-separator-font-size-s: 2rem !default; // 32px
$countdown-separator-font-size-m: 3rem !default; // 48px


/* ========================================================================
   Component: Countdown
 ========================================================================== */

.x-countdown {
    @if(mixin-exists(hook-countdown)) {
        @include hook-countdown();
    }
}


/* Item
 ========================================================================== */

.x-countdown-number,
.x-countdown-separator {
    @if(mixin-exists(hook-countdown-item)) {
        @include hook-countdown-item();
    }
}


/* Number
 ========================================================================== */


/*
 * 1. Make numbers all of the same size to prevent jumping. Must be supported by the font.
 * 2. Style
 */

.x-countdown-number {
    /* 1 */
    font-variant-numeric: tabular-nums;
    /* 2 */
    font-size           : $countdown-number-font-size;
    line-height         : $countdown-number-line-height;

    @if(mixin-exists(hook-countdown-number)) {
        @include hook-countdown-number();
    }
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-countdown-number {
        font-size: $countdown-number-font-size-s;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-countdown-number {
        font-size: $countdown-number-font-size-m;
    }

}


/* Separator
 ========================================================================== */

.x-countdown-separator {
    font-size  : $countdown-separator-font-size;
    line-height: $countdown-separator-line-height;

    @if(mixin-exists(hook-countdown-separator)) {
        @include hook-countdown-separator();
    }
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-countdown-separator {
        font-size: $countdown-separator-font-size-s;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-countdown-separator {
        font-size: $countdown-separator-font-size-m;
    }

}


/* Label
 ========================================================================== */

.x-countdown-label {
    @if(mixin-exists(hook-countdown-label)) {
        @include hook-countdown-label();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-countdown-misc)) {
    @include hook-countdown-misc();
}

// @mixin hook-countdown(){}
// @mixin hook-countdown-item(){}
// @mixin hook-countdown-number(){}
// @mixin hook-countdown-separator(){}
// @mixin hook-countdown-label(){}
// @mixin hook-countdown-misc(){}


// Inverse
// ========================================================================



// @mixin hook-inverse-countdown-item(){}
// @mixin hook-inverse-countdown-number(){}
// @mixin hook-inverse-countdown-separator(){}
// @mixin hook-inverse-countdown-label(){}

//
// Component: Countdown
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-countdown(){}


// Item
// ========================================================================

// @mixin hook-countdown-item(){}


// Number
// ========================================================================

// @mixin hook-countdown-number(){}


// Separator
// ========================================================================

// @mixin hook-countdown-separator(){}


// Label
// ========================================================================

// @mixin hook-countdown-label(){}


// Miscellaneous
// ========================================================================

// @mixin hook-countdown-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-countdown-item(){}
// @mixin hook-inverse-countdown-number(){}
// @mixin hook-inverse-countdown-separator(){}
// @mixin hook-inverse-countdown-label(){}

// Name:            Cover
// Description:     Utilities to let embedded content cover their container in a centered position
//
// Component:       `x-cover`
//
// Sub-object:      `x-cover-container`
//
// ========================================================================


/* ========================================================================
   Component: Cover
 ========================================================================== */

/*
 * Works with iframes and embedded content
 * 1. Reset responsiveness for embedded content
 * 2. Center object
 * Note: Percent values on the `top` property only works if this element
 *       is absolute positioned or if the container has a height
 */

.x-cover {
    /* 1 */
    max-width: none;
    /* 2 */
    position : absolute;
    left     : 50%;
    top      : 50%;
    transform: translate(-50%, -50%);
}

iframe.x-cover {
    pointer-events: none;
}


/* Container
 ========================================================================== */

/*
 * 1. Parent container which clips resized object
 * 2. Needed if the child is positioned absolute. See note above
 */

.x-cover-container {
    /* 1 */
    overflow: hidden;
    /* 2 */
    position: relative;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-cover-misc)) {
    @include hook-cover-misc();
}

// @mixin hook-cover-misc(){}

// Name:            Description list
// Description:     Styles for description lists
//
// Component:       `x-description-list`
//
// Modifiers:       `x-description-list-divider`
//
// ========================================================================


// Variables
// ========================================================================

$description-list-term-color     : $global-emphasis-color !default;
$description-list-term-margin-top: $global-margin !default;

$description-list-divider-term-margin-top  : $global-margin !default;
$description-list-divider-term-border-width: $global-border-width !default;
$description-list-divider-term-border      : $global-border !default;


/* ========================================================================
   Component: Description list
 ========================================================================== */

/*
 * Term
 */

.x-description-list>dt {
    color: $description-list-term-color;

    @if(mixin-exists(hook-description-list-term)) {
        @include hook-description-list-term();
    }
}

.x-description-list>dt:nth-child(n+2) {
    margin-top: $description-list-term-margin-top;
}

/*
 * Description
 */

.x-description-list>dd {
    @if(mixin-exists(hook-description-list-description)) {
        @include hook-description-list-description();
    }
}


/* Style modifier
 ========================================================================== */

/*
 * Line
 */

.x-description-list-divider>dt:nth-child(n+2) {
    margin-top : $description-list-divider-term-margin-top;
    padding-top: $description-list-divider-term-margin-top;
    border-top : $description-list-divider-term-border-width solid $description-list-divider-term-border;

    @if(mixin-exists(hook-description-list-divider-term)) {
        @include hook-description-list-divider-term();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-description-list-misc)) {
    @include hook-description-list-misc();
}

// @mixin hook-description-list-term(){}
// @mixin hook-description-list-description(){}
// @mixin hook-description-list-divider-term(){}
// @mixin hook-description-list-misc(){}

//
// Component: Description list
//
// ========================================================================


// Variables
// ========================================================================

$description-list-term-font-size:                       $global-small-font-size !default;
$description-list-term-font-weight:                     normal !default;
$description-list-term-text-transform:                  uppercase !default;


// Component
// ========================================================================



// @mixin hook-description-list-description(){}


// Style modifier
// ========================================================================

// @mixin hook-description-list-divider-term(){}


// Miscellaneous
// ========================================================================

// @mixin hook-description-list-misc(){}
// Name:            Divider
// Description:     Styles for dividers
//
// Component:       `x-divider-icon`
//                  `x-divider-small`
//                  `x-divider-vertical`
//
// ========================================================================


// Variables
// ========================================================================

$divider-margin-vertical: $global-margin !default;

$divider-icon-width            : 50px !default;
$divider-icon-height           : 20px !default;
$divider-icon-color            : $global-border !default;
$divider-icon-line-top         : 50% !default;
$divider-icon-line-width       : 100% !default;
$divider-icon-line-border-width: $global-border-width !default;
$divider-icon-line-border      : $global-border !default;

$internal-divider-icon-image: "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2220%22%20height%3D%2220%22%20viewBox%3D%220%200%2020%2020%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Ccircle%20fill%3D%22none%22%20stroke%3D%22#000%22%20stroke-width%3D%222%22%20cx%3D%2210%22%20cy%3D%2210%22%20r%3D%227%22%20%2F%3E%0A%3C%2Fsvg%3E%0A" !default;

$divider-small-width       : 100px !default;
$divider-small-border-width: $global-border-width !default;
$divider-small-border      : $global-border !default;

$divider-vertical-height      : 100px !default;
$divider-vertical-border-width: $global-border-width !default;
$divider-vertical-border      : $global-border !default;


/* ========================================================================
   Component: Divider
 ========================================================================== */

/*
 * 1. Reset default `hr`
 * 2. Set margin if a `div` is used for semantical reason
 */

[class*='x-divider'] {
    /* 1 */
    border       : none;
    /* 2 */
    margin-bottom: $divider-margin-vertical;
}

/* Add margin if adjacent element */
*+[class*='x-divider'] {
    margin-top: $divider-margin-vertical;
}


/* Icon
 ========================================================================== */

.x-divider-icon {
    position: relative;
    height  : $divider-icon-height;
    @include svg-fill($internal-divider-icon-image, "#000", $divider-icon-color);
    background-repeat  : no-repeat;
    background-position: 50% 50%;

    @if(mixin-exists(hook-divider-icon)) {
        @include hook-divider-icon();
    }
}

.x-divider-icon::before,
.x-divider-icon::after {
    content      : "";
    position     : absolute;
    top          : $divider-icon-line-top;
    max-width    : unquote('calc(50% - (#{$divider-icon-width} / 2))');
    border-bottom: $divider-icon-line-border-width solid $divider-icon-line-border;

    @if(mixin-exists(hook-divider-icon-line)) {
        @include hook-divider-icon-line();
    }
}

.x-divider-icon::before {
    right: unquote('calc(50% + (#{$divider-icon-width} / 2))');
    width: $divider-icon-line-width;

    @if(mixin-exists(hook-divider-icon-line-left)) {
        @include hook-divider-icon-line-left();
    }
}

.x-divider-icon::after {
    left : unquote('calc(50% + (#{$divider-icon-width} / 2))');
    width: $divider-icon-line-width;

    @if(mixin-exists(hook-divider-icon-line-right)) {
        @include hook-divider-icon-line-right();
    }
}


/* Small
 ========================================================================== */

/*
 * 1. Fix height because of `inline-block`
 * 2. Using ::after and inline-block to make `text-align` work
 */

/* 1 */
.x-divider-small {
    line-height: 0;
}

/* 2 */
.x-divider-small::after {
    content       : "";
    display       : inline-block;
    width         : $divider-small-width;
    max-width     : 100%;
    border-top    : $divider-small-border-width solid $divider-small-border;
    vertical-align: top;

    @if(mixin-exists(hook-divider-small)) {
        @include hook-divider-small();
    }
}


/* Vertical
 ========================================================================== */

.x-divider-vertical {
    width       : 1px;
    height      : $divider-vertical-height;
    margin-left : auto;
    margin-right: auto;
    border-left : $divider-vertical-border-width solid $divider-vertical-border;

    @if(mixin-exists(hook-divider-vertical)) {
        @include hook-divider-vertical();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-divider-misc)) {
    @include hook-divider-misc();
}

// @mixin hook-divider-icon(){}
// @mixin hook-divider-icon-line(){}
// @mixin hook-divider-icon-line-left(){}
// @mixin hook-divider-icon-line-right(){}
// @mixin hook-divider-small(){}
// @mixin hook-divider-vertical(){}
// @mixin hook-divider-misc(){}


// Inverse
// ========================================================================

$inverse-divider-icon-color      : $inverse-global-border !default;
$inverse-divider-icon-line-border: $inverse-global-border !default;
$inverse-divider-small-border    : $inverse-global-border !default;
$inverse-divider-vertical-border : $inverse-global-border !default;



// @mixin hook-inverse-divider-icon(){}
// @mixin hook-inverse-divider-icon-line(){}
// @mixin hook-inverse-divider-small(){}
// @mixin hook-inverse-divider-vertical(){}

//
// Component: Divider
//
// ========================================================================


// Variables
// ========================================================================


// Icon
// ========================================================================

// @mixin hook-divider-icon(){}

// @mixin hook-divider-icon-line(){}

// @mixin hook-divider-icon-line-left(){}

// @mixin hook-divider-icon-line-right(){}


// Small
// ========================================================================

// @mixin hook-divider-small(){}


// Vertical
// ========================================================================

// @mixin hook-divider-vertical(){}


// Miscellaneous
// ========================================================================

// @mixin hook-divider-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-divider-icon(){}
// @mixin hook-inverse-divider-icon-line(){}

// @mixin hook-inverse-divider-small(){}

// @mixin hook-inverse-divider-vertical(){}
// Name:            Dotnav
// Description:     Component to create dot navigations
//
// Component:       `x-dotnav`
//
// Modifier:        `x-dotnav-vertical`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$dotnav-margin-horizontal: 12px !default;
$dotnav-margin-vertical  : $dotnav-margin-horizontal !default;

$dotnav-item-width        : 10px !default;
$dotnav-item-height       : $dotnav-item-width !default;
$dotnav-item-border-radius: 50% !default;

$dotnav-item-background        : rgba($global-color, 0.2) !default;
$dotnav-item-hover-background  : rgba($global-color, 0.6) !default;
$dotnav-item-onclick-background: rgba($global-color, 0.2) !default;
$dotnav-item-active-background : rgba($global-color, 0.6) !default;


/* ========================================================================
   Component: Dotnav
 ========================================================================== */

/*
 * 1. Allow items to wrap into the next line
 * 2. Reset list
 * 3. Gutter
 */

.x-dotnav {
    display    : flex;
    /* 1 */
    flex-wrap  : wrap;
    /* 2 */
    margin     : 0;
    padding    : 0;
    list-style : none;
    /* 3 */
    margin-left: (-$dotnav-margin-horizontal);

    @if(mixin-exists(hook-dotnav)) {
        @include hook-dotnav();
    }
}

/*
 * 1. Space is allocated solely based on content dimensions: 0 0 auto
 * 2. Gutter
 */

.x-dotnav>* {
    /* 1 */
    flex        : none;
    /* 2 */
    padding-left: $dotnav-margin-horizontal;
}


/* Items
 ========================================================================== */

/*
 * Items
 * 1. Hide text if present
 */

.x-dotnav>*>* {
    display      : block;
    box-sizing   : border-box;
    width        : $dotnav-item-width;
    height       : $dotnav-item-height;
    border-radius: $dotnav-item-border-radius;
    background   : $dotnav-item-background;
    /* 1 */
    text-indent  : 100%;
    overflow     : hidden;
    white-space  : nowrap;

    @if(mixin-exists(hook-dotnav-item)) {
        @include hook-dotnav-item();
    }
}

/* Hover + Focus */
.x-dotnav>*> :hover,
.x-dotnav>*> :focus {
    background-color: $dotnav-item-hover-background;
    outline         : none;

    @if(mixin-exists(hook-dotnav-item-hover)) {
        @include hook-dotnav-item-hover();
    }
}

/* OnClick */
.x-dotnav>*> :active {
    background-color: $dotnav-item-onclick-background;

    @if(mixin-exists(hook-dotnav-item-onclick)) {
        @include hook-dotnav-item-onclick();
    }
}

/* Active */
.x-dotnav>.x-active>* {
    background-color: $dotnav-item-active-background;

    @if(mixin-exists(hook-dotnav-item-active)) {
        @include hook-dotnav-item-active();
    }
}


/* Modifier: 'x-dotnav-vertical'
 ========================================================================== */

/*
 * 1. Change direction
 * 2. Gutter
 */

.x-dotnav-vertical {
    /* 1 */
    flex-direction: column;
    /* 2 */
    margin-left   : 0;
    margin-top    : (-$dotnav-margin-vertical);
}

/* 2 */
.x-dotnav-vertical>* {
    padding-left: 0;
    padding-top : $dotnav-margin-vertical;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-dotnav-misc)) {
    @include hook-dotnav-misc();
}

// @mixin hook-dotnav(){}
// @mixin hook-dotnav-item(){}
// @mixin hook-dotnav-item-hover(){}
// @mixin hook-dotnav-item-onclick(){}
// @mixin hook-dotnav-item-active(){}
// @mixin hook-dotnav-misc(){}


// Inverse
// ========================================================================

$inverse-dotnav-item-background        : rgba($inverse-global-color, 0.5) !default;
$inverse-dotnav-item-hover-background  : rgba($inverse-global-color, 0.9) !default;
$inverse-dotnav-item-onclick-background: rgba($inverse-global-color, 0.5) !default;
$inverse-dotnav-item-active-background : rgba($inverse-global-color, 0.9) !default;



// @mixin hook-inverse-dotnav-item(){}
// @mixin hook-inverse-dotnav-item-hover(){}
// @mixin hook-inverse-dotnav-item-onclick(){}
// @mixin hook-inverse-dotnav-item-active(){}

//
// Component: Dotnav
//
// ========================================================================


// Variables
// ========================================================================

$dotnav-item-background:                              transparent !default;

//
// New
//

$dotnav-item-border-width:                            1px !default;

$dotnav-item-border:                                  rgba($global-color, 0.4) !default;
$dotnav-item-hover-border:                            transparent !default;
$dotnav-item-onclick-border:                          transparent !default;
$dotnav-item-active-border:                           transparent !default;


// Component
// ========================================================================

// @mixin hook-dotnav(){}










// Miscellaneous
// ========================================================================

// @mixin hook-dotnav-misc(){}


// Inverse
// ========================================================================

$inverse-dotnav-item-background:                      transparent !default;

// @mixin hook-inverse-dotnav(){}




// Name:            Drop
// Description:     Component to position any element next to any other element.
//
// Component:       `x-drop`
//
// Modifiers:       `x-drop-top-*`
//                  `x-drop-bottom-*`
//                  `x-drop-left-*`
//                  `x-drop-right-*`
//                  `x-drop-stack`
//                  `x-drop-grid`
//
// States:          `x-open`
//
// Uses:            Animation
//
// ========================================================================


// Variables
// ========================================================================

$drop-z-index: $global-z-index+20 !default;
$drop-width  : 300px !default;
$drop-margin : $global-margin !default;


/* ========================================================================
   Component: Drop
 ========================================================================== */

/*
 * 1. Hide by default
 * 2. Set position
 * 3. Set a default width
 */

.x-drop {
  /* 1 */
  display   : none;
  /* 2 */
  position  : absolute;
  z-index   : $drop-z-index;
  /* 3 */
  box-sizing: border-box;
  width     : $drop-width;
}

/* Show */
.x-drop.x-open {
  display: block;
}


/* Direction / Alignment modifiers
 ========================================================================== */

/* Direction */
[class*='x-drop-top'] {
  margin-top: (-$drop-margin);
}

[class*='x-drop-bottom'] {
  margin-top: $drop-margin;
}

[class*='x-drop-left'] {
  margin-left: (-$drop-margin);
}

[class*='x-drop-right'] {
  margin-left: $drop-margin;
}


/* Grid modifiers
 ========================================================================== */

.x-drop-stack .x-drop-grid>* {
  width: 100% !important;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-drop-misc)) {
  @include hook-drop-misc();
}

// @mixin hook-drop-misc(){}

//
// Component: Drop
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-drop-misc(){}
// Name:            Dropdown
// Description:     Component to create dropdown menus
//
// Component:       `x-dropdown`
//
// Adopted:         `x-dropdown-nav`
//
// Modifiers:       `x-dropdown-top-*`
//                  `x-dropdown-bottom-*`
//                  `x-dropdown-left-*`
//                  `x-dropdown-right-*`
//                  `x-dropdown-stack`
//                  `x-dropdown-grid`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$dropdown-z-index   : $global-z-index+20 !default;
$dropdown-min-width : 200px !default;
$dropdown-padding   : 15px !default;
$dropdown-background: $global-muted-background !default;
$dropdown-color     : $global-color !default;
$dropdown-margin    : $global-small-margin !default;

$dropdown-nav-item-color              : $global-muted-color !default;
$dropdown-nav-item-hover-color        : $global-color !default;
$dropdown-nav-header-color            : $global-emphasis-color !default;
$dropdown-nav-divider-border-width    : $global-border-width !default;
$dropdown-nav-divider-border          : $global-border !default;
$dropdown-nav-sublist-item-color      : $global-muted-color !default;
$dropdown-nav-sublist-item-hover-color: $global-color !default;


/* ========================================================================
   Component: Dropdown
 ========================================================================== */

/*
 * 1. Hide by default
 * 2. Set position
 * 3. Set a default width
 * 4. Style
 */

.x-dropdown {
    /* 1 */
    display   : none;
    /* 2 */
    position  : absolute;
    z-index   : $dropdown-z-index;
    /* 3 */
    box-sizing: border-box;
    min-width : $dropdown-min-width;
    /* 4 */
    padding   : $dropdown-padding;
    background: $dropdown-background;
    color     : $dropdown-color;

    @if(mixin-exists(hook-dropdown)) {
        @include hook-dropdown();
    }
}

/* Show */
.x-dropdown.x-open {
    display: block;
}


/* Nav
 * Adopts `x-nav`
 ========================================================================== */

.x-dropdown-nav {
    white-space: nowrap;

    @if(mixin-exists(hook-dropdown-nav)) {
        @include hook-dropdown-nav();
    }
}

/*
 * Items
 */

.x-dropdown-nav>li>a {
    color: $dropdown-nav-item-color;

    @if(mixin-exists(hook-dropdown-nav-item)) {
        @include hook-dropdown-nav-item();
    }
}

/* Hover + Focus + Active */
.x-dropdown-nav>li>a:hover,
.x-dropdown-nav>li>a:focus,
.x-dropdown-nav>li.x-active>a {
    color: $dropdown-nav-item-hover-color;

    @if(mixin-exists(hook-dropdown-nav-item-hover)) {
        @include hook-dropdown-nav-item-hover();
    }
}

/*
 * Header
 */

.x-dropdown-nav .x-nav-header {
    color: $dropdown-nav-header-color;

    @if(mixin-exists(hook-dropdown-nav-header)) {
        @include hook-dropdown-nav-header();
    }
}

/*
 * Divider
 */

.x-dropdown-nav .x-nav-divider {
    border-top: $dropdown-nav-divider-border-width solid $dropdown-nav-divider-border;

    @if(mixin-exists(hook-dropdown-nav-divider)) {
        @include hook-dropdown-nav-divider();
    }
}

/*
 * Sublists
 */

.x-dropdown-nav .x-nav-sub a {
    color: $dropdown-nav-sublist-item-color;
}

.x-dropdown-nav .x-nav-sub a:hover,
.x-dropdown-nav .x-nav-sub a:focus,
.x-dropdown-nav .x-nav-sub li.x-active>a {
    color: $dropdown-nav-sublist-item-hover-color;
}


/* Direction / Alignment modifiers
 ========================================================================== */

/* Direction */
[class*='x-dropdown-top'] {
    margin-top: (-$dropdown-margin);
}

[class*='x-dropdown-bottom'] {
    margin-top: $dropdown-margin;
}

[class*='x-dropdown-left'] {
    margin-left: (-$dropdown-margin);
}

[class*='x-dropdown-right'] {
    margin-left: $dropdown-margin;
}


/* Grid modifiers
 ========================================================================== */

.x-dropdown-stack .x-dropdown-grid>* {
    width: 100% !important;
}



// Hooks
// ========================================================================

@if(mixin-exists(hook-dropdown-misc)) {
    @include hook-dropdown-misc();
}

// @mixin hook-dropdown(){}
// @mixin hook-dropdown-nav(){}
// @mixin hook-dropdown-nav-item(){}
// @mixin hook-dropdown-nav-item-hover(){}
// @mixin hook-dropdown-nav-header(){}
// @mixin hook-dropdown-nav-divider(){}
// @mixin hook-dropdown-misc(){}

//
// Component: Dropdown
//
// ========================================================================


// Variables
// ========================================================================

$dropdown-padding:                               25px !default;
$dropdown-background:                            $global-background !default;

//
// New
//

$dropdown-nav-font-size:                         $global-small-font-size !default;

$dropdown-box-shadow:                            0 5px 12px rgba(0,0,0,0.15) !default;


// Component
// ========================================================================




// Nav
// ========================================================================



// @mixin hook-dropdown-nav-item(){}

// @mixin hook-dropdown-nav-item-hover(){}

// @mixin hook-dropdown-nav-header(){}

// @mixin hook-dropdown-nav-divider(){}


// Miscellaneous
// ========================================================================

// @mixin hook-dropdown-misc(){}
// Name:            Flex
// Description:     Utilities for layouts based on flexbox
//
// Component:       `x-flex-*`
//
// ========================================================================


/* ========================================================================
   Component: Flex
 ========================================================================== */

.x-flex {
    display: flex;
}

.x-flex-inline {
    display: inline-flex;
}

/*
 * Remove pseudo elements created by micro clearfix as precaution
 */

.x-flex::before,
.x-flex::after,
.x-flex-inline::before,
.x-flex-inline::after {
    display: none;
}


/* Alignment
 ========================================================================== */

/*
 * Align items along the main axis of the current line of the flex container
 * Row: Horizontal
 */

// Default
.x-flex-left {
    justify-content: flex-start;
}

.x-flex-center {
    justify-content: center;
}

.x-flex-right {
    justify-content: flex-end;
}

.x-flex-between {
    justify-content: space-between;
}

.x-flex-around {
    justify-content: space-around;
}


/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-flex-left\:small {
        justify-content: flex-start;
    }

    .x-flex-center\:small {
        justify-content: center;
    }

    .x-flex-right\:small {
        justify-content: flex-end;
    }

    .x-flex-between\:small {
        justify-content: space-between;
    }

    .x-flex-around\:small {
        justify-content: space-around;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-flex-left\:medium {
        justify-content: flex-start;
    }

    .x-flex-center\:medium {
        justify-content: center;
    }

    .x-flex-right\:medium {
        justify-content: flex-end;
    }

    .x-flex-between\:medium {
        justify-content: space-between;
    }

    .x-flex-around\:medium {
        justify-content: space-around;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-flex-left\:large {
        justify-content: flex-start;
    }

    .x-flex-center\:large {
        justify-content: center;
    }

    .x-flex-right\:large {
        justify-content: flex-end;
    }

    .x-flex-between\:large {
        justify-content: space-between;
    }

    .x-flex-around\:large {
        justify-content: space-around;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-flex-left\:xlarge {
        justify-content: flex-start;
    }

    .x-flex-center\:xlarge {
        justify-content: center;
    }

    .x-flex-right\:xlarge {
        justify-content: flex-end;
    }

    .x-flex-between\:xlarge {
        justify-content: space-between;
    }

    .x-flex-around\:xlarge {
        justify-content: space-around;
    }

}

/*
 * Align items in the cross axis of the current line of the flex container
 * Row: Vertical
 */

// Default
.x-flex-stretch {
    align-items: stretch;
}

.x-flex-top {
    align-items: flex-start;
}

.x-flex-middle {
    align-items: center;
}

.x-flex-bottom {
    align-items: flex-end;
}


/* Direction
 ========================================================================== */

// Default
.x-flex-row {
    flex-direction: row;
}

.x-flex-row-reverse {
    flex-direction: row-reverse;
}

.x-flex-column {
    flex-direction: column;
}

.x-flex-column-reverse {
    flex-direction: column-reverse;
}


/* Wrap
 ========================================================================== */

// Default
.x-flex-nowrap {
    flex-wrap: nowrap;
}

.x-flex-wrap {
    flex-wrap: wrap;
}

.x-flex-wrap-reverse {
    flex-wrap: wrap-reverse;
}

/*
 * Aligns items within the flex container when there is extra space in the cross-axis
 * Only works if there is more than one line of flex items
 */

// Default
.x-flex-wrap-stretch {
    align-content: stretch;
}

.x-flex-wrap-top {
    align-content: flex-start;
}

.x-flex-wrap-middle {
    align-content: center;
}

.x-flex-wrap-bottom {
    align-content: flex-end;
}

.x-flex-wrap-between {
    align-content: space-between;
}

.x-flex-wrap-around {
    align-content: space-around;
}


/* Item ordering
 ========================================================================== */

/*
 * Default is 0
 */

.x-flex-first {
    order: -1;
}

.x-flex-last {
    order: 99;
}


/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-flex-first\:small {
        order: -1;
    }

    .x-flex-last\:small {
        order: 99;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-flex-first\:medium {
        order: -1;
    }

    .x-flex-last\:medium {
        order: 99;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-flex-first\:large {
        order: -1;
    }

    .x-flex-last\:large {
        order: 99;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-flex-first\:xlarge {
        order: -1;
    }

    .x-flex-last\:xlarge {
        order: 99;
    }

}


/* Item dimensions
 ========================================================================== */

/*
 * Initial: 0 1 auto
 * Content dimensions, but shrinks
 */

/*
 * No Flex: 0 0 auto
 * Content dimensions
 */

.x-flex-none {
    flex: none;
}

/*
 * Relative Flex: 1 1 auto
 * Space is allocated considering content
 */

.x-flex-auto {
    flex: auto;
}

/*
 * Absolute Flex: 1 1 0%
 * Space is allocated solely based on flex
 */

.x-flex-1 {
    flex: 1;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-flex-misc)) {
    @include hook-flex-misc();
}

// @mixin hook-flex-misc(){}

// Name:            Form Range
// Description:     Styles for the range input type
//
// Component:       `x-range`
//
// ========================================================================


// Variables
// ========================================================================

$form-range-thumb-height       : 15px !default;
$form-range-thumb-border-radius: 500px !default;
$form-range-thumb-background   : $global-color !default;

$form-range-track-height          : 3px !default;
$form-range-track-background      : darken($global-muted-background, 5%) !default;
$form-range-track-focus-background: darken($global-muted-background, 15%) !default;


/* ========================================================================
   Component: Form Range
 ========================================================================== */

/*
 * 1. Normalize and defaults
 * 2. Prevent content overflow if a fixed width is used
 * 3. Take the full width
 * 4. Remove default style
 * 5. Remove white background in Chrome
 * 6. Remove padding in IE11
 */

.x-range {
    /* 1 */
    box-sizing        : border-box;
    margin            : 0;
    vertical-align    : middle;
    /* 2 */
    max-width         : 100%;
    /* 3 */
    width             : 100%;
    /* 4 */
    -webkit-appearance: none;
    /* 5 */
    background        : transparent;
    /* 6 */
    padding           : 0;

    @if(mixin-exists(hook-form-range)) {
        @include hook-form-range();
    }
}

/* Focus */
.x-range:focus {
    outline: none;
}

.x-range::-moz-focus-outer {
    border: none;
}

/* IE11 Reset */
.x-range::-ms-track {
    height      : $form-range-thumb-height;
    background  : transparent;
    border-color: transparent;
    color       : transparent;
}

/*
 * Improves consistency of cursor style for clickable elements
 */

.x-range:not(:disabled)::-webkit-slider-thumb {
    cursor: pointer;
}

.x-range:not(:disabled)::-moz-range-thumb {
    cursor: pointer;
}

.x-range:not(:disabled)::-ms-thumb {
    cursor: pointer;
}


/* Thumb
 ========================================================================== */

/*
 * 1. Reset
 * 2. Style
 */

/* Webkit */
.x-range::-webkit-slider-thumb {
    /* 1 */
    -webkit-appearance: none;
    margin-top        : (floor($form-range-thumb-height / 2) * -1);
    /* 2 */
    height            : $form-range-thumb-height;
    width             : $form-range-thumb-height;
    border-radius     : $form-range-thumb-border-radius;
    background        : $form-range-thumb-background;

    @if(mixin-exists(hook-form-range-thumb)) {
        @include hook-form-range-thumb();
    }
}

/* Firefox */
.x-range::-moz-range-thumb {
    /* 1 */
    border       : none;
    /* 2 */
    height       : $form-range-thumb-height;
    width        : $form-range-thumb-height;
    border-radius: $form-range-thumb-border-radius;
    background   : $form-range-thumb-background;

    @if(mixin-exists(hook-form-range-thumb)) {
        @include hook-form-range-thumb();
    }
}

/* Edge */
.x-range::-ms-thumb {
    /* 1 */
    margin-top: 0;
}

/* IE11 */
.x-range::-ms-thumb {
    /* 1 */
    border       : none;
    /* 2 */
    height       : $form-range-thumb-height;
    width        : $form-range-thumb-height;
    border-radius: $form-range-thumb-border-radius;
    background   : $form-range-thumb-background;

    @if(mixin-exists(hook-form-range-thumb)) {
        @include hook-form-range-thumb();
    }
}

/* Edge + IE11 */
.x-range::-ms-tooltip {
    display: none;
}


/* Track
 ========================================================================== */

/*
 * 1. Safari doesn't have a focus state. Using active instead.
 */

/* Webkit */
.x-range::-webkit-slider-runnable-track {
    height    : $form-range-track-height;
    background: $form-range-track-background;

    @if(mixin-exists(hook-form-range-track)) {
        @include hook-form-range-track();
    }
}

.x-range:focus::-webkit-slider-runnable-track,
/* 1 */
.x-range:active::-webkit-slider-runnable-track {
    background: $form-range-track-focus-background;

    @if(mixin-exists(hook-form-range-track-focus)) {
        @include hook-form-range-track-focus();
    }
}

/* Firefox */
.x-range::-moz-range-track {
    height    : $form-range-track-height;
    background: $form-range-track-background;

    @if(mixin-exists(hook-form-range-track)) {
        @include hook-form-range-track();
    }
}

.x-range:focus::-moz-range-track {
    background: $form-range-track-focus-background;

    @if(mixin-exists(hook-form-range-track-focus)) {
        @include hook-form-range-track-focus();
    }
}

/* Edge */
.x-range::-ms-fill-lower,
.x-range::-ms-fill-upper {
    height    : $form-range-track-height;
    background: $form-range-track-background;

    @if(mixin-exists(hook-form-range-track)) {
        @include hook-form-range-track();
    }
}

.x-range:focus::-ms-fill-lower,
.x-range:focus::-ms-fill-upper {
    background: $form-range-track-focus-background;

    @if(mixin-exists(hook-form-range-track-focus)) {
        @include hook-form-range-track-focus();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-form-range-misc)) {
    @include hook-form-range-misc();
}

// @mixin hook-form-range(){}
// @mixin hook-form-range-thumb(){}
// @mixin hook-form-range-track(){}
// @mixin hook-form-range-track-focus(){}
// @mixin hook-form-range-misc(){}

//
// Component: Form Range
//
// ========================================================================


// Variables
// ========================================================================

$form-range-thumb-background:                    $global-background !default;

//
// New
//

$form-range-thumb-border-width:                  $global-border-width !default;
$form-range-thumb-border:                        darken($global-border, 10%) !default;

$form-range-track-border-radius:                 500px !default;


// Component
// ========================================================================

// @mixin hook-form-range(){}


// Thumb
// ========================================================================




// Track
// ========================================================================



// @mixin hook-form-range-track-focus(){}


// Miscellaneous
// ========================================================================

// @mixin hook-form-range-misc(){}
// Name:            Form
// Description:     Styles for forms
//
// Component:       `x-form-*`
//                  `x-input`
//                  `x-select`
//                  `x-textarea`
//                  `x-radio`
//                  `x-checkbox`
//                  `x-legend`
//                  `x-fieldset`
//
// Sub-objects:     `x-form-custom`
//                  `x-form-stacked`
//                  `x-form-horizontal`
//                  `x-form-label`
//                  `x-form-controls`
//                  `x-form-icon`
//                  `x-form-icon-flip`
//
// Modifiers:       `x-form-small`
//                  `x-form-large`
//                  `x-form-danger`
//                  `x-form-success`
//                  `x-form-blank`
//                  `x-form-width-xsmall`
//                  `x-form-width-small`
//                  `x-form-width-medium`
//                  `x-form-width-large`
//                  `x-form-controls-text`
//
// ========================================================================


// Variables
// ========================================================================

$form-height            : $global-control-height !default;
$form-line-height       : $form-height !default;
$form-padding-horizontal: 10px !default;
$form-padding-vertical  : 4px !default;

$form-background: $global-muted-background !default;
$form-color     : $global-color !default;

$form-focus-background: $global-muted-background !default;
$form-focus-color     : $global-color !default;

$form-disabled-background: $global-muted-background !default;
$form-disabled-color     : $global-muted-color !default;

$form-placeholder-color: $global-muted-color !default;

$form-small-height            : $global-control-small-height !default;
$form-small-padding-horizontal: 8px !default;
$form-small-line-height       : $form-small-height !default;
$form-small-font-size         : $global-small-font-size !default;

$form-large-height            : $global-control-large-height !default;
$form-large-padding-horizontal: 12px !default;
$form-large-line-height       : $form-large-height !default;
$form-large-font-size         : $global-medium-font-size !default;

$form-danger-color : $global-danger-background !default;
$form-success-color: $global-success-background !default;

$form-width-xsmall: 50px !default;
$form-width-small : 130px !default;
$form-width-medium: 200px !default;
$form-width-large : 500px !default;

$form-select-padding-right      : 20px !default;
$form-select-icon-color         : $global-color !default;
$form-select-option-color       : #444 !default;
$form-select-disabled-icon-color: $global-muted-color !default;

$form-datalist-padding-right: 20px !default;
$form-datalist-icon-color   : $global-color !default;

$form-radio-size      : 16px !default;
$form-radio-margin-top: -4px !default;
$form-radio-background: darken($global-muted-background, 5%) !default;

$form-radio-checked-background: $global-primary-background !default;
$form-radio-checked-icon-color: $global-inverse-color !default;

$form-radio-checked-focus-background: darken($global-primary-background, 10%) !default;

$form-radio-disabled-background: $global-muted-background !default;
$form-radio-disabled-icon-color: $global-muted-color !default;

$form-legend-font-size  : $global-large-font-size !default;
$form-legend-line-height: 1.4 !default;

$form-stacked-margin-bottom: $global-small-margin !default;

$form-horizontal-label-width              : 200px !default;
$form-horizontal-label-margin-top         : 7px !default;
$form-horizontal-controls-margin-left     : 215px !default;
$form-horizontal-controls-text-padding-top: 7px !default;

$form-icon-width      : $form-height !default;
$form-icon-color      : $global-muted-color !default;
$form-icon-hover-color: $global-color !default;

$internal-form-select-image                : "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2224%22%20height%3D%2216%22%20viewBox%3D%220%200%2024%2016%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Cpolygon%20fill%3D%22#000%22%20points%3D%2212%201%209%206%2015%206%22%20%2F%3E%0A%20%20%20%20%3Cpolygon%20fill%3D%22#000%22%20points%3D%2212%2013%209%208%2015%208%22%20%2F%3E%0A%3C%2Fsvg%3E%0A" !default;
$internal-form-datalist-image              : "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2224%22%20height%3D%2216%22%20viewBox%3D%220%200%2024%2016%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Cpolygon%20fill%3D%22#000%22%20points%3D%2212%2012%208%206%2016%206%22%20%2F%3E%0A%3C%2Fsvg%3E%0A" !default;
$internal-form-radio-image                 : "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Ccircle%20fill%3D%22#000%22%20cx%3D%228%22%20cy%3D%228%22%20r%3D%222%22%20%2F%3E%0A%3C%2Fsvg%3E" !default;
$internal-form-checkbox-image              : "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2214%22%20height%3D%2211%22%20viewBox%3D%220%200%2014%2011%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Cpolygon%20fill%3D%22#000%22%20points%3D%2212%201%205%207.5%202%205%201%205.5%205%2010%2013%201.5%22%20%2F%3E%0A%3C%2Fsvg%3E%0A" !default;
$internal-form-checkbox-indeterminate-image: "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Crect%20fill%3D%22#000%22%20x%3D%223%22%20y%3D%228%22%20width%3D%2210%22%20height%3D%221%22%20%2F%3E%0A%3C%2Fsvg%3E" !default;


/* ========================================================================
   Component: Form
 ========================================================================== */

/*
 * 1. Define consistent box sizing.
 *    Default is `content-box` with following exceptions set to `border-box`
 *    `select`, `input[type="checkbox"]` and `input[type="radio"]`
 *    `input[type="search"]` in Chrome, Safari and Opera
 *    `input[type="color"]` in Firefox
 * 2. Address margins set differently in Firefox/IE and Chrome/Safari/Opera.
 * 3. Remove `border-radius` in iOS.
 * 4. Change font properties to `inherit` in all browsers.
 */

.x-input,
.x-select,
.x-textarea,
.x-radio,
.x-checkbox {
    /* 1 */
    box-sizing   : border-box;
    /* 2 */
    margin       : 0;
    /* 3 */
    border-radius: 0;
    /* 4 */
    font         : inherit;
}

/*
 * Show the overflow in Edge.
 */

.x-input {
    overflow: visible;
}

/*
 * Remove the inheritance of text transform in Firefox.
 */

.x-select {
    text-transform: none;
}

/*
 * 1. Change font properties to `inherit` in all browsers
 * 2. Don't inherit the `font-weight` and use `bold` instead.
 * NOTE: Both declarations don't work in Chrome, Safari and Opera.
 */

.x-select optgroup {
    /* 1 */
    font       : inherit;
    /* 2 */
    font-weight: bold;
}

/*
 * Remove the default vertical scrollbar in IE 10+.
 */

.x-textarea {
    overflow: auto;
}

/*
 * Remove the inner padding and cancel buttons in Chrome on OS X and Safari on OS X.
 */

.x-input[type="search"]::-webkit-search-cancel-button,
.x-input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}


/*
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

.x-input[type="number"]::-webkit-inner-spin-button,
.x-input[type="number"]::-webkit-outer-spin-button {
    height: auto;
}

/*
 * Removes placeholder transparency in Firefox.
 */

.x-input::-moz-placeholder,
.x-textarea::-moz-placeholder {
    opacity: 1;
}

/*
 * Improves consistency of cursor style for clickable elements
 */

.x-radio:not(:disabled),
.x-checkbox:not(:disabled) {
    cursor: pointer;
}

/*
 * Define consistent border, margin, and padding.
 */

.x-fieldset {
    border : none;
    margin : 0;
    padding: 0;
}


/* Input, select and textarea
 * Allowed: `text`, `password`, `datetime`, `datetime-local`, `date`,  `month`,
            `time`, `week`, `number`, `email`, `url`, `search`, `tel`, `color`
 * Disallowed: `range`, `radio`, `checkbox`, `file`, `submit`, `reset` and `image`
 ========================================================================== */

/*
 * Remove default style in iOS.
 */

.x-input,
.x-textarea {
    -webkit-appearance: none;
}

/*
 * 1. Prevent content overflow if a fixed width is used
 * 2. Take the full width
 * 3. Reset default
 * 4. Style
 */

.x-input,
.x-select,
.x-textarea {
    /* 1 */
    max-width : 100%;
    /* 2 */
    width     : 100%;
    /* 3 */
    border    : 0 none;
    /* 4 */
    padding   : 0 $form-padding-horizontal;
    background: $form-background;
    color     : $form-color;

    @if(mixin-exists(hook-form)) {
        @include hook-form();
    }
}

/*
 * Single-line
 * 1. Allow any element to look like an `input` or `select` element
 * 2. Make sure line-height is not larger than height
 *    Also needed to center the text vertically
 */

.x-input,
.x-select:not([multiple]):not([size]) {
    height        : $form-height;
    vertical-align: middle;
    /* 1 */
    display       : inline-block;

    @if(mixin-exists(hook-form-single-line)) {
        @include hook-form-single-line();
    }
}

/* 2 */
.x-input:not(input),
.x-select:not(select) {
    line-height: $form-line-height;
}

/*
 * Multi-line
 */

.x-select[multiple],
.x-select[size],
.x-textarea {
    padding-top   : $form-padding-vertical;
    padding-bottom: $form-padding-vertical;
    vertical-align: top;

    @if(mixin-exists(hook-form-multi-line)) {
        @include hook-form-multi-line();
    }
}

.x-select[multiple],
.x-select[size] {
    resize: vertical;
}

/* Focus */
.x-input:focus,
.x-select:focus,
.x-textarea:focus {
    outline         : none;
    background-color: $form-focus-background;
    color           : $form-focus-color;

    @if(mixin-exists(hook-form-focus)) {
        @include hook-form-focus();
    }
}

/* Disabled */
.x-input:disabled,
.x-select:disabled,
.x-textarea:disabled {
    background-color: $form-disabled-background;
    color           : $form-disabled-color;

    @if(mixin-exists(hook-form-disabled)) {
        @include hook-form-disabled();
    }
}

/*
 * Placeholder
 */

.x-input::-ms-input-placeholder {
    color: $form-placeholder-color !important;
}

.x-input::placeholder {
    color: $form-placeholder-color;
}

.x-textarea::-ms-input-placeholder {
    color: $form-placeholder-color !important;
}

.x-textarea::placeholder {
    color: $form-placeholder-color;
}


/* Style modifier (`x-input`, `x-select` and `x-textarea`)
 ========================================================================== */

/*
 * Small
 */

.x-form-small {
    font-size: $form-small-font-size;
}

.x-form-small:not(textarea):not([multiple]):not([size]) {
    height       : $form-small-height;
    padding-left : $form-small-padding-horizontal;
    padding-right: $form-small-padding-horizontal;
}

.x-form-small:not(select):not(input):not(textarea) {
    line-height: $form-small-line-height;
}

/*
 * Large
 */

.x-form-large {
    font-size: $form-large-font-size;
}

.x-form-large:not(textarea):not([multiple]):not([size]) {
    height       : $form-large-height;
    padding-left : $form-large-padding-horizontal;
    padding-right: $form-large-padding-horizontal;
}

.x-form-large:not(select):not(input):not(textarea) {
    line-height: $form-large-line-height;
}


/* Style modifier (`x-input`, `x-select` and `x-textarea`)
 ========================================================================== */

/*
 * Error
 */

.x-form-danger,
.x-form-danger:focus {
    color: $form-danger-color;

    @if(mixin-exists(hook-form-danger)) {
        @include hook-form-danger();
    }
}

/*
 * Success
 */

.x-form-success,
.x-form-success:focus {
    color: $form-success-color;

    @if(mixin-exists(hook-form-success)) {
        @include hook-form-success();
    }
}

/*
 * Blank
 */

.x-form-blank {
    background: none;

    @if(mixin-exists(hook-form-blank)) {
        @include hook-form-blank();
    }
}

.x-form-blank:focus {
    @if(mixin-exists(hook-form-blank-focus)) {
        @include hook-form-blank-focus();
    }
}


/* Width modifiers (`x-input`, `x-select` and `x-textarea`)
 ========================================================================== */

/*
 * Fixed widths
 * Different widths for mini sized `input` and `select` elements
 */

input.x-form-width-xsmall {
    width: $form-width-xsmall;
}

select.x-form-width-xsmall {
    width: ($form-width-xsmall + 25px);
}

.x-form-width-small {
    width: $form-width-small;
}

.x-form-width-medium {
    width: $form-width-medium;
}

.x-form-width-large {
    width: $form-width-large;
}


/* Select
 ========================================================================== */

/*
 * 1. Remove default style. Also works in Firefox
 * 2. Style
 * 3. Remove default style in IE 10/11
 * 4. Set `color` for options in the select dropdown, because the inherited `color` might be too light.
 */

.x-select:not([multiple]):not([size]) {
    /* 1 */
    -webkit-appearance: none;
    -moz-appearance   : none;
    /* 2 */
    padding-right     : $form-select-padding-right;
    @include svg-fill($internal-form-select-image, "#000", $form-select-icon-color);
    background-repeat  : no-repeat;
    background-position: 100% 50%;
}

/* 3 */
.x-select:not([multiple]):not([size])::-ms-expand {
    display: none;
}

/* 4 */
.x-select:not([multiple]):not([size]) option {
    color: $form-select-option-color;
}

/*
 * Disabled
 */

.x-select:not([multiple]):not([size]):disabled {
    @include svg-fill($internal-form-select-image, "#000", $form-select-disabled-icon-color);
}


/* Datalist
 ========================================================================== */

/*
 * 1. Remove default style in Chrome
 */

.x-input[list] {
    padding-right      : $form-datalist-padding-right;
    background-repeat  : no-repeat;
    background-position: 100% 50%;
}

.x-input[list]:hover,
.x-input[list]:focus {
    @include svg-fill($internal-form-datalist-image, "#000", $form-datalist-icon-color);
}

/* 1 */
.x-input[list]::-webkit-calendar-picker-indicator {
    display: none;
}


/* Radio and checkbox
 * Note: Does not work in IE11
 ========================================================================== */

/*
 * 1. Style
 * 2. Make box more robust so it clips the child element
 * 3. Vertical alignment
 * 4. Remove default style
 * 5. Fix black background on iOS
 * 6. Center icons
 */

.x-radio,
.x-checkbox {
    /* 1 */
    display            : inline-block;
    height             : $form-radio-size;
    width              : $form-radio-size;
    /* 2 */
    overflow           : hidden;
    /* 3 */
    margin-top         : $form-radio-margin-top;
    vertical-align     : middle;
    /* 4 */
    -webkit-appearance : none;
    -moz-appearance    : none;
    /* 5 */
    background-color   : $form-radio-background;
    /* 6 */
    background-repeat  : no-repeat;
    background-position: 50% 50%;

    @if(mixin-exists(hook-form-radio)) {
        @include hook-form-radio();
    }
}

.x-radio {
    border-radius: 50%;
}

/* Focus */
.x-radio:focus,
.x-checkbox:focus {
    outline: none;

    @if(mixin-exists(hook-form-radio-focus)) {
        @include hook-form-radio-focus();
    }
}

/*
 * Checked
 */

.x-radio:checked,
.x-checkbox:checked,
.x-checkbox:indeterminate {
    background-color: $form-radio-checked-background;

    @if(mixin-exists(hook-form-radio-checked)) {
        @include hook-form-radio-checked();
    }
}

/* Focus */
.x-radio:checked:focus,
.x-checkbox:checked:focus,
.x-checkbox:indeterminate:focus {
    background-color: $form-radio-checked-focus-background;

    @if(mixin-exists(hook-form-radio-checked-focus)) {
        @include hook-form-radio-checked-focus();
    }
}

/*
 * Icons
 */

.x-radio:checked {
    @include svg-fill($internal-form-radio-image, "#000", $form-radio-checked-icon-color);
}

.x-checkbox:checked {
    @include svg-fill($internal-form-checkbox-image, "#000", $form-radio-checked-icon-color);
}

.x-checkbox:indeterminate {
    @include svg-fill($internal-form-checkbox-indeterminate-image, "#000", $form-radio-checked-icon-color);
}

/*
 * Disabled
 */

.x-radio:disabled,
.x-checkbox:disabled {
    background-color: $form-radio-disabled-background;

    @if(mixin-exists(hook-form-radio-disabled)) {
        @include hook-form-radio-disabled();
    }
}

.x-radio:disabled:checked {
    @include svg-fill($internal-form-radio-image, "#000", $form-radio-disabled-icon-color);
}

.x-checkbox:disabled:checked {
    @include svg-fill($internal-form-checkbox-image, "#000", $form-radio-disabled-icon-color);
}

.x-checkbox:disabled:indeterminate {
    @include svg-fill($internal-form-checkbox-indeterminate-image, "#000", $form-radio-disabled-icon-color);
}


/* Legend
 ========================================================================== */

/*
 * Legend
 * 1. Behave like block element
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove padding so people aren't caught out if they zero out fieldsets.
 * 4. Style
 */

.x-legend {
    /* 1 */
    width      : 100%;
    /* 2 */
    color      : inherit;
    /* 3 */
    padding    : 0;
    /* 4 */
    font-size  : $form-legend-font-size;
    line-height: $form-legend-line-height;

    @if(mixin-exists(hook-form-legend)) {
        @include hook-form-legend();
    }
}


/* Custom controls
 ========================================================================== */

/*
 * 1. Container fits its content
 * 2. Create position context
 * 3. Prevent content overflow
 * 4. Behave like most inline-block elements
 */

.x-form-custom {
    /* 1 */
    display       : inline-block;
    /* 2 */
    position      : relative;
    /* 3 */
    max-width     : 100%;
    /* 4 */
    vertical-align: middle;
}

/*
 * 1. Position and resize the form control to always cover its container
 * 2. Required for Firefox for positioning to the left
 * 3. Required for Webkit to make `height` work
 * 4. Hide controle and show cursor
 * 5. Needed for the cursor
 * 6. Clip height caused by 5. Needed for Webkit only
 */

.x-form-custom select,
.x-form-custom input[type="file"] {
    /* 1 */
    position          : absolute;
    top               : 0;
    z-index           : 1;
    width             : 100%;
    height            : 100%;
    /* 2 */
    left              : 0;
    /* 3 */
    -webkit-appearance: none;
    /* 4 */
    opacity           : 0;
    cursor            : pointer;
}

.x-form-custom input[type="file"] {
    /* 5 */
    font-size: 500px;
    /* 6 */
    overflow : hidden;
}


/* Label
 ========================================================================== */

.x-form-label {
    @if(mixin-exists(hook-form-label)) {
        @include hook-form-label();
    }
}


/* Layout
 ========================================================================== */

/*
 * Stacked
 */

.x-form-stacked .x-form-label {
    display      : block;
    margin-bottom: $form-stacked-margin-bottom;

    @if(mixin-exists(hook-form-stacked-label)) {
        @include hook-form-stacked-label();
    }
}

/*
 * Horizontal
 */

/* Tablet portrait and smaller */
@media (max-width: $breakpoint-small-max) {

    /* Behave like `x-form-stacked` */
    .x-form-horizontal .x-form-label {
        display      : block;
        margin-bottom: $form-stacked-margin-bottom;

        @if(mixin-exists(hook-form-stacked-label)) {
            @include hook-form-stacked-label();
        }
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-form-horizontal .x-form-label {
        width     : $form-horizontal-label-width;
        margin-top: $form-horizontal-label-margin-top;
        float     : left;

        @if(mixin-exists(hook-form-horizontal-label)) {
            @include hook-form-horizontal-label();
        }
    }

    .x-form-horizontal .x-form-controls {
        margin-left: $form-horizontal-controls-margin-left;
    }

    /* Better vertical alignment if controls are checkboxes and radio buttons with text */
    .x-form-horizontal .x-form-controls-text {
        padding-top: $form-horizontal-controls-text-padding-top;
    }

}


/* Icons
 ========================================================================== */

/*
 * 1. Set position
 * 2. Set width
 * 3. Center icon vertically and horizontally
 * 4. Style
 */

.x-form-icon {
    /* 1 */
    position       : absolute;
    top            : 0;
    bottom         : 0;
    left           : 0;
    /* 2 */
    width          : $form-icon-width;
    /* 3 */
    display        : inline-flex;
    justify-content: center;
    align-items    : center;
    /* 4 */
    color          : $form-icon-color;
}

/*
 * Required for `a`.
 */

.x-form-icon:hover {
    color: $form-icon-hover-color;
}

/*
 * Make `input` element clickable through icon, e.g. if it's a `span`
 */

.x-form-icon:not(a):not(button):not(input) {
    pointer-events: none;
}

/*
 * Input padding
 */

.x-form-icon:not(.x-form-icon-flip)~.x-input {
    padding-left: $form-icon-width !important;
}

/*
 * Position modifier
 */

.x-form-icon-flip {
    right: 0;
    left : auto;
}

.x-form-icon-flip~.x-input {
    padding-right: $form-icon-width !important;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-form-misc)) {
    @include hook-form-misc();
}

// @mixin hook-form(){}
// @mixin hook-form-single-line(){}
// @mixin hook-form-multi-line(){}
// @mixin hook-form-focus(){}
// @mixin hook-form-disabled(){}
// @mixin hook-form-danger(){}
// @mixin hook-form-success(){}
// @mixin hook-form-blank(){}
// @mixin hook-form-blank-focus(){}
// @mixin hook-form-radio(){}
// @mixin hook-form-radio-focus(){}
// @mixin hook-form-radio-checked(){}
// @mixin hook-form-radio-checked-focus(){}
// @mixin hook-form-radio-disabled(){}
// @mixin hook-form-legend(){}
// @mixin hook-form-label(){}
// @mixin hook-form-stacked-label(){}
// @mixin hook-form-horizontal-label(){}
// @mixin hook-form-misc(){}


// Inverse
// ========================================================================

$inverse-form-background       : $inverse-global-muted-background !default;
$inverse-form-color            : $inverse-global-color !default;
$inverse-form-focus-background : $inverse-global-muted-background !default;
$inverse-form-focus-color      : $inverse-global-color !default;
$inverse-form-placeholder-color: $inverse-global-muted-color !default;

$inverse-form-select-icon-color: $inverse-global-color !default;

$inverse-form-datalist-icon-color: $inverse-global-color !default;

$inverse-form-radio-background: darken($inverse-global-muted-background, 5%) !default;

$inverse-form-radio-checked-background: $inverse-global-primary-background !default;
$inverse-form-radio-checked-icon-color: $inverse-global-inverse-color !default;

$inverse-form-radio-checked-focus-background: darken($inverse-global-primary-background, 10%) !default;

$inverse-form-icon-color      : $inverse-global-muted-color !default;
$inverse-form-icon-hover-color: $inverse-global-color !default;



// @mixin hook-inverse-form(){}
// @mixin hook-inverse-form-focus(){}
// @mixin hook-inverse-form-radio(){}
// @mixin hook-inverse-form-radio-focus(){}
// @mixin hook-inverse-form-radio-checked(){}
// @mixin hook-inverse-form-radio-checked-focus(){}
// @mixin hook-inverse-form-label(){}

//
// Component: Form
//
// ========================================================================


// Variables
// ========================================================================

$form-line-height:                               $form-height - (2* $form-border-width) !default;

$form-background:                                $global-background !default;
$form-focus-background:                          $global-background !default;

$form-small-line-height:                         $form-small-height - (2* $form-border-width) !default;
$form-large-line-height:                         $form-large-height - (2* $form-border-width) !default;

$form-radio-background:                          transparent !default;

$form-stacked-margin-bottom:                     5px !default;

//
// New
//

$form-border-width:                              $global-border-width !default;
$form-border:                                    $global-border !default;

$form-focus-border:                              $global-primary-background !default;

$form-disabled-border:                           $global-border !default;

$form-danger-border:                             $global-danger-background !default;
$form-success-border:                            $global-success-background !default;

$form-blank-focus-border:                        $global-border !default;
$form-blank-focus-border-style:                  dashed !default;

$form-radio-border-width:                        $global-border-width !default;
$form-radio-border:                              darken($global-border, 10%) !default;

$form-radio-focus-border:                        $global-primary-background !default;

$form-radio-checked-border:                      transparent !default;

$form-radio-disabled-border:                     $global-border !default;

$form-label-color:                               $global-emphasis-color !default;
$form-label-font-size:                           $global-small-font-size !default;


// Component
// ========================================================================



// @mixin hook-form-single-line(){}

// @mixin hook-form-multi-line(){}






// Style modifiers
// ========================================================================










// Radio and checkbox
// ========================================================================







// @mixin hook-form-radio-checked-focus(){}




// Legend
// ========================================================================

// @mixin hook-form-legend(){}


// Label
// ========================================================================




// Layout
// ========================================================================

// @mixin hook-form-stacked-label(){}

// @mixin hook-form-horizontal-label(){}


// Miscellaneous
// ========================================================================

// @mixin hook-form-misc(){}


// Inverse
// ========================================================================

$inverse-form-label-color:                       $inverse-global-emphasis-color !default;








// @mixin hook-inverse-form-radio-checked-focus(){}


// Name:            Grid
// Description:     Component to create two dimensional grids
//
// Component:       `x-grid2`
//
// ========================================================================


// Variables
// ========================================================================

$grid-column-xsmall : 100px !default;
$grid-column-small  : 200px !default;
$grid-column-medium : 300px !default;
$grid-column-large  : 400px !default;
$grid-column-xlarge : 500px !default;
$grid-column-xxlarge: 600px !default;

$grid-gap-small : $global-small-gutter !default;
$grid-gap-medium: $global-gutter !default;
$grid-gap-large : $global-large-gutter !default;


/* ========================================================================
   Component: Grid
 ========================================================================== */

.x-grid-masonry {
  display: grid;
}

.x-grid-inline {
  display: inline-grid;
}


/* Columns Width
 ========================================================================== */

.x-grid-column-xsmall {
  grid-template-columns: repeat(auto-fill, minmax($grid-column-xsmall, 1fr));
}

.x-grid-column-small {
  grid-template-columns: repeat(auto-fill, minmax($grid-column-small, 1fr));
}

.x-grid-column-medium {
  grid-template-columns: repeat(auto-fill, minmax($grid-column-medium, 1fr));
}

.x-grid-column-large {
  grid-template-columns: repeat(auto-fill, minmax($grid-column-large, 1fr));
}

.x-grid-column-xlarge {
  grid-template-columns: repeat(auto-fill, minmax($grid-column-xlarge, 1fr));
}

.x-grid-column-xxlarge {
  grid-template-columns: repeat(auto-fill, minmax($grid-column-xxlarge, 1fr));
}


/* Gap
 ========================================================================== */

.x-grid-gap-none {
  grid-gap: 0;
}

.x-grid-gap-small {
  grid-gap: $grid-gap-small;
}

.x-grid-gap-medium {
  grid-gap: $grid-gap-medium;
}

.x-grid-gap-large {
  grid-gap: $grid-gap-large;
}


/* Auto Placement
 ========================================================================== */

// Default
.x-grid-auto-flow-row {
  grid-auto-flow: row;
}

.x-grid-auto-flow-column {
  grid-auto-flow: column;
}

.x-grid-auto-flow-dense {
  grid-auto-flow: dense;
}


/* Item Span
 ========================================================================== */

// TODO Fix implicit tracks if span is too large
.x-grid-item-span-2 {
  grid-column-start: span 2;
}

.x-grid-item-span-3 {
  grid-column-start: span 3;
}

.x-grid-item-span-4 {
  grid-column-start: span 4;
}

.x-grid-item-span-5 {
  grid-column-start: span 5;
}

// Name:            Grid
// Description:     Component to create responsive, fluid and nestable grids
//
// Component:       `x-grid`
//
// Modifiers:       `x-grid-small`
//                  `x-grid-medium`
//                  `x-grid-large`
//                  `x-grid-collapse`
//                  `x-grid-divider`
//                  `x-grid-match`
//                  `x-grid-stack`
//                  `x-grid-margin`
//                  `x-grid-margin-small`
//                  `x-grid-margin-medium`
//                  `x-grid-margin-large`
//                  `x-grid-margin-collapse`
//
// Sub-modifier:    `x-grid-item-match`
//
// States:          `x-first-column`
//
// ========================================================================


// Variables
// ========================================================================

$grid-gutter-horizontal  : $global-gutter !default;
$grid-gutter-vertical    : $grid-gutter-horizontal !default;
$grid-gutter-horizontal-l: $global-medium-gutter !default;
$grid-gutter-vertical-l  : $grid-gutter-horizontal-l !default;

$grid-small-gutter-horizontal: $global-small-gutter !default;
$grid-small-gutter-vertical  : $grid-small-gutter-horizontal !default;

$grid-medium-gutter-horizontal: $global-gutter !default;
$grid-medium-gutter-vertical  : $grid-medium-gutter-horizontal !default;

$grid-large-gutter-horizontal  : $global-medium-gutter !default;
$grid-large-gutter-vertical    : $grid-large-gutter-horizontal !default;
$grid-large-gutter-horizontal-l: $global-large-gutter !default;
$grid-large-gutter-vertical-l  : $grid-large-gutter-horizontal-l !default;

$grid-divider-border-width: $global-border-width !default;
$grid-divider-border      : $global-border !default;


/* ========================================================================
   Component: Grid
 ========================================================================== */

/*
 * 1. Allow cells to wrap into the next line
 * 2. Reset list
 */

.x-grid {
    display   : flex;
    /* 1 */
    flex-wrap : wrap;
    /* 2 */
    margin    : 0;
    padding   : 0;
    list-style: none;
}

/*
 * Grid cell
 * Note: Space is allocated solely based on content dimensions, but shrinks: 0 1 auto
 * Reset margin for e.g. paragraphs
 */

.x-grid>* {
    margin: 0;
}

/*
 * Remove margin from the last-child
 */

.x-grid>*> :last-child {
    margin-bottom: 0;
}


/* Gutter
 ========================================================================== */

/*
 * Default
 */

/* Horizontal */
.x-grid {
    margin-left: (-$grid-gutter-horizontal);
}

.x-grid>* {
    padding-left: $grid-gutter-horizontal;
}

/* Vertical */
.x-grid+.x-grid,
.x-grid>.x-grid-margin,
*+.x-grid-margin {
    margin-top: $grid-gutter-vertical;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Horizontal */
    .x-grid {
        margin-left: (-$grid-gutter-horizontal-l);
    }

    .x-grid>* {
        padding-left: $grid-gutter-horizontal-l;
    }

    /* Vertical */
    .x-grid+.x-grid,
    .x-grid>.x-grid-margin,
    *+.x-grid-margin {
        margin-top: $grid-gutter-vertical-l;
    }

}

/*
 * Small
 */

/* Horizontal */
.x-grid-small,
.x-grid-column-small {
    margin-left: (-$grid-small-gutter-horizontal);
}

.x-grid-small>*,
.x-grid-column-small>* {
    padding-left: $grid-small-gutter-horizontal;
}

/* Vertical */
.x-grid+.x-grid-small,
.x-grid+.x-grid-row-small,
.x-grid-small>.x-grid-margin,
.x-grid-row-small>.x-grid-margin,
*+.x-grid-margin-small {
    margin-top: $grid-small-gutter-vertical;
}

/*
 * Medium
 */

/* Horizontal */
.x-grid-medium,
.x-grid-column-medium {
    margin-left: (-$grid-medium-gutter-horizontal);
}

.x-grid-medium>*,
.x-grid-column-medium>* {
    padding-left: $grid-medium-gutter-horizontal;
}

/* Vertical */
.x-grid+.x-grid-medium,
.x-grid+.x-grid-row-medium,
.x-grid-medium>.x-grid-margin,
.x-grid-row-medium>.x-grid-margin,
*+.x-grid-margin-medium {
    margin-top: $grid-medium-gutter-vertical;
}

/*
 * Large
 */

/* Horizontal */
.x-grid-large,
.x-grid-column-large {
    margin-left: (-$grid-large-gutter-horizontal);
}

.x-grid-large>*,
.x-grid-column-large>* {
    padding-left: $grid-large-gutter-horizontal;
}

/* Vertical */
.x-grid+.x-grid-large,
.x-grid+.x-grid-row-large,
.x-grid-large>.x-grid-margin,
.x-grid-row-large>.x-grid-margin,
*+.x-grid-margin-large {
    margin-top: $grid-large-gutter-vertical;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Horizontal */
    .x-grid-large,
    .x-grid-column-large {
        margin-left: (-$grid-large-gutter-horizontal-l);
    }

    .x-grid-large>*,
    .x-grid-column-large>* {
        padding-left: $grid-large-gutter-horizontal-l;
    }

    /* Vertical */
    .x-grid+.x-grid-large,
    .x-grid+.x-grid-row-large,
    .x-grid-large>.x-grid-margin,
    .x-grid-row-large>.x-grid-margin,
    *+.x-grid-margin-large {
        margin-top: $grid-large-gutter-vertical-l;
    }

}

/*
 * Collapse
 */

/* Horizontal */
.x-grid-collapse,
.x-grid-column-collapse {
    margin-left: 0;
}

.x-grid-collapse>*,
.x-grid-column-collapse>* {
    padding-left: 0;
}

/* Vertical */
.x-grid+.x-grid-collapse,
.x-grid+.x-grid-row-collapse,
.x-grid-collapse>.x-grid-margin,
.x-grid-row-collapse>.x-grid-margin {
    margin-top: 0;
}


/* Divider
 ========================================================================== */

.x-grid-divider>* {
    position: relative;
}

.x-grid-divider> :not(.x-first-column)::before {
    content    : "";
    position   : absolute;
    top        : 0;
    bottom     : 0;
    border-left: $grid-divider-border-width solid $grid-divider-border;
}

/* Vertical */
.x-grid-divider.x-grid-stack>.x-grid-margin::before {
    content   : "";
    position  : absolute;
    left      : 0;
    right     : 0;
    border-top: $grid-divider-border-width solid $grid-divider-border;
}

/*
 * Default
 */

/* Horizontal */
.x-grid-divider {
    margin-left: -($grid-gutter-horizontal * 2);
}

.x-grid-divider>* {
    padding-left: ($grid-gutter-horizontal * 2);
}

.x-grid-divider> :not(.x-first-column)::before {
    left: $grid-gutter-horizontal;
}

/* Vertical */
.x-grid-divider.x-grid-stack>.x-grid-margin {
    margin-top: ($grid-gutter-vertical * 2);
}

.x-grid-divider.x-grid-stack>.x-grid-margin::before {
    top : (-$grid-gutter-vertical);
    left: ($grid-gutter-horizontal * 2);
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Horizontal */
    .x-grid-divider {
        margin-left: -($grid-gutter-horizontal-l * 2);
    }

    .x-grid-divider>* {
        padding-left: ($grid-gutter-horizontal-l * 2);
    }

    .x-grid-divider> :not(.x-first-column)::before {
        left: $grid-gutter-horizontal-l;
    }

    /* Vertical */
    .x-grid-divider.x-grid-stack>.x-grid-margin {
        margin-top: ($grid-gutter-vertical-l * 2);
    }

    .x-grid-divider.x-grid-stack>.x-grid-margin::before {
        top : (-$grid-gutter-vertical-l);
        left: ($grid-gutter-horizontal-l * 2);
    }

}

/*
 * Small
 */

/* Horizontal */
.x-grid-divider.x-grid-small,
.x-grid-divider.x-grid-column-small {
    margin-left: -($grid-small-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-small>*,
.x-grid-divider.x-grid-column-small>* {
    padding-left: ($grid-small-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-small> :not(.x-first-column)::before,
.x-grid-divider.x-grid-column-small> :not(.x-first-column)::before {
    left: $grid-small-gutter-horizontal;
}

/* Vertical */
.x-grid-divider.x-grid-small.x-grid-stack>.x-grid-margin,
.x-grid-divider.x-grid-row-small.x-grid-stack>.x-grid-margin {
    margin-top: ($grid-small-gutter-vertical * 2);
}

.x-grid-divider.x-grid-small.x-grid-stack>.x-grid-margin::before {
    top : (-$grid-small-gutter-vertical);
    left: ($grid-small-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-row-small.x-grid-stack>.x-grid-margin::before {
    top: (-$grid-small-gutter-vertical);
}

.x-grid-divider.x-grid-column-small.x-grid-stack>.x-grid-margin::before {
    left: ($grid-small-gutter-horizontal * 2);
}

/*
 * Medium
 */

/* Horizontal */
.x-grid-divider.x-grid-medium,
.x-grid-divider.x-grid-column-medium {
    margin-left: -($grid-medium-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-medium>*,
.x-grid-divider.x-grid-column-medium>* {
    padding-left: ($grid-medium-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-medium> :not(.x-first-column)::before,
.x-grid-divider.x-grid-column-medium> :not(.x-first-column)::before {
    left: $grid-medium-gutter-horizontal;
}

/* Vertical */
.x-grid-divider.x-grid-medium.x-grid-stack>.x-grid-margin,
.x-grid-divider.x-grid-row-medium.x-grid-stack>.x-grid-margin {
    margin-top: ($grid-medium-gutter-vertical * 2);
}

.x-grid-divider.x-grid-medium.x-grid-stack>.x-grid-margin::before {
    top : (-$grid-medium-gutter-vertical);
    left: ($grid-medium-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-row-medium.x-grid-stack>.x-grid-margin::before {
    top: (-$grid-medium-gutter-vertical);
}

.x-grid-divider.x-grid-column-medium.x-grid-stack>.x-grid-margin::before {
    left: ($grid-medium-gutter-horizontal * 2);
}

/*
 * Large
 */

/* Horizontal */
.x-grid-divider.x-grid-large,
.x-grid-divider.x-grid-column-large {
    margin-left: -($grid-large-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-large>*,
.x-grid-divider.x-grid-column-large>* {
    padding-left: ($grid-large-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-large> :not(.x-first-column)::before,
.x-grid-divider.x-grid-column-large> :not(.x-first-column)::before {
    left: $grid-large-gutter-horizontal;
}

/* Vertical */
.x-grid-divider.x-grid-large.x-grid-stack>.x-grid-margin,
.x-grid-divider.x-grid-row-large.x-grid-stack>.x-grid-margin {
    margin-top: ($grid-large-gutter-vertical * 2);
}

.x-grid-divider.x-grid-large.x-grid-stack>.x-grid-margin::before {
    top : (-$grid-large-gutter-vertical);
    left: ($grid-large-gutter-horizontal * 2);
}

.x-grid-divider.x-grid-row-large.x-grid-stack>.x-grid-margin::before {
    top: (-$grid-large-gutter-vertical);
}

.x-grid-divider.x-grid-column-large.x-grid-stack>.x-grid-margin::before {
    left: ($grid-large-gutter-horizontal * 2);
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Horizontal */
    .x-grid-divider.x-grid-large,
    .x-grid-divider.x-grid-column-large {
        margin-left: -($grid-large-gutter-horizontal-l * 2);
    }

    .x-grid-divider.x-grid-large>*,
    .x-grid-divider.x-grid-column-large>* {
        padding-left: ($grid-large-gutter-horizontal-l * 2);
    }

    .x-grid-divider.x-grid-large> :not(.x-first-column)::before,
    .x-grid-divider.x-grid-column-large> :not(.x-first-column)::before {
        left: $grid-large-gutter-horizontal-l;
    }

    /* Vertical */
    .x-grid-divider.x-grid-large.x-grid-stack>.x-grid-margin,
    .x-grid-divider.x-grid-row-large.x-grid-stack>.x-grid-margin {
        margin-top: ($grid-large-gutter-vertical-l * 2);
    }

    .x-grid-divider.x-grid-large.x-grid-stack>.x-grid-margin::before {
        top : (-$grid-large-gutter-vertical-l);
        left: ($grid-large-gutter-horizontal-l * 2);
    }

    .x-grid-divider.x-grid-row-large.x-grid-stack>.x-grid-margin::before {
        top: (-$grid-large-gutter-vertical-l);
    }

    .x-grid-divider.x-grid-column-large.x-grid-stack>.x-grid-margin::before {
        left: ($grid-large-gutter-horizontal-l * 2);
    }

}


/* Match child of a grid cell
 ========================================================================== */

/*
 * Behave like a block element
 * 1. Wrap into the next line
 * 2. Take the full width, at least 100%. Only if no class from the Width component is set.
 * 3. Expand width even if larger than 100%, e.g. because of negative margin (Needed for nested grids)
 */

.x-grid-match>*,
.x-grid-item-match {
    display  : flex;
    /* 1 */
    flex-wrap: wrap;
}

.x-grid-match>*> :not([class*='x-width']),
.x-grid-item-match> :not([class*='x-width']) {
    /* 2 */
    box-sizing: border-box;
    width     : 100%;
    /* 3 */
    flex      : auto;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-grid-misc)) {
    @include hook-grid-misc();
}

// @mixin hook-grid-misc(){}


// Inverse
// ========================================================================

$inverse-grid-divider-border: $inverse-global-border !default;

//
// Component: Grid
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-grid-misc(){}
// Name:            Heading
// Description:     Styles for headings
//
// Component:       `x-heading-primary`
//                  `x-heading-hero`
//                  `x-heading-divider`
//                  `x-heading-bullet`
//                  `x-heading-line`
//
// ========================================================================


// Variables
// ========================================================================

$heading-small-font-size  : $heading-small-font-size-m * 0.8 !default; // 38px 0.73
$heading-medium-font-size : $heading-medium-font-size-m * 0.825 !default; // 40px 0.714
$heading-large-font-size  : $heading-large-font-size-m * 0.85 !default; // 50px 0.78
$heading-xlarge-font-size : $heading-large-font-size-m !default; // 4rem / 64px
$heading-2xlarge-font-size: $heading-xlarge-font-size-m !default; // 6rem / 96px

$heading-small-font-size-m  : $heading-medium-font-size-l * 0.8125 !default; // 3.25rem / 52px
$heading-medium-font-size-m : $heading-medium-font-size-l * 0.875 !default; // 3.5rem / 56px
$heading-large-font-size-m  : $heading-medium-font-size-l !default; // 4rem / 64px
$heading-xlarge-font-size-m : $heading-large-font-size-l !default; // 6rem / 96px
$heading-2xlarge-font-size-m: $heading-xlarge-font-size-l !default; // 8rem / 128px

$heading-medium-font-size-l : 4rem !default; // 64px
$heading-large-font-size-l  : 6rem !default; // 96px
$heading-xlarge-font-size-l : 8rem !default; // 128px
$heading-2xlarge-font-size-l: 11rem !default; // 176px

$heading-small-line-height  : 1.2 !default;
$heading-medium-line-height : 1.1 !default;
$heading-large-line-height  : 1.1 !default;
$heading-xlarge-line-height : 1 !default;
$heading-2xlarge-line-height: 1 !default;

$heading-divider-padding-bottom: unquote('calc(5px + 0.1em)') !default;
$heading-divider-border-width  : unquote('calc(0.2px + 0.05em)') !default;
$heading-divider-border        : $global-border !default;

$heading-bullet-top         : unquote('calc(-0.1 * 1em)') !default;
$heading-bullet-height      : unquote('calc(4px + 0.7em)') !default;
$heading-bullet-margin-right: unquote('calc(5px + 0.2em)') !default;
$heading-bullet-border-width: unquote('calc(5px + 0.1em)') !default;
$heading-bullet-border      : $global-border !default;

$heading-line-top              : 50% !default;
$heading-line-height           : $heading-line-border-width !default;
$heading-line-width            : 2000px !default;
$heading-line-border-width     : unquote('calc(0.2px + 0.05em)') !default;
$heading-line-border           : $global-border !default;
$heading-line-margin-horizontal: unquote('calc(5px + 0.3em)') !default;


/* ========================================================================
   Component: Heading
 ========================================================================== */

.x-heading-small {
    font-size  : $heading-small-font-size;
    line-height: $heading-small-line-height;

    @if(mixin-exists(hook-heading-small)) {
        @include hook-heading-small();
    }
}

.x-heading-medium {
    font-size  : $heading-medium-font-size;
    line-height: $heading-medium-line-height;

    @if(mixin-exists(hook-heading-medium)) {
        @include hook-heading-medium();
    }
}

.x-heading-large {
    font-size  : $heading-large-font-size;
    line-height: $heading-large-line-height;

    @if(mixin-exists(hook-heading-large)) {
        @include hook-heading-large();
    }
}

.x-heading-xlarge {
    font-size  : $heading-xlarge-font-size;
    line-height: $heading-xlarge-line-height;

    @if(mixin-exists(hook-heading-xlarge)) {
        @include hook-heading-xlarge();
    }
}

.x-heading-2xlarge {
    font-size  : $heading-2xlarge-font-size;
    line-height: $heading-2xlarge-line-height;

    @if(mixin-exists(hook-heading-2xlarge)) {
        @include hook-heading-2xlarge();
    }
}

/* Tablet Landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-heading-small {
        font-size: $heading-small-font-size-m;
    }

    .x-heading-medium {
        font-size: $heading-medium-font-size-m;
    }

    .x-heading-large {
        font-size: $heading-large-font-size-m;
    }

    .x-heading-xlarge {
        font-size: $heading-xlarge-font-size-m;
    }

    .x-heading-2xlarge {
        font-size: $heading-2xlarge-font-size-m;
    }

}

/* Laptop and bigger */
@media (min-width: $breakpoint-large) {

    .x-heading-medium {
        font-size: $heading-medium-font-size-l;
    }

    .x-heading-large {
        font-size: $heading-large-font-size-l;
    }

    .x-heading-xlarge {
        font-size: $heading-xlarge-font-size-l;
    }

    .x-heading-2xlarge {
        font-size: $heading-2xlarge-font-size-l;
    }

}


/* Primary
   Deprecated: Use `x-heading-medium` instead
 ========================================================================== */

$heading-primary-font-size-l  : 3.75rem !default; // 60px
$heading-primary-line-height-l: 1.1 !default;

$heading-primary-font-size-m: $heading-primary-font-size-l * 0.9 !default; // 54px

$heading-primary-font-size  : $heading-primary-font-size-l * 0.8 !default; // 48px
$heading-primary-line-height: 1.2 !default;

@if ($deprecated==true) {
    .x-heading-primary {
        font-size  : $heading-primary-font-size;
        line-height: $heading-primary-line-height;

        @if(mixin-exists(hook-heading-primary)) {
            @include hook-heading-primary();
        }
    }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    @if ($deprecated==true) {
        .x-heading-primary {
            font-size: $heading-primary-font-size-m;
        }
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    @if ($deprecated==true) {
        .x-heading-primary {
            font-size  : $heading-primary-font-size-l;
            line-height: $heading-primary-line-height-l;
        }
    }

}


/* Hero
   Deprecated: Use `x-heading-xlarge` instead
 ========================================================================== */

$heading-hero-font-size-l  : 8rem !default; // 128px
$heading-hero-line-height-l: 1 !default;

$heading-hero-font-size-m  : $heading-hero-font-size-l * 0.75 !default; // 96px
$heading-hero-line-height-m: 1 !default;

$heading-hero-font-size  : $heading-hero-font-size-l * 0.5 !default; // 64px
$heading-hero-line-height: 1.1 !default;

@if ($deprecated==true) {
    .x-heading-hero {
        font-size  : $heading-hero-font-size;
        line-height: $heading-hero-line-height;

        @if(mixin-exists(hook-heading-hero)) {
            @include hook-heading-hero();
        }
    }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    @if ($deprecated==true) {
        .x-heading-hero {
            font-size  : $heading-hero-font-size-m;
            line-height: $heading-hero-line-height-m;
        }
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    @if ($deprecated==true) {
        .x-heading-hero {
            font-size  : $heading-hero-font-size-l;
            line-height: $heading-hero-line-height-l;
        }
    }

}


/* Divider
 ========================================================================== */

.x-heading-divider {
    padding-bottom: $heading-divider-padding-bottom;
    border-bottom : $heading-divider-border-width solid $heading-divider-border;

    @if(mixin-exists(hook-heading-divider)) {
        @include hook-heading-divider();
    }
}


/* Bullet
 ========================================================================== */

.x-heading-bullet {
    position: relative;
}

/*
 * 1. Using `inline-block` to make it work with text alignment
 * 2. Center vertically
 * 3. Style
 */

.x-heading-bullet::before {
    content       : "";
    /* 1 */
    display       : inline-block;
    /* 2 */
    position      : relative;
    top           : $heading-bullet-top;
    vertical-align: middle;
    /* 3 */
    height        : $heading-bullet-height;
    margin-right  : $heading-bullet-margin-right;
    border-left   : $heading-bullet-border-width solid $heading-bullet-border;

    @if(mixin-exists(hook-heading-bullet)) {
        @include hook-heading-bullet();
    }
}


/* Line
 ========================================================================== */

/*
 * Clip the child element
 */

.x-heading-line {
    overflow: hidden;
}

/*
 * Extra markup is needed to make it work with text align
 */

.x-heading-line>* {
    display : inline-block;
    position: relative;
}

/*
 * 1. Center vertically
 * 2. Make the element as large as possible. It's clipped by the container.
 * 3. Style
 */

.x-heading-line> ::before,
.x-heading-line> ::after {
    content      : "";
    /* 1 */
    position     : absolute;
    top          : unquote('calc(#{$heading-line-top} - (#{$heading-line-height} / 2))');
    /* 2 */
    width        : $heading-line-width;
    /* 3 */
    border-bottom: $heading-line-border-width solid $heading-line-border;

    @if(mixin-exists(hook-heading-line)) {
        @include hook-heading-line();
    }
}

.x-heading-line> ::before {
    right       : 100%;
    margin-right: $heading-line-margin-horizontal;
}

.x-heading-line> ::after {
    left       : 100%;
    margin-left: $heading-line-margin-horizontal;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-heading-misc)) {
    @include hook-heading-misc();
}

// @mixin hook-heading-small(){}
// @mixin hook-heading-medium(){}
// @mixin hook-heading-large(){}
// @mixin hook-heading-xlarge(){}
// @mixin hook-heading-2xlarge(){}
// @mixin hook-heading-primary(){}
// @mixin hook-heading-hero(){}
// @mixin hook-heading-divider(){}
// @mixin hook-heading-bullet(){}
// @mixin hook-heading-line(){}
// @mixin hook-heading-misc(){}


// Inverse
// ========================================================================

$inverse-heading-divider-border: $inverse-global-border !default;
$inverse-heading-bullet-border : $inverse-global-border !default;
$inverse-heading-line-border   : $inverse-global-border !default;



// @mixin hook-inverse-heading-small(){}
// @mixin hook-inverse-heading-medium(){}
// @mixin hook-inverse-heading-large(){}
// @mixin hook-inverse-heading-xlarge(){}
// @mixin hook-inverse-heading-2xlarge(){}
// @mixin hook-inverse-heading-primary(){}
// @mixin hook-inverse-heading-hero(){}
// @mixin hook-inverse-heading-divider(){}
// @mixin hook-inverse-heading-bullet(){}
// @mixin hook-inverse-heading-line(){}

//
// Component: Heading
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-heading-small(){}

// @mixin hook-heading-medium(){}

// @mixin hook-heading-large(){}

// @mixin hook-heading-xlarge(){}

// @mixin hook-heading-2xlarge(){}


// Divider
// ========================================================================

// @mixin hook-heading-divider(){}


// Bullet
// ========================================================================

// @mixin hook-heading-bullet(){}


// Line
// ========================================================================

// @mixin hook-heading-line(){}



// Miscellaneous
// ========================================================================

// @mixin hook-heading-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-heading-small(){}

// @mixin hook-inverse-heading-medium(){}

// @mixin hook-inverse-heading-large(){}

// @mixin hook-inverse-heading-xlarge(){}

// @mixin hook-inverse-heading-2xlarge(){}

// @mixin hook-inverse-heading-divider(){}

// @mixin hook-inverse-heading-bullet(){}

// @mixin hook-inverse-heading-line(){}

// Name:            Icon
// Description:     Component to create icons
//
// Component:       `x-icon`
//
// Modifiers:       `x-icon-image`
//                  `x-icon-link`
//                  `x-icon-button`
//
// States:          `x-preserve`
//
// ========================================================================


// Variables
// ========================================================================

$icon-image-size: 20px !default;

$icon-link-color       : $global-muted-color !default;
$icon-link-hover-color : $global-color !default;
$icon-link-active-color: darken($global-color, 5%) !default;

$icon-button-size         : 36px !default;
$icon-button-border-radius: 500px !default;
$icon-button-background   : $global-muted-background !default;
$icon-button-color        : $global-muted-color !default;

$icon-button-hover-background: darken($icon-button-background, 5%) !default;
$icon-button-hover-color     : $global-color !default;

$icon-button-active-background: darken($icon-button-background, 10%) !default;
$icon-button-active-color     : $global-color !default;


/* ========================================================================
   Component: Icon
 ========================================================================== */

/*
 * Note: 1. - 7. is required for `button` elements. Needed for Close and Form Icon component.
 * 1. Remove margins in Chrome, Safari and Opera.
 * 2. Remove borders for `button`.
 * 3. Remove border-radius in Chrome.
 * 4. Address `overflow` set to `hidden` in IE.
 * 5. Correct `font` properties and `color` not being inherited for `button`.
 * 6. Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 7. Remove default `button` padding and background color
 * 8. Style
 * 9. Fill all SVG elements with the current text color if no `fill` attribute is set
 * 10. Let the container fit the height of the icon
 */

.x-icon {
    /* 1 */
    margin          : 0;
    /* 2 */
    border          : none;
    /* 3 */
    border-radius   : 0;
    /* 4 */
    overflow        : visible;
    /* 5 */
    font            : inherit;
    color           : inherit;
    /* 6 */
    text-transform  : none;
    /* 7. */
    padding         : 0;
    background-color: transparent;
    /* 8 */
    display         : inline-block;
    /* 9 */
    fill            : currentcolor;
    /* 10 */
    line-height     : 0;
}

/* Required for `button`. */
button.x-icon:not(:disabled) {
    cursor: pointer;
}

/*
 * Remove the inner border and padding in Firefox.
 */

.x-icon::-moz-focus-inner {
    border : 0;
    padding: 0;
}

/*
 * Set the fill and stroke color of all SVG elements to the current text color
 */

.x-icon:not(.x-preserve) [fill*='#']:not(.x-preserve) {
    fill: currentcolor;
}

.x-icon:not(.x-preserve) [stroke*='#']:not(.x-preserve) {
    stroke: currentcolor;
}

/*
 * Fix Firefox blurry SVG rendering: https://bugzilla.mozilla.org/show_bug.cgi?id=1046835
 */

.x-icon>* {
    transform: translate(0, 0);
}


/* Image modifier
 ========================================================================== */

/*
 * Display images in icon dimensions
 */

.x-icon-image {
    width              : $icon-image-size;
    height             : $icon-image-size;
    background-position: 50% 50%;
    background-repeat  : no-repeat;
    background-size    : contain;
    vertical-align     : middle;
}


/* Style modifiers
 ========================================================================== */

/*
 * Link
 */

.x-icon-link {
    color: $icon-link-color;

    @if(mixin-exists(hook-icon-link)) {
        @include hook-icon-link();
    }
}

.x-icon-link:hover,
.x-icon-link:focus {
    color  : $icon-link-hover-color;
    outline: none;

    @if(mixin-exists(hook-icon-link-hover)) {
        @include hook-icon-link-hover();
    }
}

/* OnClick + Active */
.x-icon-link:active,
.x-active>.x-icon-link {
    color: $icon-link-active-color;

    @if(mixin-exists(hook-icon-link-active)) {
        @include hook-icon-link-active();
    }
}

/*
 * Button
 * 1. Center icon vertically and horizontally
 */

.x-icon-button {
    box-sizing     : border-box;
    width          : $icon-button-size;
    height         : $icon-button-size;
    border-radius  : $icon-button-border-radius;
    background     : $icon-button-background;
    color          : $icon-button-color;
    vertical-align : middle;
    /* 1 */
    display        : inline-flex;
    justify-content: center;
    align-items    : center;

    @if(mixin-exists(hook-icon-button)) {
        @include hook-icon-button();
    }
}

/* Hover + Focus */
.x-icon-button:hover,
.x-icon-button:focus {
    background-color: $icon-button-hover-background;
    color           : $icon-button-hover-color;
    outline         : none;

    @if(mixin-exists(hook-icon-button-hover)) {
        @include hook-icon-button-hover();
    }
}

/* OnClick + Active */
.x-icon-button:active,
.x-active>.x-icon-button {
    background-color: $icon-button-active-background;
    color           : $icon-button-active-color;

    @if(mixin-exists(hook-icon-button-active)) {
        @include hook-icon-button-active();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-icon-misc)) {
    @include hook-icon-misc();
}

// @mixin hook-icon-link(){}
// @mixin hook-icon-link-hover(){}
// @mixin hook-icon-link-active(){}
// @mixin hook-icon-button(){}
// @mixin hook-icon-button-hover(){}
// @mixin hook-icon-button-active(){}
// @mixin hook-icon-misc(){}


// Inverse
// ========================================================================

$inverse-icon-link-color              : $inverse-global-muted-color !default;
$inverse-icon-link-hover-color        : $inverse-global-color !default;
$inverse-icon-link-active-color       : $inverse-global-color !default;
$inverse-icon-button-background       : $inverse-global-muted-background !default;
$inverse-icon-button-color            : $inverse-global-muted-color !default;
$inverse-icon-button-hover-background : darken($inverse-icon-button-background, 5%) !default;
$inverse-icon-button-hover-color      : $inverse-global-color !default;
$inverse-icon-button-active-background: darken($inverse-icon-button-background, 10%) !default;
$inverse-icon-button-active-color     : $inverse-global-color !default;



// @mixin hook-inverse-icon-link(){}
// @mixin hook-inverse-icon-link-hover(){}
// @mixin hook-inverse-icon-link-active(){}
// @mixin hook-inverse-icon-button(){}
// @mixin hook-inverse-icon-button-hover(){}
// @mixin hook-inverse-icon-button-active(){}

//
// Component: Icon
//
// ========================================================================


// Variables
// ========================================================================


// Style modifiers
// ========================================================================

//
// Link
//

// @mixin hook-icon-link(){}

// @mixin hook-icon-link-hover(){}

// @mixin hook-icon-link-active(){}

//
// Button
//



// @mixin hook-icon-button-hover(){}

// @mixin hook-icon-button-active(){}


// Miscellaneous
// ========================================================================

// @mixin hook-icon-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-icon-link(){}
// @mixin hook-inverse-icon-link-hover(){}
// @mixin hook-inverse-icon-link-active(){}

// @mixin hook-inverse-icon-button(){}
// @mixin hook-inverse-icon-button-hover(){}
// @mixin hook-inverse-icon-button-active(){}
// Name:            Iconnav
// Description:     Component to create icon navigations
//
// Component:       `x-iconnav`
//
// Modifier:        `x-iconnav-vertical`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$iconnav-margin-horizontal: $global-small-margin !default;
$iconnav-margin-vertical  : $iconnav-margin-horizontal !default;

$iconnav-item-color: $global-muted-color !default;

$iconnav-item-hover-color: $global-color !default;

$iconnav-item-active-color: $global-color !default;


/* ========================================================================
   Component: Iconnav
 ========================================================================== */

/*
 * 1. Allow items to wrap into the next line
 * 2. Reset list
 * 3. Gutter
 */

.x-iconnav {
    display    : flex;
    /* 1 */
    flex-wrap  : wrap;
    /* 2 */
    margin     : 0;
    padding    : 0;
    list-style : none;
    /* 3 */
    margin-left: (-$iconnav-margin-horizontal);

    @if(mixin-exists(hook-iconnav)) {
        @include hook-iconnav();
    }
}

/*
 * Space is allocated based on content dimensions, but shrinks: 0 1 auto
 * 1. Gutter
 */

.x-iconnav>* {
    /* 1 */
    padding-left: $iconnav-margin-horizontal;
}


/* Items
 ========================================================================== */

/*
 * Items must target `a` elements to exclude other elements (e.g. dropdowns)
 * 1. Prevent gap if child element is `inline-block`, e.g. an icon
 * 2. Style
 */

.x-iconnav>*>a {
    /* 1 */
    display: block;
    /* 2 */
    color  : $iconnav-item-color;

    @if(mixin-exists(hook-iconnav-item)) {
        @include hook-iconnav-item();
    }
}

/* Hover + Focus */
.x-iconnav>*>a:hover,
.x-iconnav>*>a:focus {
    color  : $iconnav-item-hover-color;
    outline: none;

    @if(mixin-exists(hook-iconnav-item-hover)) {
        @include hook-iconnav-item-hover();
    }
}

/* Active */
.x-iconnav>.x-active>a {
    color: $iconnav-item-active-color;

    @if(mixin-exists(hook-iconnav-item-active)) {
        @include hook-iconnav-item-active();
    }
}


/* Modifier: 'x-iconnav-vertical'
 ========================================================================== */

/*
 * 1. Change direction
 * 2. Gutter
 */

.x-iconnav-vertical {
    /* 1 */
    flex-direction: column;
    /* 2 */
    margin-left   : 0;
    margin-top    : (-$iconnav-margin-vertical);
}

/* 2 */
.x-iconnav-vertical>* {
    padding-left: 0;
    padding-top : $iconnav-margin-vertical;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-iconnav-misc)) {
    @include hook-iconnav-misc();
}

// @mixin hook-iconnav(){}
// @mixin hook-iconnav-item(){}
// @mixin hook-iconnav-item-hover(){}
// @mixin hook-iconnav-item-active(){}
// @mixin hook-iconnav-misc(){}


// Inverse
// ========================================================================

$inverse-iconnav-item-color       : $inverse-global-muted-color !default;
$inverse-iconnav-item-hover-color : $inverse-global-color !default;
$inverse-iconnav-item-active-color: $inverse-global-color !default;



// @mixin hook-inverse-iconnav-item(){}
// @mixin hook-inverse-iconnav-item-hover(){}
// @mixin hook-inverse-iconnav-item-active(){}

//
// Component: Iconnav
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-iconnav(){}

// @mixin hook-iconnav-item(){}

// @mixin hook-iconnav-item-hover(){}

// @mixin hook-iconnav-item-active(){}


// Miscellaneous
// ========================================================================

// @mixin hook-iconnav-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-iconnav-item(){}
// @mixin hook-inverse-iconnav-item-hover(){}
// @mixin hook-inverse-iconnav-item-active(){}
// Name:            Inverse
// Description:     Inverse component style for light or dark backgrounds
//
// Component:       `x-light`
//                  `x-dark`
//
// ========================================================================


// Variables
// ========================================================================

$inverse-global-color-mode: light !default;

$inverse-global-color         : rgba($global-inverse-color, 0.7) !default;
$inverse-global-emphasis-color: $global-inverse-color !default;
$inverse-global-muted-color   : rgba($global-inverse-color, 0.5) !default;
$inverse-global-inverse-color : $global-color !default;

$inverse-global-primary-background: $global-inverse-color !default;
$inverse-global-muted-background  : rgba($global-inverse-color, 0.1) !default;

$inverse-global-border: rgba($global-inverse-color, 0.2) !default;


/* ========================================================================
   Component: Inverse
 ========================================================================== */



/*
 * Implemented class depends on the general theme color
 * `x-light` is for light colors on dark backgrounds
 * `x-dark` is or dark colors on light backgrounds
 */

@if ($inverse-global-color-mode==light) {
  .x-light {
    @if (mixin-exists(hook-inverse)) {
      @include hook-inverse();
    }
  }
}

@if ($inverse-global-color-mode==dark) {
  .x-dark {
    @if (mixin-exists(hook-inverse)) {
      @include hook-inverse();
    }
  }
}


// Hooks
// ========================================================================

// @mixin hook-inverse(){}

//
// Component: Inverse
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-inverse(){}
// Name:            Label
// Description:     Component to indicate important notes
//
// Component:       `x-label`
//
// Modifiers:       `x-label-success`
//                  `x-label-warning`
//                  `x-label-danger`
//
// ========================================================================


// Variables
// ========================================================================

$label-padding-vertical  : 0 !default;
$label-padding-horizontal: $global-small-margin !default;
$label-background        : $global-primary-background !default;
$label-line-height       : $global-line-height !default;
$label-font-size         : $global-small-font-size !default;
$label-color             : $global-inverse-color !default;

$label-success-background: $global-success-background !default;
$label-success-color     : $global-inverse-color !default;
$label-warning-background: $global-warning-background !default;
$label-warning-color     : $global-inverse-color !default;
$label-danger-background : $global-danger-background !default;
$label-danger-color      : $global-inverse-color !default;


/* ========================================================================
   Component: Label
 ========================================================================== */

.x-label {
    display       : inline-block;
    padding       : $label-padding-vertical $label-padding-horizontal;
    background    : $label-background;
    line-height   : $label-line-height;
    font-size     : $label-font-size;
    color         : $label-color;
    vertical-align: middle;
    white-space   : nowrap;

    @if(mixin-exists(hook-label)) {
        @include hook-label();
    }
}


/* Color modifiers
 ========================================================================== */

/*
 * Success
 */

.x-label-success {
    background-color: $label-success-background;
    color           : $label-success-color;

    @if(mixin-exists(hook-label-success)) {
        @include hook-label-success();
    }
}

/*
 * Warning
 */

.x-label-warning {
    background-color: $label-warning-background;
    color           : $label-warning-color;

    @if(mixin-exists(hook-label-warning)) {
        @include hook-label-warning();
    }
}

/*
 * Danger
 */

.x-label-danger {
    background-color: $label-danger-background;
    color           : $label-danger-color;

    @if(mixin-exists(hook-label-danger)) {
        @include hook-label-danger();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-label-misc)) {
    @include hook-label-misc();
}

// @mixin hook-label(){}
// @mixin hook-label-success(){}
// @mixin hook-label-warning(){}
// @mixin hook-label-danger(){}
// @mixin hook-label-misc(){}


// Inverse
// ========================================================================

$inverse-label-background: $inverse-global-primary-background !default;
$inverse-label-color     : $inverse-global-inverse-color !default;



// @mixin hook-inverse-label(){}

//
// Component: Label
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$label-border-radius:                            2px !default;
$label-text-transform:                           uppercase !default;


// Component
// ========================================================================




// Color modifiers
// ========================================================================

// @mixin hook-label-success(){}

// @mixin hook-label-warning(){}

// @mixin hook-label-danger(){}


// Miscellaneous
// ========================================================================

// @mixin hook-label-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-label(){}
// Name:            Leader
// Description:     Component to create dot leaders
//
// Component:       `x-leader`
//
// ========================================================================


// Variables
// ========================================================================

$leader-fill-content    : unquote('.') !default;
$leader-fill-margin-left: $global-small-gutter !default;


/* ========================================================================
   Component: Leader
 ========================================================================== */

.x-leader {
  overflow: hidden;
}

/*
 * 1. Place element in text flow
 * 2. Never break into a new line
 * 3. Get a string back with as many repeating characters to fill the container
 * 4. Prevent wrapping. Overflowing characters will be clipped by the container
 */

.x-leader-fill::after {
  /* 1 */
  display    : inline-block;
  margin-left: $leader-fill-margin-left;
  /* 2 */
  width      : 0;
  /* 3 */
  content    : attr(data-fill);
  /* 4 */
  white-space: nowrap;

  @if(mixin-exists(hook-leader)) {
    @include hook-leader();
  }
}

/*
 * Hide if media does not match
 */

.x-leader-fill.x-leader-hide::after {
  display: none;
}

/*
 * Pass fill character to JS
 */

.x-leader-fill-content::before {
  content: '#{$leader-fill-content}';
}

:root {
  --x-leader-fill-content: #{$leader-fill-content};
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-leader-misc)) {
  @include hook-leader-misc();
}

// @mixin hook-leader(){}
// @mixin hook-leader-misc(){}


// Inverse
// ========================================================================



// @mixin hook-inverse-leader(){}

//
// Component: Leader
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-leader(){}


// Miscellaneous
// ========================================================================

// @mixin hook-leader-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-leader(){}
// Name:            Lightbox
// Description:     Component to create an lightbox image gallery
//
// Component:       `x-lightbox`
//
// Sub-objects:     `x-lightbox-page`
//                  `x-lightbox-items`
//                  `x-lightbox-toolbar`
//                  `x-lightbox-toolbar-icon`
//                  `x-lightbox-button`
//                  `x-lightbox-caption`
//                  `x-lightbox-iframe`
//
// States:          `x-open`
//
// ========================================================================


// Variables
// ========================================================================

$lightbox-z-index   : $global-z-index+10 !default;
$lightbox-background: #000 !default;

$lightbox-item-color     : rgba(255, 255, 255, 0.7) !default;
$lightbox-item-max-width : 100vw !default;
$lightbox-item-max-height: 100vh !default;

$lightbox-toolbar-padding-vertical  : 10px !default;
$lightbox-toolbar-padding-horizontal: 10px !default;
$lightbox-toolbar-background        : rgba(0, 0, 0, 0.3) !default;
$lightbox-toolbar-color             : rgba(255, 255, 255, 0.7) !default;

$lightbox-toolbar-icon-padding: 5px !default;
$lightbox-toolbar-icon-color  : rgba(255, 255, 255, 0.7) !default;

$lightbox-toolbar-icon-hover-color: #fff !default;

$lightbox-button-size      : 50px !default;
$lightbox-button-background: $lightbox-toolbar-background !default;
$lightbox-button-color     : rgba(255, 255, 255, 0.7) !default;

$lightbox-button-hover-color: #fff !default;


/* ========================================================================
   Component: Lightbox
 ========================================================================== */

/*
 * 1. Hide by default
 * 2. Set position
 * 3. Allow scrolling for the modal dialog
 * 4. Horizontal padding
 * 5. Mask the background page
 * 6. Fade-in transition
 * 7. Prevent cancellation of pointer events while dragging
 */

.x-lightbox {
    /* 1 */
    display     : none;
    /* 2 */
    position    : fixed;
    top         : 0;
    right       : 0;
    bottom      : 0;
    left        : 0;
    z-index     : $lightbox-z-index;
    /* 5 */
    background  : $lightbox-background;
    /* 6 */
    opacity     : 0;
    transition  : opacity 0.15s linear;
    /* 7 */
    touch-action: pinch-zoom;

    @if(mixin-exists(hook-lightbox)) {
        @include hook-lightbox();
    }
}

/*
 * Open
 * 1. Center child
 * 2. Fade-in
 */

.x-lightbox.x-open {
    display: block;
    /* 2 */
    opacity: 1;
}


/* Page
 ========================================================================== */

/*
 * Prevent scrollbars
 */

.x-lightbox-page {
    overflow: hidden;
}


/* Item
 ========================================================================== */

/*
 * 1. Center child within the viewport
 * 2. Not visible by default
 * 3. Color needed for spinner icon
 * 4. Optimize animation
 * 5. Responsiveness
 *    Using `vh` for `max-height` to fix image proportions after resize in Safari and Opera
 *    Using `vh` and `vw` to make responsive image work in IE11
 * 6. Suppress outline on focus
 */

.x-lightbox-items>* {
    /* 1 */
    position       : absolute;
    top            : 0;
    right          : 0;
    bottom         : 0;
    left           : 0;
    /* 2 */
    display        : none;
    justify-content: center;
    align-items    : center;
    /* 3 */
    color          : $lightbox-item-color;
    /* 4 */
    will-change    : transform, opacity;

    @if(mixin-exists(hook-lightbox-item)) {
        @include hook-lightbox-item();
    }
}

/* 5 */
.x-lightbox-items>*>* {
    max-width : $lightbox-item-max-width;
    max-height: $lightbox-item-max-height;
}

/* 6 */
.x-lightbox-items> :focus {
    outline: none;
}

.x-lightbox-items>*> :not(iframe) {
    width : auto;
    height: auto;
}

.x-lightbox-items>.x-active {
    display: flex;
}

/* Toolbar
 ========================================================================== */

.x-lightbox-toolbar {
    padding   : $lightbox-toolbar-padding-vertical $lightbox-toolbar-padding-horizontal;
    background: $lightbox-toolbar-background;
    color     : $lightbox-toolbar-color;

    @if(mixin-exists(hook-lightbox-toolbar)) {
        @include hook-lightbox-toolbar();
    }
}

.x-lightbox-toolbar>* {
    color: $lightbox-toolbar-color;
}


/* Toolbar Icon (Close)
 ========================================================================== */

.x-lightbox-toolbar-icon {
    padding: $lightbox-toolbar-icon-padding;
    color  : $lightbox-toolbar-icon-color;

    @if(mixin-exists(hook-lightbox-toolbar-icon)) {
        @include hook-lightbox-toolbar-icon();
    }
}

/*
 * Hover
 */

.x-lightbox-toolbar-icon:hover {
    color: $lightbox-toolbar-icon-hover-color;

    @if(mixin-exists(hook-lightbox-toolbar-icon-hover)) {
        @include hook-lightbox-toolbar-icon-hover();
    }
}



/* Button (Slidenav)
 ========================================================================== */

/*
 * 1. Center icon vertically and horizontally
 */

.x-lightbox-button {
    box-sizing     : border-box;
    width          : $lightbox-button-size;
    height         : $lightbox-button-size;
    background     : $lightbox-button-background;
    color          : $lightbox-button-color;
    /* 1 */
    display        : inline-flex;
    justify-content: center;
    align-items    : center;

    @if(mixin-exists(hook-lightbox-button)) {
        @include hook-lightbox-button();
    }
}

/* Hover + Focus */
.x-lightbox-button:hover,
.x-lightbox-button:focus {
    color: $lightbox-button-hover-color;

    @if(mixin-exists(hook-lightbox-button-hover)) {
        @include hook-lightbox-button-hover();
    }
}

/* OnClick */
.x-lightbox-button:active {
    @if(mixin-exists(hook-lightbox-button-active)) {
        @include hook-lightbox-button-active();
    }
}


/* Caption
 ========================================================================== */

.x-lightbox-caption:empty {
    display: none;
}


/* Iframe
 ========================================================================== */

.x-lightbox-iframe {
    width : 80%;
    height: 80%;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-lightbox-misc)) {
    @include hook-lightbox-misc();
}

// @mixin hook-lightbox(){}
// @mixin hook-lightbox-item(){}
// @mixin hook-lightbox-toolbar(){}
// @mixin hook-lightbox-toolbar-icon(){}
// @mixin hook-lightbox-toolbar-icon-hover(){}
// @mixin hook-lightbox-button(){}
// @mixin hook-lightbox-button-hover(){}
// @mixin hook-lightbox-button-active(){}
// @mixin hook-lightbox-misc(){}

//
// Component: Lightbox
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-lightbox(){}


// Item
// ========================================================================

// @mixin hook-lightbox-item(){}


// Toolbar
// ========================================================================

// @mixin hook-lightbox-toolbar(){}


// Toolbar Icon
// ========================================================================

// @mixin hook-lightbox-toolbar-icon(){}

// @mixin hook-lightbox-toolbar-icon-hover(){}


// Button
// ========================================================================

// @mixin hook-lightbox-button(){}

// @mixin hook-lightbox-button-hover(){}

// @mixin hook-lightbox-button-active(){}


// Miscellaneous
// ========================================================================

// @mixin hook-lightbox-misc(){}
// Name:            Link
// Description:     Styles for links
//
// Component:       `x-link-muted`
//                  `x-link-text`
//                  `x-link-heading`
//                  `x-link-reset`
//
// Sub-objects:     `x-link-toggle`
//
// ========================================================================


// Variables
// ========================================================================

$link-muted-color      : $global-muted-color !default;
$link-muted-hover-color: $global-color !default;

$link-text-hover-color: $global-muted-color !default;

$link-heading-hover-color          : $global-primary-background !default;
$link-heading-hover-text-decoration: none !default;


/* ========================================================================
   Component: Link
 ========================================================================== */


/* Muted
 ========================================================================== */

a.x-link-muted,
.x-link-muted a {
    color: $link-muted-color;

    @if(mixin-exists(hook-link-muted)) {
        @include hook-link-muted();
    }
}

a.x-link-muted:hover,
.x-link-muted a:hover,
.x-link-toggle:hover .x-link-muted,
.x-link-toggle:focus .x-link-muted {
    color: $link-muted-hover-color;

    @if(mixin-exists(hook-link-muted-hover)) {
        @include hook-link-muted-hover();
    }
}


/* Text
 ========================================================================== */

a.x-link-text,
.x-link-text a {
    color: inherit;

    @if(mixin-exists(hook-link-text)) {
        @include hook-link-text();
    }
}

a.x-link-text:hover,
.x-link-text a:hover,
.x-link-toggle:hover .x-link-text,
.x-link-toggle:focus .x-link-text {
    color: $link-text-hover-color;

    @if(mixin-exists(hook-link-text-hover)) {
        @include hook-link-text-hover();
    }
}


/* Heading
 ========================================================================== */

a.x-link-heading,
.x-link-heading a {
    color: inherit;

    @if(mixin-exists(hook-link-heading)) {
        @include hook-link-heading();
    }
}

a.x-link-heading:hover,
.x-link-heading a:hover,
.x-link-toggle:hover .x-link-heading,
.x-link-toggle:focus .x-link-heading {
    color          : $link-heading-hover-color;
    text-decoration: $link-heading-hover-text-decoration;

    @if(mixin-exists(hook-link-heading-hover)) {
        @include hook-link-heading-hover();
    }
}


/* Reset
 ========================================================================== */

/*
 * `!important` needed to override inverse component
 */

a.x-link-reset,
.x-link-reset a {
    color          : inherit !important;
    text-decoration: none !important;

    @if(mixin-exists(hook-link-reset)) {
        @include hook-link-reset();
    }
}


/* Toggle
 ========================================================================== */

.x-link-toggle {
    color          : inherit !important;
    text-decoration: none !important;
}

.x-link-toggle:focus {
    outline: none;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-link-misc)) {
    @include hook-link-misc();
}

// @mixin hook-link-muted(){}
// @mixin hook-link-muted-hover(){}
// @mixin hook-link-text(){}
// @mixin hook-link-text-hover(){}
// @mixin hook-link-heading(){}
// @mixin hook-link-heading-hover(){}
// @mixin hook-link-reset(){}
// @mixin hook-link-misc(){}


// Inverse
// ========================================================================

$inverse-link-muted-color        : $inverse-global-muted-color !default;
$inverse-link-muted-hover-color  : $inverse-global-color !default;
$inverse-link-text-hover-color   : $inverse-global-muted-color !default;
$inverse-link-heading-hover-color: $inverse-global-primary-background !default;



// @mixin hook-inverse-link-muted(){}
// @mixin hook-inverse-link-muted-hover(){}
// @mixin hook-inverse-link-text-hover(){}
// @mixin hook-inverse-link-heading-hover(){}


//
// Component: Link
//
// ========================================================================


// Variables
// ========================================================================


// Muted
// ========================================================================

// @mixin hook-link-muted(){}

// @mixin hook-link-muted-hover(){}


// Text
// ========================================================================

// @mixin hook-link-text(){}

// @mixin hook-link-text-hover(){}


// Heading
// ========================================================================

// @mixin hook-link-heading(){}

// @mixin hook-link-heading-hover(){}


// Reset
// ========================================================================

// @mixin hook-link-reset(){}


// Miscellaneous
// ========================================================================

// @mixin hook-link-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-link-muted(){}
// @mixin hook-inverse-link-muted-hover(){}

// @mixin hook-inverse-link-text-hover(){}

// @mixin hook-inverse-link-heading-hover(){}

// Name:            List
// Description:     Styles for lists
//
// Component:       `x-list`
//
// Modifiers:       `x-list-disc`
//                  `x-list-circle`
//                  `x-list-square`
//                  `x-list-decimal`
//                  `x-list-hyphen`
//                  `x-list-muted`
//                  `x-list-emphasis`
//                  `x-list-primary`
//                  `x-list-secondary`
//                  `x-list-bullet`
//                  `x-list-divider`
//                  `x-list-striped`
//                  `x-list-large`
//                  `x-list-collapse`
//
// ========================================================================


// Variables
// ========================================================================

$list-margin-top: $global-small-margin !default;

$list-padding-left: 30px !default;

$list-marker-height: ($global-line-height * 1em) !default;

$list-muted-color    : $global-muted-color !default;
$list-emphasis-color : $global-emphasis-color !default;
$list-primary-color  : $global-primary-background !default;
$list-secondary-color: $global-secondary-background !default;

$list-bullet-icon-color: $global-color !default;

$list-divider-margin-top  : $global-small-margin !default;
$list-divider-border-width: $global-border-width !default;
$list-divider-border      : $global-border !default;

$list-striped-padding-vertical  : $global-small-margin !default;
$list-striped-padding-horizontal: $global-small-margin !default;
$list-striped-background        : $global-muted-background !default;

$list-large-margin-top                : $global-margin !default;
$list-large-divider-margin-top        : $global-margin !default;
$list-large-striped-padding-vertical  : $global-margin !default;
$list-large-striped-padding-horizontal: $global-small-margin !default;

$internal-list-bullet-image: "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%226%22%20height%3D%226%22%20viewBox%3D%220%200%206%206%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Ccircle%20fill%3D%22#000%22%20cx%3D%223%22%20cy%3D%223%22%20r%3D%223%22%20%2F%3E%0A%3C%2Fsvg%3E" !default;


/* ========================================================================
   Component: List
 ========================================================================== */

.x-list {
    padding   : 0;
    list-style: none;
}

/*
 * Remove margin from the last-child
 */

.x-list>*> :last-child {
    margin-bottom: 0;
}

/*
 * Style
 */

.x-list> :nth-child(n+2),
.x-list>*>ul {
    margin-top: $list-margin-top;
}


/* Marker modifiers
 * Moving `::marker` inside `::before` to style it differently
 * To style the `::marker` is currently only supported in Firefox and Safari
 ========================================================================== */

.x-list-disc>*,
.x-list-circle>*,
.x-list-square>*,
.x-list-decimal>*,
.x-list-hyphen>* {
    padding-left: $list-padding-left;
}

/*
 * Type modifiers
 */

.x-list-decimal {
    counter-reset: decimal;
}

.x-list-decimal>* {
    counter-increment: decimal;
}

[class*='x-list']> ::before {
    content            : '';
    position           : relative;
    left               : (-$list-padding-left);
    width              : $list-padding-left;
    height             : $list-marker-height;
    margin-bottom      : (-$list-marker-height);
    display            : list-item;
    list-style-position: inside;
    text-align         : right;
}

.x-list-disc> ::before {
    list-style-type: disc;
}

.x-list-circle> ::before {
    list-style-type: circle;
}

.x-list-square> ::before {
    list-style-type: square;
}

.x-list-decimal> ::before {
    content: counter(decimal, decimal) '\200A.\00A0';
}

.x-list-hyphen> ::before {
    content: '–\00A0\00A0';
}

/*
 * Color modifiers
 */

.x-list-muted> ::before {
    color: $list-muted-color !important;
}

.x-list-emphasis> ::before {
    color: $list-emphasis-color !important;
}

.x-list-primary> ::before {
    color: $list-primary-color !important;
}

.x-list-secondary> ::before {
    color: $list-secondary-color !important;
}


/* Image bullet modifier
 ========================================================================== */

.x-list-bullet>* {
    padding-left: $list-padding-left;
}

.x-list-bullet> ::before {
    content      : "";
    position     : relative;
    left         : (-$list-padding-left);
    width        : $list-padding-left;
    height       : $list-marker-height;
    margin-bottom: (-$list-marker-height);
    @include svg-fill($internal-list-bullet-image, "#000", $list-bullet-icon-color);
    background-repeat  : no-repeat;
    background-position: 50% 50%;
}


/* Style modifiers
 ========================================================================== */

/*
 * Divider
 */

.x-list-divider> :nth-child(n+2) {
    margin-top : $list-divider-margin-top;
    padding-top: $list-divider-margin-top;
    border-top : $list-divider-border-width solid $list-divider-border;

    @if(mixin-exists(hook-list-divider)) {
        @include hook-list-divider();
    }
}

/*
 * Striped
 */

.x-list-striped>* {
    padding: $list-striped-padding-vertical $list-striped-padding-horizontal;

    @if(mixin-exists(hook-list-striped)) {
        @include hook-list-striped();
    }
}

.x-list-striped> :nth-of-type(odd) {
    background: $list-striped-background;
}

.x-list-striped> :nth-child(n+2) {
    margin-top: 0;
}


/* Size modifier
 ========================================================================== */

.x-list-large> :nth-child(n+2),
.x-list-large>*>ul {
    margin-top: $list-large-margin-top;
}

.x-list-collapse> :nth-child(n+2),
.x-list-collapse>*>ul {
    margin-top: 0;
}

/*
 * Divider
 */

.x-list-large.x-list-divider> :nth-child(n+2) {
    margin-top : $list-large-divider-margin-top;
    padding-top: $list-large-divider-margin-top;
}

.x-list-collapse.x-list-divider> :nth-child(n+2) {
    margin-top : 0;
    padding-top: 0;
}

/*
 * Striped
 */

.x-list-large.x-list-striped>* {
    padding: $list-large-striped-padding-vertical $list-large-striped-padding-horizontal;
}

.x-list-collapse.x-list-striped>* {
    padding-top   : 0;
    padding-bottom: 0;
}

.x-list-large.x-list-striped> :nth-child(n+2),
.x-list-collapse.x-list-striped> :nth-child(n+2) {
    margin-top: 0;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-list-misc)) {
    @include hook-list-misc();
}

// @mixin hook-list-divider(){}
// @mixin hook-list-striped(){}
// @mixin hook-list-misc(){}


// Inverse
// ========================================================================

$inverse-list-muted-color    : $inverse-global-muted-color !default;
$inverse-list-emphasis-color : $inverse-global-emphasis-color !default;
$inverse-list-primary-color  : $inverse-global-primary-background !default;
$inverse-list-secondary-color: $inverse-global-primary-background !default;

$inverse-list-divider-border    : $inverse-global-border !default;
$inverse-list-striped-background: $inverse-global-muted-background !default;

$inverse-list-bullet-icon-color: $inverse-global-color !default;



// @mixin hook-inverse-list-divider(){}
// @mixin hook-inverse-list-striped(){}

//
// Component: List
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$list-striped-border-width:                      $global-border-width !default;
$list-striped-border:                            $global-border !default;


// Style modifiers
// ========================================================================

// @mixin hook-list-divider(){}




// Miscellaneous
// ========================================================================

// @mixin hook-list-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-list-divider(){}


// Name:            Margin
// Description:     Utilities for margins
//
// Component:       `x-margin-*`
//                  `x-margin-small-*`
//                  `x-margin-medium-*`
//                  `x-margin-large-*`
//                  `x-margin-xlarge-*`
//                  `x-margin-remove-*`
//                  `x-margin-auto-*`
//
// ========================================================================


// Variables
// ========================================================================

$margin-margin: $global-margin !default;

$margin-small-margin: $global-small-margin !default;

$margin-medium-margin: $global-medium-margin !default;

$margin-large-margin  : $global-medium-margin !default;
$margin-large-margin-l: $global-large-margin !default;

$margin-xlarge-margin  : $global-large-margin !default;
$margin-xlarge-margin-l: $global-xlarge-margin !default;


/* ========================================================================
   Component: Margin
 ========================================================================== */

/*
 * Default
 */

.x-margin {
    margin-bottom: $margin-margin;
}

*+.x-margin {
    margin-top: $margin-margin !important;
}

.x-margin-top {
    margin-top: $margin-margin !important;
}

.x-margin-bottom {
    margin-bottom: $margin-margin !important;
}

.x-margin-left {
    margin-left: $margin-margin !important;
}

.x-margin-right {
    margin-right: $margin-margin !important;
}


/* Small
 ========================================================================== */

.x-margin-small {
    margin-bottom: $margin-small-margin;
}

*+.x-margin-small {
    margin-top: $margin-small-margin !important;
}

.x-margin-small-top {
    margin-top: $margin-small-margin !important;
}

.x-margin-small-bottom {
    margin-bottom: $margin-small-margin !important;
}

.x-margin-small-left {
    margin-left: $margin-small-margin !important;
}

.x-margin-small-right {
    margin-right: $margin-small-margin !important;
}


/* Medium
 ========================================================================== */

.x-margin-medium {
    margin-bottom: $margin-medium-margin;
}

*+.x-margin-medium {
    margin-top: $margin-medium-margin !important;
}

.x-margin-medium-top {
    margin-top: $margin-medium-margin !important;
}

.x-margin-medium-bottom {
    margin-bottom: $margin-medium-margin !important;
}

.x-margin-medium-left {
    margin-left: $margin-medium-margin !important;
}

.x-margin-medium-right {
    margin-right: $margin-medium-margin !important;
}


/* Large
 ========================================================================== */

.x-margin-large {
    margin-bottom: $margin-large-margin;
}

*+.x-margin-large {
    margin-top: $margin-large-margin !important;
}

.x-margin-large-top {
    margin-top: $margin-large-margin !important;
}

.x-margin-large-bottom {
    margin-bottom: $margin-large-margin !important;
}

.x-margin-large-left {
    margin-left: $margin-large-margin !important;
}

.x-margin-large-right {
    margin-right: $margin-large-margin !important;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-margin-large {
        margin-bottom: $margin-large-margin-l;
    }

    *+.x-margin-large {
        margin-top: $margin-large-margin-l !important;
    }

    .x-margin-large-top {
        margin-top: $margin-large-margin-l !important;
    }

    .x-margin-large-bottom {
        margin-bottom: $margin-large-margin-l !important;
    }

    .x-margin-large-left {
        margin-left: $margin-large-margin-l !important;
    }

    .x-margin-large-right {
        margin-right: $margin-large-margin-l !important;
    }

}


/* XLarge
 ========================================================================== */

.x-margin-xlarge {
    margin-bottom: $margin-xlarge-margin;
}

*+.x-margin-xlarge {
    margin-top: $margin-xlarge-margin !important;
}

.x-margin-xlarge-top {
    margin-top: $margin-xlarge-margin !important;
}

.x-margin-xlarge-bottom {
    margin-bottom: $margin-xlarge-margin !important;
}

.x-margin-xlarge-left {
    margin-left: $margin-xlarge-margin !important;
}

.x-margin-xlarge-right {
    margin-right: $margin-xlarge-margin !important;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-margin-xlarge {
        margin-bottom: $margin-xlarge-margin-l;
    }

    *+.x-margin-xlarge {
        margin-top: $margin-xlarge-margin-l !important;
    }

    .x-margin-xlarge-top {
        margin-top: $margin-xlarge-margin-l !important;
    }

    .x-margin-xlarge-bottom {
        margin-bottom: $margin-xlarge-margin-l !important;
    }

    .x-margin-xlarge-left {
        margin-left: $margin-xlarge-margin-l !important;
    }

    .x-margin-xlarge-right {
        margin-right: $margin-xlarge-margin-l !important;
    }

}


/* Auto
 ========================================================================== */

.x-margin-auto {
    margin-left : auto !important;
    margin-right: auto !important;
}

.x-margin-auto-top {
    margin-top: auto !important;
}

.x-margin-auto-bottom {
    margin-bottom: auto !important;
}

.x-margin-auto-left {
    margin-left: auto !important;
}

.x-margin-auto-right {
    margin-right: auto !important;
}

.x-margin-auto-vertical {
    margin-top   : auto !important;
    margin-bottom: auto !important;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-margin-auto\:small {
        margin-left : auto !important;
        margin-right: auto !important;
    }

    .x-margin-auto-left\:small {
        margin-left: auto !important;
    }

    .x-margin-auto-right\:small {
        margin-right: auto !important;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-margin-auto\:medium {
        margin-left : auto !important;
        margin-right: auto !important;
    }

    .x-margin-auto-left\:medium {
        margin-left: auto !important;
    }

    .x-margin-auto-right\:medium {
        margin-right: auto !important;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-margin-auto\:large {
        margin-left : auto !important;
        margin-right: auto !important;
    }

    .x-margin-auto-left\:large {
        margin-left: auto !important;
    }

    .x-margin-auto-right\:large {
        margin-right: auto !important;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-margin-auto\:xlarge {
        margin-left : auto !important;
        margin-right: auto !important;
    }

    .x-margin-auto-left\:xlarge {
        margin-left: auto !important;
    }

    .x-margin-auto-right\:xlarge {
        margin-right: auto !important;
    }

}


/* Remove
 ========================================================================== */

.x-margin-remove {
    margin: 0 !important;
}

.x-margin-remove-top {
    margin-top: 0 !important;
}

.x-margin-remove-bottom {
    margin-bottom: 0 !important;
}

.x-margin-remove-left {
    margin-left: 0 !important;
}

.x-margin-remove-right {
    margin-right: 0 !important;
}

.x-margin-remove-vertical {
    margin-top   : 0 !important;
    margin-bottom: 0 !important;
}

.x-margin-remove-adjacent+*,
.x-margin-remove-first-child> :first-child {
    margin-top: 0 !important;
}

.x-margin-remove-last-child> :last-child {
    margin-bottom: 0 !important;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-margin-remove-left\:small {
        margin-left: 0 !important;
    }

    .x-margin-remove-right\:small {
        margin-right: 0 !important;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-margin-remove-left\:medium {
        margin-left: 0 !important;
    }

    .x-margin-remove-right\:medium {
        margin-right: 0 !important;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-margin-remove-left\:large {
        margin-left: 0 !important;
    }

    .x-margin-remove-right\:large {
        margin-right: 0 !important;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-margin-remove-left\:xlarge {
        margin-left: 0 !important;
    }

    .x-margin-remove-right\:xlarge {
        margin-right: 0 !important;
    }

}



// Hooks
// ========================================================================

@if(mixin-exists(hook-margin-misc)) {
    @include hook-margin-misc();
}

// @mixin hook-margin-misc(){}


//
// Component: Margin
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-margin-misc(){}
// Name:            Marker
// Description:     Component to create a marker icon
//
// Component:       `x-marker`
//
// ========================================================================


// Variables
// ========================================================================

$marker-padding   : 5px !default;
$marker-background: $global-secondary-background !default;
$marker-color     : $global-inverse-color !default;

$marker-hover-color: $global-inverse-color !default;


/* ========================================================================
   Component: Marker
 ========================================================================== */

/*
 * Addopts `x-icon`
 */

.x-marker {
    padding   : $marker-padding;
    background: $marker-background;
    color     : $marker-color;

    @if(mixin-exists(hook-marker)) {
        @include hook-marker();
    }
}

/* Hover + Focus */
.x-marker:hover,
.x-marker:focus {
    color  : $marker-hover-color;
    outline: none;

    @if(mixin-exists(hook-marker-hover)) {
        @include hook-marker-hover();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-marker-misc)) {
    @include hook-marker-misc();
}

// @mixin hook-marker(){}
// @mixin hook-marker-hover(){}
// @mixin hook-marker-misc(){}


// Inverse
// ========================================================================

$inverse-marker-background : $global-muted-background !default;
$inverse-marker-color      : $global-color !default;
$inverse-marker-hover-color: $global-color !default;



// @mixin hook-inverse-marker(){}
// @mixin hook-inverse-marker-hover(){}

//
// Component: Marker
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================



// @mixin hook-marker-hover(){}


// Miscellaneous
// ========================================================================

// @mixin hook-marker-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-marker(){}
// @mixin hook-inverse-marker-hover(){}

//
// Component:       Mixin
// Description:     Defines mixins which are used across all components
//
// ========================================================================


// SVG
// ========================================================================

/// Replace `$search` with `$replace` in `$string`

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin svg-fill($src, $color-default, $color-new) {

  $replace-src    : str-replace($src, $color-default, $color-new) !default;
  $replace-src    : str-replace($replace-src, "#", "%23");
  background-image: url(quote($replace-src));
}

//
// Component:       Mixin
// Description:     Defines mixins which are used across all components
//
// ========================================================================

@mixin hook-accordion(){}
@mixin hook-accordion-item(){}
@mixin hook-accordion-title(){

    overflow: hidden;

    &::before {
        content: "";
        width: ($accordion-title-line-height * 1em);
        height: ($accordion-title-line-height * 1em);
        margin-left: $accordion-icon-margin-left;
        float: right;
        @include svg-fill($internal-accordion-close-image, "#000", $accordion-icon-color);
        background-repeat: no-repeat;
        background-position: 50% 50%;
    }

    .x-open > &::before { @include svg-fill($internal-accordion-open-image, "#000", $accordion-icon-color); }

}
@mixin hook-accordion-title-hover(){}
@mixin hook-accordion-content(){}
@mixin hook-accordion-misc(){}
@mixin hook-inverse-accordion-item(){}
@mixin hook-inverse-accordion-title(){}
@mixin hook-inverse-accordion-title-hover(){}
@mixin hook-inverse-component-accordion(){

    .x-accordion-title::before { @include svg-fill($internal-accordion-close-image, "#000", $inverse-global-color); }

    .x-open > .x-accordion-title::before { @include svg-fill($internal-accordion-open-image, "#000", $inverse-global-color); }

}
@mixin hook-alert(){}
@mixin hook-alert-close(){
    color: inherit;
    opacity: $alert-close-opacity;
}
@mixin hook-alert-close-hover(){
    color: inherit;
    opacity: $alert-close-hover-opacity;
}
@mixin hook-alert-primary(){}
@mixin hook-alert-success(){}
@mixin hook-alert-warning(){}
@mixin hook-alert-danger(){}
@mixin hook-alert-misc(){

    /*
     * Content
     */

    .x-alert h1,
    .x-alert h2,
    .x-alert h3,
    .x-alert h4,
    .x-alert h5,
    .x-alert h6 { color: inherit; }

    .x-alert a:not([class]) {
        color: inherit;
        text-decoration: underline;
    }

    .x-alert a:not([class]):hover {
        color: inherit;
        text-decoration: underline;
    }

}
@mixin hook-align-misc(){}
@mixin hook-animation-misc(){}
@mixin hook-article(){}
@mixin hook-article-adjacent(){}
@mixin hook-article-title(){}
@mixin hook-article-meta(){

    a { color: $article-meta-link-color; }

    a:hover {
        color: $article-meta-link-hover-color;
        text-decoration: none;
    }

}
@mixin hook-article-misc(){}
@mixin hook-inverse-article-title(){}
@mixin hook-inverse-article-meta(){}
@mixin hook-inverse-component-article(){

    .x-article-title  {
        @if(mixin-exists(hook-inverse-article-title)) {@include hook-inverse-article-title();}
    }

    .x-article-meta  {
        color: $inverse-article-meta-color;
        @if(mixin-exists(hook-inverse-article-meta)) {@include hook-inverse-article-meta();}
    }

}
@mixin hook-background-misc(){}
@mixin hook-badge(){}
@mixin hook-badge-hover(){}
@mixin hook-badge-misc(){}
@mixin hook-inverse-badge(){}
@mixin hook-inverse-badge-hover(){}
@mixin hook-inverse-component-badge(){

    .x-badge {
        background-color: $inverse-badge-background;
        color: $inverse-badge-color;
        @if(mixin-exists(hook-inverse-badge)) {@include hook-inverse-badge();}
    }

    .x-badge:hover,
    .x-badge:focus {
        color: $inverse-badge-hover-color;
        @if(mixin-exists(hook-inverse-badge-hover)) {@include hook-inverse-badge-hover();}
    }

}
@mixin hook-base-body(){}
@mixin hook-base-link(){}
@mixin hook-base-link-hover(){}
@mixin hook-base-code(){
    padding: $base-code-padding-vertical $base-code-padding-horizontal;
    background: $base-code-background;
}
@mixin hook-base-heading(){}
@mixin hook-base-h1(){}
@mixin hook-base-h2(){}
@mixin hook-base-h3(){}
@mixin hook-base-h4(){}
@mixin hook-base-h5(){}
@mixin hook-base-h6(){}
@mixin hook-base-hr(){}
@mixin hook-base-blockquote(){
    color: $base-blockquote-color;
}
@mixin hook-base-blockquote-footer(){

    color: $base-blockquote-footer-color;

    &::before { content: "— "; }

}
@mixin hook-base-pre(){
    padding: $base-pre-padding;
    border: $base-pre-border-width solid $base-pre-border;
    border-radius: $base-pre-border-radius;
    background: $base-pre-background;
}
@mixin hook-base-misc(){}
@mixin hook-inverse-base-link(){}
@mixin hook-inverse-base-link-hover(){}
@mixin hook-inverse-base-code(){
    background: $inverse-global-muted-background;
}
@mixin hook-inverse-base-heading(){}
@mixin hook-inverse-base-h1(){}
@mixin hook-inverse-base-h2(){}
@mixin hook-inverse-base-h3(){}
@mixin hook-inverse-base-h4(){}
@mixin hook-inverse-base-h5(){}
@mixin hook-inverse-base-h6(){}
@mixin hook-inverse-base-blockquote(){ color: $inverse-base-blockquote-color; }
@mixin hook-inverse-base-blockquote-footer(){ color: $inverse-base-blockquote-footer-color; }
@mixin hook-inverse-base-hr(){}
@mixin hook-inverse-component-base(){

    color: $inverse-base-color;

    // Base
    // ========================================================================

    //
    // Link
    //

    a,
    .x-link  {
        color: $inverse-base-link-color;
        @if(mixin-exists(hook-inverse-base-link)) {@include hook-inverse-base-link();}
    }

    a:hover,
    .x-link:hover {
        color: $inverse-base-link-hover-color;
        @if(mixin-exists(hook-inverse-base-link-hover)) {@include hook-inverse-base-link-hover();}
    }

    //
    // Code
    //

    :not(pre) > code,
    :not(pre) > kbd,
    :not(pre) > samp {
        color: $inverse-base-code-color;
        @if(mixin-exists(hook-inverse-base-code)) {@include hook-inverse-base-code();}
    }

    //
    // Emphasize
    //

    em { color: $inverse-base-em-color; }

    //
    // Headings
    //

    h1, .x-h1,
    h2, .x-h2,
    h3, .x-h3,
    h4, .x-h4,
    h5, .x-h5,
    h6, .x-h6,
    .x-heading-small,
    .x-heading-medium,
    .x-heading-large,
    .x-heading-xlarge,
    .x-heading-2xlarge {
        color: $inverse-base-heading-color;
        @if(mixin-exists(hook-inverse-base-heading)) {@include hook-inverse-base-heading();}
    }

    h1, .x-h1 {
        @if(mixin-exists(hook-inverse-base-h1)) {@include hook-inverse-base-h1();}
    }

    h2, .x-h2 {
        @if(mixin-exists(hook-inverse-base-h2)) {@include hook-inverse-base-h2();}
    }

    h3, .x-h3 {
        @if(mixin-exists(hook-inverse-base-h3)) {@include hook-inverse-base-h3();}
    }

    h4, .x-h4 {
        @if(mixin-exists(hook-inverse-base-h4)) {@include hook-inverse-base-h4();}
    }

    h5, .x-h5 {
        @if(mixin-exists(hook-inverse-base-h5)) {@include hook-inverse-base-h5();}
    }

    h6, .x-h6 {
        @if(mixin-exists(hook-inverse-base-h6)) {@include hook-inverse-base-h6();}
    }

    //
    // Blockquotes
    //

    blockquote {
        @if(mixin-exists(hook-inverse-base-blockquote)) {@include hook-inverse-base-blockquote();}
    }

    blockquote footer {
        @if(mixin-exists(hook-inverse-base-blockquote-footer)) {@include hook-inverse-base-blockquote-footer();}
    }

    //
    // Horizontal rules
    //

    hr, .x-hr {
        border-top-color: $inverse-base-hr-border;
        @if(mixin-exists(hook-inverse-base-hr)) {@include hook-inverse-base-hr();}
    }

}
@mixin hook-breadcrumb(){}
@mixin hook-breadcrumb-item(){}
@mixin hook-breadcrumb-item-hover(){}
@mixin hook-breadcrumb-item-disabled(){}
@mixin hook-breadcrumb-item-active(){}
@mixin hook-breadcrumb-divider(){}
@mixin hook-breadcrumb-misc(){}
@mixin hook-inverse-breadcrumb-item(){}
@mixin hook-inverse-breadcrumb-item-hover(){}
@mixin hook-inverse-breadcrumb-item-disabled(){}
@mixin hook-inverse-breadcrumb-item-active(){}
@mixin hook-inverse-breadcrumb-divider(){}
@mixin hook-inverse-component-breadcrumb(){

    .x-breadcrumb > * > * {
        color: $inverse-breadcrumb-item-color;
        @if(mixin-exists(hook-inverse-breadcrumb-item)) {@include hook-inverse-breadcrumb-item();}
    }

    .x-breadcrumb > * > :hover,
    .x-breadcrumb > * > :focus {
        color: $inverse-breadcrumb-item-hover-color;
        @if(mixin-exists(hook-inverse-breadcrumb-item-hover)) {@include hook-inverse-breadcrumb-item-hover();}
    }


    .x-breadcrumb > .x-disabled > * {
        @if(mixin-exists(hook-inverse-breadcrumb-item-disabled)) {@include hook-inverse-breadcrumb-item-disabled();}
    }

    .x-breadcrumb > :last-child > * {
        color: $inverse-breadcrumb-item-active-color;
        @if(mixin-exists(hook-inverse-breadcrumb-item-active)) {@include hook-inverse-breadcrumb-item-active();}
    }

    //
    // Divider
    //

    .x-breadcrumb > :nth-child(n+2):not(.x-first-column)::before {
        color: $inverse-breadcrumb-divider-color;
        @if(mixin-exists(hook-inverse-breadcrumb-divider)) {@include hook-inverse-breadcrumb-divider();}
    }

}
@mixin hook-button(){
    text-transform: $button-text-transform;
    transition: 0.1s ease-in-out;
    transition-property: color, background-color, border-color;
}
@mixin hook-button-hover(){}
@mixin hook-button-focus(){}
@mixin hook-button-active(){}
@mixin hook-button-default(){ border: $button-border-width solid $button-default-border; }
@mixin hook-button-default-hover(){ border-color: $button-default-hover-border; }
@mixin hook-button-default-active(){ border-color: $button-default-active-border; }
@mixin hook-button-primary(){ border: $button-border-width solid transparent; }
@mixin hook-button-primary-hover(){}
@mixin hook-button-primary-active(){}
@mixin hook-button-secondary(){ border: $button-border-width solid transparent; }
@mixin hook-button-secondary-hover(){}
@mixin hook-button-secondary-active(){}
@mixin hook-button-danger(){ border: $button-border-width solid transparent; }
@mixin hook-button-danger-hover(){}
@mixin hook-button-danger-active(){}
@mixin hook-button-disabled(){ border-color: $button-disabled-border; }
@mixin hook-button-small(){}
@mixin hook-button-large(){}
@mixin hook-button-text(){

    position: relative;

    &::before {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        right: 100%;
        border-bottom: $button-text-border-width solid $button-text-border;
        transition: right 0.3s ease-out;
    }

}
@mixin hook-button-text-hover(){

    &::before { right: 0; }

}
@mixin hook-button-text-disabled(){

    &::before { display: none; }

}
@mixin hook-button-link(){}
@mixin hook-button-misc(){

    /* Group
     ========================================================================== */

    /*
     * Collapse border
     */

    .x-button-group > .x-button:nth-child(n+2),
    .x-button-group > div:nth-child(n+2) .x-button { margin-left: (-$button-border-width); }

    /*
     * Create position context to superimpose the successor elements border
     * Known issue: If you use an `a` element as button and an icon inside,
     * the active state will not work if you click the icon inside the button
     * Workaround: Just use a `button` or `input` element as button
     */

    .x-button-group .x-button:hover,
    .x-button-group .x-button:focus,
    .x-button-group .x-button:active,
    .x-button-group .x-button.x-active {
        position: relative;
        z-index: 1;
    }

}
@mixin hook-inverse-button-default(){ border-color: $inverse-global-color; }
@mixin hook-inverse-button-default-hover(){ border-color: $inverse-global-emphasis-color; }
@mixin hook-inverse-button-default-active(){ border-color: $inverse-global-emphasis-color; }
@mixin hook-inverse-button-primary(){}
@mixin hook-inverse-button-primary-hover(){}
@mixin hook-inverse-button-primary-active(){}
@mixin hook-inverse-button-secondary(){}
@mixin hook-inverse-button-secondary-hover(){}
@mixin hook-inverse-button-secondary-active(){}
@mixin hook-inverse-button-text(){
    &::before { border-bottom-color: $inverse-global-emphasis-color; }
}
@mixin hook-inverse-button-text-hover(){}
@mixin hook-inverse-button-text-disabled(){}
@mixin hook-inverse-button-link(){}
@mixin hook-inverse-component-button(){

    //
    // Default
    //

    .x-button-default {
        background-color: $inverse-button-default-background;
        color: $inverse-button-default-color;
        @if(mixin-exists(hook-inverse-button-default)) {@include hook-inverse-button-default();}
    }

    .x-button-default:hover,
    .x-button-default:focus {
        background-color: $inverse-button-default-hover-background;
        color: $inverse-button-default-hover-color;
        @if(mixin-exists(hook-inverse-button-default-hover)) {@include hook-inverse-button-default-hover();}
    }

    .x-button-default:active,
    .x-button-default.x-active {
        background-color: $inverse-button-default-active-background;
        color: $inverse-button-default-active-color;
        @if(mixin-exists(hook-inverse-button-default-active)) {@include hook-inverse-button-default-active();}
    }

    //
    // Primary
    //

    .x-button-primary {
        background-color: $inverse-button-primary-background;
        color: $inverse-button-primary-color;
        @if(mixin-exists(hook-inverse-button-primary)) {@include hook-inverse-button-primary();}
    }

    .x-button-primary:hover,
    .x-button-primary:focus {
        background-color: $inverse-button-primary-hover-background;
        color: $inverse-button-primary-hover-color;
        @if(mixin-exists(hook-inverse-button-primary-hover)) {@include hook-inverse-button-primary-hover();}
    }

    .x-button-primary:active,
    .x-button-primary.x-active {
        background-color: $inverse-button-primary-active-background;
        color: $inverse-button-primary-active-color;
        @if(mixin-exists(hook-inverse-button-primary-active)) {@include hook-inverse-button-primary-active();}
    }

    //
    // Secondary
    //

    .x-button-secondary {
        background-color: $inverse-button-secondary-background;
        color: $inverse-button-secondary-color;
        @if(mixin-exists(hook-inverse-button-secondary)) {@include hook-inverse-button-secondary();}
    }

    .x-button-secondary:hover,
    .x-button-secondary:focus {
        background-color: $inverse-button-secondary-hover-background;
        color: $inverse-button-secondary-hover-color;
        @if(mixin-exists(hook-inverse-button-secondary-hover)) {@include hook-inverse-button-secondary-hover();}
    }

    .x-button-secondary:active,
    .x-button-secondary.x-active {
        background-color: $inverse-button-secondary-active-background;
        color: $inverse-button-secondary-active-color;
        @if(mixin-exists(hook-inverse-button-secondary-active)) {@include hook-inverse-button-secondary-active();}
    }

    //
    // Text
    //

    .x-button-text {
        color: $inverse-button-text-color;
        @if(mixin-exists(hook-inverse-button-text)) {@include hook-inverse-button-text();}
    }

    .x-button-text:hover,
    .x-button-text:focus {
        color: $inverse-button-text-hover-color;
        @if(mixin-exists(hook-inverse-button-text-hover)) {@include hook-inverse-button-text-hover();}
    }

    .x-button-text:disabled {
        color: $inverse-button-text-disabled-color;
        @if(mixin-exists(hook-inverse-button-text-disabled)) {@include hook-inverse-button-text-disabled();}
    }

    //
    // Link
    //

    .x-button-link {
        color: $inverse-button-link-color;
        @if(mixin-exists(hook-inverse-button-link)) {@include hook-inverse-button-link();}
    }

    .x-button-link:hover,
    .x-button-link:focus { color: $inverse-button-link-hover-color; }


}
@mixin hook-card(){ transition: box-shadow 0.1s ease-in-out; }
@mixin hook-card-body(){}
@mixin hook-card-header(){}
@mixin hook-card-footer(){}
@mixin hook-card-media(){}
@mixin hook-card-media-top(){}
@mixin hook-card-media-bottom(){}
@mixin hook-card-media-left(){}
@mixin hook-card-media-right(){}
@mixin hook-card-title(){}
@mixin hook-card-badge(){}
@mixin hook-card-hover(){ box-shadow: $card-hover-box-shadow; }
@mixin hook-card-default(){ box-shadow: $card-default-box-shadow; }
@mixin hook-card-default-title(){}
@mixin hook-card-default-hover(){ box-shadow: $card-default-hover-box-shadow; }
@mixin hook-card-default-header(){ border-bottom: $card-default-header-border-width solid $card-default-header-border; }
@mixin hook-card-default-footer(){ border-top: $card-default-footer-border-width  solid $card-default-footer-border; }
@mixin hook-card-primary(){ box-shadow: $card-primary-box-shadow; }
@mixin hook-card-primary-title(){}
@mixin hook-card-primary-hover(){ box-shadow: $card-primary-hover-box-shadow; }
@mixin hook-card-secondary(){ box-shadow: $card-secondary-box-shadow; }
@mixin hook-card-secondary-title(){}
@mixin hook-card-secondary-hover(){ box-shadow: $card-secondary-hover-box-shadow; }
@mixin hook-card-misc(){

    /*
     * Default
     */

    .x-card-body > .x-nav-default {
        margin-left: (-$card-body-padding-horizontal);
        margin-right: (-$card-body-padding-horizontal);
    }
    .x-card-body > .x-nav-default:only-child {
        margin-top: (-$card-body-padding-vertical + 15px);
        margin-bottom: (-$card-body-padding-vertical + 15px);
    }

    .x-card-body > .x-nav-default > li > a,
    .x-card-body > .x-nav-default .x-nav-header,
    .x-card-body > .x-nav-default .x-nav-divider {
        padding-left: $card-body-padding-horizontal;
        padding-right: $card-body-padding-horizontal;
    }

    .x-card-body > .x-nav-default .x-nav-sub { padding-left: $nav-sublist-deeper-padding-left + $card-body-padding-horizontal; }


    /* Desktop and bigger */
    @media (min-width: $breakpoint-large) {

        .x-card-body > .x-nav-default {
            margin-left: (-$card-body-padding-horizontal-l);
            margin-right: (-$card-body-padding-horizontal-l);
        }
        .x-card-body > .x-nav-default:only-child {
            margin-top: (-$card-body-padding-vertical-l + 15px);
            margin-bottom: (-$card-body-padding-vertical-l + 15px);
        }

        .x-card-body > .x-nav-default > li > a,
        .x-card-body > .x-nav-default .x-nav-header,
        .x-card-body > .x-nav-default .x-nav-divider {
            padding-left: $card-body-padding-horizontal-l;
            padding-right: $card-body-padding-horizontal-l;
        }

        .x-card-body > .x-nav-default .x-nav-sub { padding-left: $nav-sublist-deeper-padding-left + $card-body-padding-horizontal-l; }

    }

    /*
     * Small
     */

    .x-card-small > .x-nav-default {
        margin-left: (-$card-small-body-padding-horizontal);
        margin-right: (-$card-small-body-padding-horizontal);
    }
    .x-card-small > .x-nav-default:only-child {
        margin-top: (-$card-small-body-padding-vertical + 15px);
        margin-bottom: (-$card-small-body-padding-vertical + 15px);
    }

    .x-card-small > .x-nav-default > li > a,
    .x-card-small > .x-nav-default .x-nav-header,
    .x-card-small > .x-nav-default .x-nav-divider {
        padding-left: $card-small-body-padding-horizontal;
        padding-right: $card-small-body-padding-horizontal;
    }

    .x-card-small > .x-nav-default .x-nav-sub { padding-left: $nav-sublist-deeper-padding-left + $card-small-body-padding-horizontal; }

    /*
     * Large
     */

    /* Desktop and bigger */
    @media (min-width: $breakpoint-large) {

        .x-card-large > .x-nav-default { margin: 0; }
        .x-card-large > .x-nav-default:only-child { margin: 0; }

        .x-card-large > .x-nav-default > li > a,
        .x-card-large > .x-nav-default .x-nav-header,
        .x-card-large > .x-nav-default .x-nav-divider {
            padding-left: 0;
            padding-right: 0;
        }

        .x-card-large > .x-nav-default .x-nav-sub { padding-left: $nav-sublist-deeper-padding-left; }

    }

}
@mixin hook-close(){
    transition: 0.1s ease-in-out;
    transition-property: color, opacity;
}
@mixin hook-close-hover(){}
@mixin hook-close-misc(){}
@mixin hook-inverse-close(){}
@mixin hook-inverse-close-hover(){}
@mixin hook-inverse-component-close(){

    .x-close {
        color: $inverse-close-color;
        @if(mixin-exists(hook-inverse-close)) {@include hook-inverse-close();}
    }

    .x-close:hover,
    .x-close:focus {
        color: $inverse-close-hover-color;
        @if(mixin-exists(hook-inverse-close-hover)) {@include hook-inverse-close-hover();}
    }

}
@mixin hook-column-misc(){}
@mixin hook-inverse-component-column(){

    .x-column-divider { column-rule-color: $inverse-column-divider-rule-color; }

}
@mixin hook-comment(){}
@mixin hook-comment-body(){}
@mixin hook-comment-header(){}
@mixin hook-comment-title(){}
@mixin hook-comment-meta(){}
@mixin hook-comment-avatar(){}
@mixin hook-comment-list-adjacent(){}
@mixin hook-comment-list-sub(){}
@mixin hook-comment-list-sub-adjacent(){}
@mixin hook-comment-primary(){
    padding: $comment-primary-padding;
    background-color: $comment-primary-background;
}
@mixin hook-comment-misc(){}
@mixin hook-container-misc(){}
@mixin hook-countdown(){}
@mixin hook-countdown-item(){}
@mixin hook-countdown-number(){}
@mixin hook-countdown-separator(){}
@mixin hook-countdown-label(){}
@mixin hook-countdown-misc(){}
@mixin hook-inverse-countdown-item(){}
@mixin hook-inverse-countdown-number(){}
@mixin hook-inverse-countdown-separator(){}
@mixin hook-inverse-countdown-label(){}
@mixin hook-inverse-component-countdown(){

    .x-countdown-number,
    .x-countdown-separator {
        @if(mixin-exists(hook-inverse-countdown-item)) {@include hook-inverse-countdown-item();}
    }

    .x-countdown-number {
        @if(mixin-exists(hook-inverse-countdown-number)) {@include hook-inverse-countdown-number();}
    }

    .x-countdown-separator {
        @if(mixin-exists(hook-inverse-countdown-separator)) {@include hook-inverse-countdown-separator();}
    }

    .x-countdown-label {
        @if(mixin-exists(hook-inverse-countdown-label)) {@include hook-inverse-countdown-label();}
    }

}
@mixin hook-cover-misc(){}
@mixin hook-description-list-term(){
    font-size: $description-list-term-font-size;
    font-weight: $description-list-term-font-weight;
    text-transform: $description-list-term-text-transform;
}
@mixin hook-description-list-description(){}
@mixin hook-description-list-divider-term(){}
@mixin hook-description-list-misc(){}
@mixin svg-fill($src, $color-default, $color-new, $property: background-image){

    $escape-color-default:  escape($color-default) !default;
    $escape-color-new:  escape("#{$color-new}") !default;

    $data-uri:  data-uri('image/svg+xml;charset=UTF-8', "#{$src}") !default;
    $replace-src:  replace("#{$data-uri}", "#{$escape-color-default}", "#{$escape-color-new}", "g") !default;

    #{$property}: unquote($replace-src);
}
@mixin hook-divider-icon(){}
@mixin hook-divider-icon-line(){}
@mixin hook-divider-icon-line-left(){}
@mixin hook-divider-icon-line-right(){}
@mixin hook-divider-small(){}
@mixin hook-divider-vertical(){}
@mixin hook-divider-misc(){}
@mixin hook-inverse-divider-icon(){}
@mixin hook-inverse-divider-icon-line(){}
@mixin hook-inverse-divider-small(){}
@mixin hook-inverse-divider-vertical(){}
@mixin hook-inverse-component-divider(){

    .x-divider-icon {
        @include svg-fill($internal-divider-icon-image, "#000", $inverse-divider-icon-color);
        @if(mixin-exists(hook-inverse-divider-icon)) {@include hook-inverse-divider-icon();}
    }

    .x-divider-icon::before,
    .x-divider-icon::after {
        border-bottom-color: $inverse-divider-icon-line-border;
        @if(mixin-exists(hook-inverse-divider-icon-line)) {@include hook-inverse-divider-icon-line();}
    }

    .x-divider-small::after {
        border-top-color: $inverse-divider-small-border;
        @if(mixin-exists(hook-inverse-divider-small)) {@include hook-inverse-divider-small();}
    }

    .x-divider-vertical {
        border-left-color: $inverse-divider-vertical-border;
        @if(mixin-exists(hook-inverse-divider-vertical)) {@include hook-inverse-divider-vertical();}
    }

}
@mixin hook-dotnav(){}
@mixin hook-dotnav-item(){
    border: $dotnav-item-border-width solid $dotnav-item-border;
    transition: 0.2s ease-in-out;
    transition-property: background-color, border-color;
}
@mixin hook-dotnav-item-hover(){ border-color: $dotnav-item-hover-border; }
@mixin hook-dotnav-item-onclick(){ border-color: $dotnav-item-onclick-border; }
@mixin hook-dotnav-item-active(){ border-color: $dotnav-item-active-border; }
@mixin hook-dotnav-misc(){}
@mixin hook-inverse-dotnav-item(){ border-color: rgba($inverse-global-color, 0.9); }
@mixin hook-inverse-dotnav-item-hover(){ border-color: transparent; }
@mixin hook-inverse-dotnav-item-onclick(){ border-color: transparent; }
@mixin hook-inverse-dotnav-item-active(){ border-color: transparent; }
@mixin hook-inverse-component-dotnav(){

    .x-dotnav > * > * {
        background-color: $inverse-dotnav-item-background;
        @if(mixin-exists(hook-inverse-dotnav-item)) {@include hook-inverse-dotnav-item();}
    }

    .x-dotnav > * > :hover,
    .x-dotnav > * > :focus {
        background-color: $inverse-dotnav-item-hover-background;
        @if(mixin-exists(hook-inverse-dotnav-item-hover)) {@include hook-inverse-dotnav-item-hover();}
    }

    .x-dotnav > * > :active {
        background-color: $inverse-dotnav-item-onclick-background;
        @if(mixin-exists(hook-inverse-dotnav-item-onclick)) {@include hook-inverse-dotnav-item-onclick();}
    }

    .x-dotnav > .x-active > * {
        background-color: $inverse-dotnav-item-active-background;
        @if(mixin-exists(hook-inverse-dotnav-item-active)) {@include hook-inverse-dotnav-item-active();}
    }

}
@mixin hook-drop-misc(){}
@mixin hook-dropdown(){ box-shadow: $dropdown-box-shadow; }
@mixin hook-dropdown-nav(){ font-size: $dropdown-nav-font-size; }
@mixin hook-dropdown-nav-item(){}
@mixin hook-dropdown-nav-item-hover(){}
@mixin hook-dropdown-nav-header(){}
@mixin hook-dropdown-nav-divider(){}
@mixin hook-dropdown-misc(){}
@mixin hook-flex-misc(){}
@mixin hook-form-range(){}
@mixin hook-form-range-thumb(){ border: $form-range-thumb-border-width solid $form-range-thumb-border; }
@mixin hook-form-range-track(){ border-radius: $form-range-track-border-radius; }
@mixin hook-form-range-track-focus(){}
@mixin hook-form-range-misc(){}
@mixin hook-form(){
    border: $form-border-width solid $form-border;
    transition: 0.2s ease-in-out;
    transition-property: color, background-color, border;
}
@mixin hook-form-single-line(){}
@mixin hook-form-multi-line(){}
@mixin hook-form-focus(){ border-color: $form-focus-border; }
@mixin hook-form-disabled(){ border-color: $form-disabled-border; }
@mixin hook-form-danger(){ border-color: $form-danger-border; }
@mixin hook-form-success(){ border-color: $form-success-border; }
@mixin hook-form-blank(){ border-color: transparent; }
@mixin hook-form-blank-focus(){
    border-color: $form-blank-focus-border;
    border-style: $form-blank-focus-border-style;
}
@mixin hook-form-radio(){
    border: $form-radio-border-width solid $form-radio-border;
    transition: 0.2s ease-in-out;
    transition-property: background-color, border;
}
@mixin hook-form-radio-focus(){ border-color: $form-radio-focus-border; }
@mixin hook-form-radio-checked(){ border-color: $form-radio-checked-border; }
@mixin hook-form-radio-checked-focus(){}
@mixin hook-form-radio-disabled(){ border-color: $form-radio-disabled-border; }
@mixin hook-form-legend(){}
@mixin hook-form-label(){
    color: $form-label-color;
    font-size: $form-label-font-size;
}
@mixin hook-form-stacked-label(){}
@mixin hook-form-horizontal-label(){}
@mixin hook-form-misc(){}
@mixin hook-inverse-form(){ border-color: $inverse-global-border; }
@mixin hook-inverse-form-focus(){ border-color: $inverse-global-color; }
@mixin hook-inverse-form-radio(){ border-color: $inverse-global-border; }
@mixin hook-inverse-form-radio-focus(){ border-color: $inverse-global-color; }
@mixin hook-inverse-form-radio-checked(){ border-color: $inverse-global-color; }
@mixin hook-inverse-form-radio-checked-focus(){}
@mixin hook-inverse-form-label(){ color: $inverse-form-label-color; }
@mixin hook-inverse-component-form(){

    .x-input,
    .x-select,
    .x-textarea {
        background-color: $inverse-form-background;
        color: $inverse-form-color;
        background-clip: padding-box;
        @if(mixin-exists(hook-inverse-form)) {@include hook-inverse-form();}

        &:focus {
            background-color: $inverse-form-focus-background;
            color: $inverse-form-focus-color;
            @if(mixin-exists(hook-inverse-form-focus)) {@include hook-inverse-form-focus();}
        }
    }

    //
    // Placeholder
    //

    .x-input::-ms-input-placeholder { color: $inverse-form-placeholder-color !important; }
    .x-input::placeholder { color: $inverse-form-placeholder-color; }

    .x-textarea::-ms-input-placeholder { color: $inverse-form-placeholder-color !important; }
    .x-textarea::placeholder { color: $inverse-form-placeholder-color; }

    //
    // Select
    //

    .x-select:not([multiple]):not([size]) { @include svg-fill($internal-form-select-image, "#000", $inverse-form-select-icon-color); }

    //
    // Datalist
    //

    .x-input[list]:hover,
    .x-input[list]:focus { @include svg-fill($internal-form-datalist-image, "#000", $inverse-form-datalist-icon-color); }

    //
    // Radio and checkbox
    //

    .x-radio,
    .x-checkbox {
        background-color: $inverse-form-radio-background;
        @if(mixin-exists(hook-inverse-form-radio)) {@include hook-inverse-form-radio();}
    }

    // Focus
    .x-radio:focus,
    .x-checkbox:focus {
        @if(mixin-exists(hook-inverse-form-radio-focus)) {@include hook-inverse-form-radio-focus();}
    }

    // Checked
    .x-radio:checked,
    .x-checkbox:checked,
    .x-checkbox:indeterminate {
        background-color: $inverse-form-radio-checked-background;
        @if(mixin-exists(hook-inverse-form-radio-checked)) {@include hook-inverse-form-radio-checked();}
    }

    // Focus
    .x-radio:checked:focus,
    .x-checkbox:checked:focus,
    .x-checkbox:indeterminate:focus {
        background-color: $inverse-form-radio-checked-focus-background;
        @if(mixin-exists(hook-inverse-form-radio-checked-focus)) {@include hook-inverse-form-radio-checked-focus();}
    }

    // Icon
    .x-radio:checked { @include svg-fill($internal-form-radio-image, "#000", $inverse-form-radio-checked-icon-color); }
    .x-checkbox:checked { @include svg-fill($internal-form-checkbox-image, "#000", $inverse-form-radio-checked-icon-color); }
    .x-checkbox:indeterminate { @include svg-fill($internal-form-checkbox-indeterminate-image, "#000", $inverse-form-radio-checked-icon-color); }

    // Label
    .x-form-label {
        @if(mixin-exists(hook-inverse-form-label)) {@include hook-inverse-form-label();}
    }

    // Icon
    .x-form-icon { color: $inverse-form-icon-color; }
    .x-form-icon:hover { color: $inverse-form-icon-hover-color; }

}
@mixin hook-grid-misc(){}
@mixin hook-inverse-component-grid(){

    .x-grid-divider > :not(.x-first-column)::before { border-left-color: $inverse-grid-divider-border; }
    .x-grid-divider.x-grid-stack > .x-grid-margin::before { border-top-color: $inverse-grid-divider-border; }

}
@mixin hook-heading-small(){}
@mixin hook-heading-medium(){}
@mixin hook-heading-large(){}
@mixin hook-heading-xlarge(){}
@mixin hook-heading-2xlarge(){}
@mixin hook-heading-primary(){}
@mixin hook-heading-hero(){}
@mixin hook-heading-divider(){}
@mixin hook-heading-bullet(){}
@mixin hook-heading-line(){}
@mixin hook-heading-misc(){}
@mixin hook-inverse-heading-small(){}
@mixin hook-inverse-heading-medium(){}
@mixin hook-inverse-heading-large(){}
@mixin hook-inverse-heading-xlarge(){}
@mixin hook-inverse-heading-2xlarge(){}
@mixin hook-inverse-heading-primary(){}
@mixin hook-inverse-heading-hero(){}
@mixin hook-inverse-heading-divider(){}
@mixin hook-inverse-heading-bullet(){}
@mixin hook-inverse-heading-line(){}
@mixin hook-inverse-component-heading(){

    .x-heading-small {
        @if(mixin-exists(hook-inverse-heading-small)) {@include hook-inverse-heading-small();}
    }

    .x-heading-medium {
        @if(mixin-exists(hook-inverse-heading-medium)) {@include hook-inverse-heading-medium();}
    }

    .x-heading-large {
        @if(mixin-exists(hook-inverse-heading-large)) {@include hook-inverse-heading-large();}
    }

    .x-heading-xlarge {
        @if(mixin-exists(hook-inverse-heading-xlarge)) {@include hook-inverse-heading-xlarge();}
    }

    .x-heading-2xlarge {
        @if(mixin-exists(hook-inverse-heading-2xlarge)) {@include hook-inverse-heading-2xlarge();}
    }

    @if ($deprecated == true) { .x-heading-primary { @if (mixin-exists(hook-inverse-heading-primary)) {@include hook-inverse-heading-primary();}}}

    @if ($deprecated == true) { .x-heading-hero { @if (mixin-exists(hook-inverse-heading-hero)) {@include hook-inverse-heading-hero();}}}

    .x-heading-divider {
        border-bottom-color: $inverse-heading-divider-border;
        @if(mixin-exists(hook-inverse-heading-divider)) {@include hook-inverse-heading-divider();}
    }

    .x-heading-bullet::before {
        border-left-color: $inverse-heading-bullet-border;
        @if(mixin-exists(hook-inverse-heading-bullet)) {@include hook-inverse-heading-bullet();}
    }

    .x-heading-line > ::before,
    .x-heading-line > ::after {
        border-bottom-color: $inverse-heading-line-border;
        @if(mixin-exists(hook-inverse-heading-line)) {@include hook-inverse-heading-line();}
    }

}
@mixin hook-height-misc(){}
@mixin hook-icon-link(){}
@mixin hook-icon-link-hover(){}
@mixin hook-icon-link-active(){}
@mixin hook-icon-button(){
    transition: 0.1s ease-in-out;
    transition-property: color, background-color;
}
@mixin hook-icon-button-hover(){}
@mixin hook-icon-button-active(){}
@mixin hook-icon-misc(){}
@mixin hook-inverse-icon-link(){}
@mixin hook-inverse-icon-link-hover(){}
@mixin hook-inverse-icon-link-active(){}
@mixin hook-inverse-icon-button(){}
@mixin hook-inverse-icon-button-hover(){}
@mixin hook-inverse-icon-button-active(){}
@mixin hook-inverse-component-icon(){

    //
    // Link
    //

    .x-icon-link {
        color: $inverse-icon-link-color;
        @if(mixin-exists(hook-inverse-icon-link)) {@include hook-inverse-icon-link();}
    }

    .x-icon-link:hover,
    .x-icon-link:focus {
        color: $inverse-icon-link-hover-color;
        @if(mixin-exists(hook-inverse-icon-link-hover)) {@include hook-inverse-icon-link-hover();}
    }

    .x-icon-link:active,
    .x-active > .x-icon-link {
        color: $inverse-icon-link-active-color;
        @if(mixin-exists(hook-inverse-icon-link-active)) {@include hook-inverse-icon-link-active();}
    }

    //
    // Button
    //

    .x-icon-button {
        background-color: $inverse-icon-button-background;
        color: $inverse-icon-button-color;
        @if(mixin-exists(hook-inverse-icon-button)) {@include hook-inverse-icon-button();}
    }

    .x-icon-button:hover,
    .x-icon-button:focus {
        background-color: $inverse-icon-button-hover-background;
        color: $inverse-icon-button-hover-color;
        @if(mixin-exists(hook-inverse-icon-button-hover)) {@include hook-inverse-icon-button-hover();}
    }

    .x-icon-button:active {
        background-color: $inverse-icon-button-active-background;
        color: $inverse-icon-button-active-color;
        @if(mixin-exists(hook-inverse-icon-button-active)) {@include hook-inverse-icon-button-active();}
    }

}
@mixin hook-iconnav(){}
@mixin hook-iconnav-item(){}
@mixin hook-iconnav-item-hover(){}
@mixin hook-iconnav-item-active(){}
@mixin hook-iconnav-misc(){}
@mixin hook-inverse-iconnav-item(){}
@mixin hook-inverse-iconnav-item-hover(){}
@mixin hook-inverse-iconnav-item-active(){}
@mixin hook-inverse-component-iconnav(){

    .x-iconnav > * > a {
        color: $inverse-iconnav-item-color;
        @if(mixin-exists(hook-inverse-iconnav-item)) {@include hook-inverse-iconnav-item();}
    }

    .x-iconnav > * > a:hover,
    .x-iconnav > * > a:focus {
        color: $inverse-iconnav-item-hover-color;
        @if(mixin-exists(hook-inverse-iconnav-item-hover)) {@include hook-inverse-iconnav-item-hover();}
    }

    .x-iconnav > .x-active > a {
        color: $inverse-iconnav-item-active-color;
        @if(mixin-exists(hook-inverse-iconnav-item-active)) {@include hook-inverse-iconnav-item-active();}
    }

}
@mixin hook-inverse-component-link(){

    a.x-link-muted,
    .x-link-muted a {
        color: $inverse-link-muted-color;
        @if(mixin-exists(hook-inverse-link-muted)) {@include hook-inverse-link-muted();}
    }

    a.x-link-muted:hover,
    .x-link-muted a:hover,
    .x-link-toggle:hover .x-link-muted,
    .x-link-toggle:focus .x-link-muted  {
        color: $inverse-link-muted-hover-color;
        @if(mixin-exists(hook-inverse-link-muted-hover)) {@include hook-inverse-link-muted-hover();}
    }

    a.x-link-text:hover,
    .x-link-text a:hover,
    .x-link-toggle:hover .x-link-text,
    .x-link-toggle:focus .x-link-text {
        color: $inverse-link-text-hover-color;
        @if(mixin-exists(hook-inverse-link-text-hover)) {@include hook-inverse-link-text-hover();}
    }

    a.x-link-heading:hover,
    .x-link-heading a:hover,
    .x-link-toggle:hover .x-link-heading,
    .x-link-toggle:focus .x-link-heading {
        color: $inverse-link-heading-hover-color;
        @if(mixin-exists(hook-inverse-link-heading-hover)) {@include hook-inverse-link-heading-hover();}
    }

}
@mixin hook-inverse-component-list(){

    .x-list-muted > ::before { color: $inverse-list-muted-color !important; }
    .x-list-emphasis > ::before { color: $inverse-list-emphasis-color !important; }
    .x-list-primary > ::before { color: $inverse-list-primary-color !important; }
    .x-list-secondary > ::before { color: $inverse-list-secondary-color !important; }

    .x-list-bullet > ::before {
        @include svg-fill($internal-list-bullet-image, "#000", $inverse-list-bullet-icon-color);
    }

    .x-list-divider > :nth-child(n+2) {
        border-top-color: $inverse-list-divider-border;
        @if(mixin-exists(hook-inverse-list-divider)) {@include hook-inverse-list-divider();}
    }

    .x-list-striped > * {
        @if(mixin-exists(hook-inverse-list-striped)) {@include hook-inverse-list-striped();}
    }

    .x-list-striped > :nth-of-type(odd) { background-color: $inverse-list-striped-background; }

}
@mixin hook-inverse-component-totop(){

    .x-totop {
        color: $inverse-totop-color;
        @if(mixin-exists(hook-inverse-totop)) {@include hook-inverse-totop();}
    }

    .x-totop:hover,
    .x-totop:focus {
        color: $inverse-totop-hover-color;
        @if(mixin-exists(hook-inverse-totop-hover)) {@include hook-inverse-totop-hover();}
    }

    .x-totop:active {
        color: $inverse-totop-active-color;
        @if(mixin-exists(hook-inverse-totop-active)) {@include hook-inverse-totop-active();}
    }

}
@mixin hook-inverse-component-label(){

    .x-label {
        background-color: $inverse-label-background;
        color: $inverse-label-color;
        @if(mixin-exists(hook-inverse-label)) {@include hook-inverse-label();}
    }

}
@mixin hook-inverse-component-search(){

    //
    // Input
    //

    .x-search-input { color: $inverse-search-color; }

    .x-search-input:-ms-input-placeholder { color: $inverse-search-placeholder-color !important; }
    .x-search-input::placeholder { color: $inverse-search-placeholder-color; }


    //
    // Icon
    //

    .x-search .x-search-icon { color: $inverse-search-icon-color; }
    .x-search .x-search-icon:hover { color: $inverse-search-icon-color; }

    //
    // Style modifier
    //

    .x-search-default .x-search-input {
        background-color: $inverse-search-default-background;
        @if(mixin-exists(hook-inverse-search-default-input)) {@include hook-inverse-search-default-input();}
    }
    
    .x-search-default .x-search-input:focus {
        background-color: $inverse-search-default-focus-background;
        @if(mixin-exists(hook-inverse-search-default-input-focus)) {@include hook-inverse-search-default-input-focus();}
    }

    .x-search-navbar .x-search-input {
        background-color: $inverse-search-navbar-background;
        @if(mixin-exists(hook-inverse-search-navbar-input)) {@include hook-inverse-search-navbar-input();}
    }

    .x-search-large .x-search-input {
        background-color: $inverse-search-large-background;
        @if(mixin-exists(hook-inverse-search-large-input)) {@include hook-inverse-search-large-input();}
    }

    //
    // Toggle
    //

    .x-search-toggle {
        color: $inverse-search-toggle-color;
        @if(mixin-exists(hook-inverse-search-toggle)) {@include hook-inverse-search-toggle();}
    }

    .x-search-toggle:hover,
    .x-search-toggle:focus {
        color: $inverse-search-toggle-hover-color;
        @if(mixin-exists(hook-inverse-search-toggle-hover)) {@include hook-inverse-search-toggle-hover();}
    }

}
@mixin hook-inverse-component-nav(){

    //
    // Parent icon modifier
    //

    .x-nav-parent-icon > .x-parent > a::after {
        @include svg-fill($internal-nav-parent-close-image, "#000", $inverse-nav-parent-icon-color);
        @if(mixin-exists(hook-inverse-nav-parent-icon)) {@include hook-inverse-nav-parent-icon();}
    }

    .x-nav-parent-icon > .x-parent.x-open > a::after { @include svg-fill($internal-nav-parent-open-image, "#000", $inverse-nav-parent-icon-color); }

    //
    // Default
    //

    .x-nav-default > li > a {
        color: $inverse-nav-default-item-color;
        @if(mixin-exists(hook-inverse-nav-default-item)) {@include hook-inverse-nav-default-item();}
    }

    .x-nav-default > li > a:hover,
    .x-nav-default > li > a:focus {
        color: $inverse-nav-default-item-hover-color;
        @if(mixin-exists(hook-inverse-nav-default-item-hover)) {@include hook-inverse-nav-default-item-hover();}
    }

    .x-nav-default > li.x-active > a {
        color: $inverse-nav-default-item-active-color;
        @if(mixin-exists(hook-inverse-nav-default-item-active)) {@include hook-inverse-nav-default-item-active();}
    }

    .x-nav-default .x-nav-header {
        color: $inverse-nav-default-header-color;
        @if(mixin-exists(hook-inverse-nav-default-header)) {@include hook-inverse-nav-default-header();}
    }

    .x-nav-default .x-nav-divider {
        border-top-color: $inverse-nav-default-divider-border;
        @if(mixin-exists(hook-inverse-nav-default-divider)) {@include hook-inverse-nav-default-divider();}
    }

    .x-nav-default .x-nav-sub a { color: $inverse-nav-default-sublist-item-color; }

    .x-nav-default .x-nav-sub a:hover,
    .x-nav-default .x-nav-sub a:focus { color: $inverse-nav-default-sublist-item-hover-color; }

    .x-nav-default .x-nav-sub li.x-active > a { color: $inverse-nav-default-sublist-item-active-color; }

    //
    // Primary
    //

    .x-nav-primary > li > a {
        color: $inverse-nav-primary-item-color;
        @if(mixin-exists(hook-inverse-nav-primary-item)) {@include hook-inverse-nav-primary-item();}
    }

    .x-nav-primary > li > a:hover,
    .x-nav-primary > li > a:focus {
        color: $inverse-nav-primary-item-hover-color;
        @if(mixin-exists(hook-inverse-nav-primary-item-hover)) {@include hook-inverse-nav-primary-item-hover();}
    }

    .x-nav-primary > li.x-active > a {
        color: $inverse-nav-primary-item-active-color;
        @if(mixin-exists(hook-inverse-nav-primary-item-active)) {@include hook-inverse-nav-primary-item-active();}
    }

    .x-nav-primary .x-nav-header {
        color: $inverse-nav-primary-header-color;
        @if(mixin-exists(hook-inverse-nav-primary-header)) {@include hook-inverse-nav-primary-header();}
    }

    .x-nav-primary .x-nav-divider {
        border-top-color: $inverse-nav-primary-divider-border;
        @if(mixin-exists(hook-inverse-nav-primary-divider)) {@include hook-inverse-nav-primary-divider();}
    }

    .x-nav-primary .x-nav-sub a { color: $inverse-nav-primary-sublist-item-color; }

    .x-nav-primary .x-nav-sub a:hover,
    .x-nav-primary .x-nav-sub a:focus { color: $inverse-nav-primary-sublist-item-hover-color; }

    .x-nav-primary .x-nav-sub li.x-active > a { color: $inverse-nav-primary-sublist-item-active-color; }

}
@mixin hook-inverse-component-navbar(){

    .x-navbar-nav > li > a {
        color: $inverse-navbar-nav-item-color;
        @if(mixin-exists(hook-inverse-navbar-nav-item)) {@include hook-inverse-navbar-nav-item();}
    }

    .x-navbar-nav > li:hover > a,
    .x-navbar-nav > li > a:focus,
    .x-navbar-nav > li > a.x-open {
        color: $inverse-navbar-nav-item-hover-color;
        @if(mixin-exists(hook-inverse-navbar-nav-item-hover)) {@include hook-inverse-navbar-nav-item-hover();}
    }

    .x-navbar-nav > li > a:active {
        color: $inverse-navbar-nav-item-onclick-color;
        @if(mixin-exists(hook-inverse-navbar-nav-item-onclick)) {@include hook-inverse-navbar-nav-item-onclick();}
    }

    .x-navbar-nav > li.x-active > a {
        color: $inverse-navbar-nav-item-active-color;
        @if(mixin-exists(hook-inverse-navbar-nav-item-active)) {@include hook-inverse-navbar-nav-item-active();}
    }

    .x-navbar-item {
        color: $inverse-navbar-item-color;
        @if(mixin-exists(hook-inverse-navbar-item)) {@include hook-inverse-navbar-item();}
    }

    .x-navbar-toggle {
        color: $inverse-navbar-toggle-color;
        @if(mixin-exists(hook-inverse-navbar-toggle)) {@include hook-inverse-navbar-toggle();}
    }

    .x-navbar-toggle:hover,
    .x-navbar-toggle:focus,
    .x-navbar-toggle.x-open {
        color: $inverse-navbar-toggle-hover-color;
        @if(mixin-exists(hook-inverse-navbar-toggle-hover)) {@include hook-inverse-navbar-toggle-hover();}
    }

}
@mixin hook-inverse-component-subnav(){

    .x-subnav > * > :first-child {
        color: $inverse-subnav-item-color;
        @if(mixin-exists(hook-inverse-subnav-item)) {@include hook-inverse-subnav-item();}
    }

    .x-subnav > * > a:hover,
    .x-subnav > * > a:focus {
        color: $inverse-subnav-item-hover-color;
        @if(mixin-exists(hook-inverse-subnav-item-hover)) {@include hook-inverse-subnav-item-hover();}
    }

    .x-subnav > .x-active > a {
        color: $inverse-subnav-item-active-color;
        @if(mixin-exists(hook-inverse-subnav-item-active)) {@include hook-inverse-subnav-item-active();}
    }

    //
    // Divider
    //

    .x-subnav-divider > :nth-child(n+2):not(.x-first-column)::before {
        border-left-color: $inverse-subnav-divider-border;
        @if(mixin-exists(hook-inverse-subnav-divider)) {@include hook-inverse-subnav-divider();}
    }

    //
    // Pill
    //

    .x-subnav-pill > * > :first-child {
        background-color: $inverse-subnav-pill-item-background;
        color: $inverse-subnav-pill-item-color;
        @if(mixin-exists(hook-inverse-subnav-pill-item)) {@include hook-inverse-subnav-pill-item();}
    }

    .x-subnav-pill > * > a:hover,
    .x-subnav-pill > * > a:focus {
        background-color: $inverse-subnav-pill-item-hover-background;
        color: $inverse-subnav-pill-item-hover-color;
        @if(mixin-exists(hook-inverse-subnav-pill-item-hover)) {@include hook-inverse-subnav-pill-item-hover();}
    }

    .x-subnav-pill > * > a:active {
        background-color: $inverse-subnav-pill-item-onclick-background;
        color: $inverse-subnav-pill-item-onclick-color;
        @if(mixin-exists(hook-inverse-subnav-pill-item-onclick)) {@include hook-inverse-subnav-pill-item-onclick();}
    }

    .x-subnav-pill > .x-active > a {
        background-color: $inverse-subnav-pill-item-active-background;
        color: $inverse-subnav-pill-item-active-color;
        @if(mixin-exists(hook-inverse-subnav-pill-item-active)) {@include hook-inverse-subnav-pill-item-active();}
    }

    //
    // Disabled
    //

    .x-subnav > .x-disabled > a {
        color: $inverse-subnav-item-disabled-color;
        @if(mixin-exists(hook-inverse-subnav-item-disabled)) {@include hook-inverse-subnav-item-disabled();}
    }

}
@mixin hook-inverse-component-pagination(){

    .x-pagination > * > * {
        color: $inverse-pagination-item-color;
        @if(mixin-exists(hook-inverse-pagination-item)) {@include hook-inverse-pagination-item();}
    }

    .x-pagination > * > :hover,
    .x-pagination > * > :focus {
        color: $inverse-pagination-item-hover-color;
        @if(mixin-exists(hook-inverse-pagination-item-hover)) {@include hook-inverse-pagination-item-hover();}
    }

    .x-pagination > .x-active > * {
        color: $inverse-pagination-item-active-color;
        @if(mixin-exists(hook-inverse-pagination-item-active)) {@include hook-inverse-pagination-item-active();}
    }

    .x-pagination > .x-disabled > * {
        color: $inverse-pagination-item-disabled-color;
        @if(mixin-exists(hook-inverse-pagination-item-disabled)) {@include hook-inverse-pagination-item-disabled();}
    }

}
@mixin hook-inverse-component-tab(){

    .x-tab {
        @if(mixin-exists(hook-inverse-tab)) {@include hook-inverse-tab();}
    }

    .x-tab > * > a {
        color: $inverse-tab-item-color;
        @if(mixin-exists(hook-inverse-tab-item)) {@include hook-inverse-tab-item();}
    }

    .x-tab > * > a:hover,
    .x-tab > * > a:focus{
        color: $inverse-tab-item-hover-color;
        @if(mixin-exists(hook-inverse-tab-item-hover)) {@include hook-inverse-tab-item-hover();}
    }

    .x-tab > .x-active > a {
        color: $inverse-tab-item-active-color;
        @if(mixin-exists(hook-inverse-tab-item-active)) {@include hook-inverse-tab-item-active();}
    }

    .x-tab > .x-disabled > a {
        color: $inverse-tab-item-disabled-color;
        @if(mixin-exists(hook-inverse-tab-item-disabled)) {@include hook-inverse-tab-item-disabled();}
    }

}
@mixin hook-inverse-component-slidenav(){

    .x-slidenav {
        color: $inverse-slidenav-color;
        @if(mixin-exists(hook-inverse-slidenav)) {@include hook-inverse-slidenav();}
    }

    .x-slidenav:hover,
    .x-slidenav:focus {
        color: $inverse-slidenav-hover-color;
        @if(mixin-exists(hook-inverse-slidenav-hover)) {@include hook-inverse-slidenav-hover();}
    }

    .x-slidenav:active {
        color: $inverse-slidenav-active-color;
        @if(mixin-exists(hook-inverse-slidenav-active)) {@include hook-inverse-slidenav-active();}
    }

}
@mixin hook-inverse-component-text(){

    .x-text-lead {
        color: $inverse-text-lex-color;
        @if(mixin-exists(hook-inverse-text-lead)) {@include hook-inverse-text-lead();}
    }

    .x-text-meta {
        color: $inverse-text-meta-color;
        @if(mixin-exists(hook-inverse-text-meta)) {@include hook-inverse-text-meta();}
    }

    .x-text-muted { color: $inverse-text-muted-color !important; }
    .x-text-emphasis { color: $inverse-text-emphasis-color !important; }
    .x-text-primary { color: $inverse-text-primary-color !important; }
    .x-text-secondary { color: $inverse-text-secondary-color !important; }

}
@mixin hook-inverse-component-utility(){

    .x-dropcap::first-letter,
    .x-dropcap p:first-of-type::first-letter {
        @if(mixin-exists(hook-inverse-dropcap)) {@include hook-inverse-dropcap();}
    }

    .x-logo {
        color: $inverse-logo-color;
        @if(mixin-exists(hook-inverse-logo)) {@include hook-inverse-logo();}
    }

    .x-logo:hover,
    .x-logo:focus {
        color: $inverse-logo-hover-color;
        @if(mixin-exists(hook-inverse-logo-hover)) {@include hook-inverse-logo-hover();}
    }

    .x-logo > :not(.x-logo-inverse):not(:only-of-type) { display: none; }
    .x-logo-inverse { display: inline; }

}
@mixin hook-inverse(){
    @include hook-inverse-component-base();
    @include hook-inverse-component-link();
    @include hook-inverse-component-heading();
    @include hook-inverse-component-divider();
    @include hook-inverse-component-list();
    @include hook-inverse-component-icon();
    @include hook-inverse-component-form();
    @include hook-inverse-component-button();
    @include hook-inverse-component-grid();
    @include hook-inverse-component-close();
    @include hook-inverse-component-totop();
    @include hook-inverse-component-badge();
    @include hook-inverse-component-label();
    @include hook-inverse-component-article();
    @include hook-inverse-component-search();
    @include hook-inverse-component-nav();
    @include hook-inverse-component-navbar();
    @include hook-inverse-component-subnav();
    @include hook-inverse-component-breadcrumb();
    @include hook-inverse-component-pagination();
    @include hook-inverse-component-tab();
    @include hook-inverse-component-slidenav();
    @include hook-inverse-component-dotnav();
    @include hook-inverse-component-accordion();
    @include hook-inverse-component-iconnav();
    @include hook-inverse-component-text();
    @include hook-inverse-component-column();
    @include hook-inverse-component-utility();
}
@mixin hook-label(){
    border-radius: $label-border-radius;
    text-transform: $label-text-transform;
}
@mixin hook-label-success(){}
@mixin hook-label-warning(){}
@mixin hook-label-danger(){}
@mixin hook-label-misc(){}
@mixin hook-inverse-label(){}
@mixin hook-leader(){}
@mixin hook-leader-misc(){}
@mixin hook-inverse-leader(){}
@mixin hook-inverse-component-leader(){

    .x-leader-fill::after {
        @if(mixin-exists(hook-inverse-leader)) {@include hook-inverse-leader();}
    }

}
@mixin hook-lightbox(){}
@mixin hook-lightbox-item(){}
@mixin hook-lightbox-toolbar(){}
@mixin hook-lightbox-toolbar-icon(){}
@mixin hook-lightbox-toolbar-icon-hover(){}
@mixin hook-lightbox-button(){}
@mixin hook-lightbox-button-hover(){}
@mixin hook-lightbox-button-active(){}
@mixin hook-lightbox-misc(){}
@mixin hook-link-muted(){}
@mixin hook-link-muted-hover(){}
@mixin hook-link-text(){}
@mixin hook-link-text-hover(){}
@mixin hook-link-heading(){}
@mixin hook-link-heading-hover(){}
@mixin hook-link-reset(){}
@mixin hook-link-misc(){}
@mixin hook-inverse-link-muted(){}
@mixin hook-inverse-link-muted-hover(){}
@mixin hook-inverse-link-text-hover(){}
@mixin hook-inverse-link-heading-hover(){}
@mixin hook-list-divider(){}
@mixin hook-list-striped(){

    &:nth-of-type(odd) {
        border-top: $list-striped-border-width solid $list-striped-border;
        border-bottom: $list-striped-border-width solid $list-striped-border;
    }

}
@mixin hook-list-misc(){}
@mixin hook-inverse-list-divider(){}
@mixin hook-inverse-list-striped(){

    &:nth-of-type(odd) {
        border-top-color: $inverse-global-border;
        border-bottom-color: $inverse-global-border;
    }

}
@mixin hook-margin-misc(){}
@mixin hook-marker(){
    border-radius: 500px;
}
@mixin hook-marker-hover(){}
@mixin hook-marker-misc(){}
@mixin hook-inverse-marker(){}
@mixin hook-inverse-marker-hover(){}
@mixin hook-inverse-component-marker(){

    .x-marker {
        background: $inverse-marker-background;
        color: $inverse-marker-color;
        @if(mixin-exists(hook-inverse-marker)) {@include hook-inverse-marker();}
    }

    .x-marker:hover,
    .x-marker:focus {
        color: $inverse-marker-hover-color;
        @if(mixin-exists(hook-inverse-marker-hover)) {@include hook-inverse-marker-hover();}
    }

}
@mixin hook-modal(){}
@mixin hook-modal-dialog(){}
@mixin hook-modal-full(){}
@mixin hook-modal-body(){}
@mixin hook-modal-header(){ border-bottom: $modal-header-border-width solid $modal-header-border; }
@mixin hook-modal-footer(){ border-top: $modal-footer-border-width solid $modal-footer-border; }
@mixin hook-modal-title(){}
@mixin hook-modal-close(){}
@mixin hook-modal-close-hover(){}
@mixin hook-modal-close-default(){}
@mixin hook-modal-close-default-hover(){}
@mixin hook-modal-close-outside(){}
@mixin hook-modal-close-outside-hover(){}
@mixin hook-modal-close-full(){
    top: 0;
    right: 0;
    padding: $modal-close-full-padding;
    background: $modal-close-full-background;
}
@mixin hook-modal-close-full-hover(){}
@mixin hook-modal-misc(){}
@mixin hook-nav-sub(){}
@mixin hook-nav-parent-icon(){}
@mixin hook-nav-header(){}
@mixin hook-nav-divider(){}
@mixin hook-nav-default(){ font-size: $nav-default-font-size; }
@mixin hook-nav-default-item(){}
@mixin hook-nav-default-item-hover(){}
@mixin hook-nav-default-item-active(){}
@mixin hook-nav-default-header(){}
@mixin hook-nav-default-divider(){}
@mixin hook-nav-primary(){}
@mixin hook-nav-primary-item(){}
@mixin hook-nav-primary-item-hover(){}
@mixin hook-nav-primary-item-active(){}
@mixin hook-nav-primary-header(){}
@mixin hook-nav-primary-divider(){}
@mixin hook-nav-misc(){}
@mixin hook-inverse-nav-parent-icon(){}
@mixin hook-inverse-nav-default-item(){}
@mixin hook-inverse-nav-default-item-hover(){}
@mixin hook-inverse-nav-default-item-active(){}
@mixin hook-inverse-nav-default-header(){}
@mixin hook-inverse-nav-default-divider(){}
@mixin hook-inverse-nav-primary-item(){}
@mixin hook-inverse-nav-primary-item-hover(){}
@mixin hook-inverse-nav-primary-item-active(){}
@mixin hook-inverse-nav-primary-header(){}
@mixin hook-inverse-nav-primary-divider(){}
@mixin hook-navbar(){}
@mixin hook-navbar-container(){}
@mixin hook-navbar-nav-item(){
    text-transform: $navbar-nav-item-text-transform;
    transition: 0.1s ease-in-out;
    transition-property: color, background-color;
}
@mixin hook-navbar-nav-item-hover(){}
@mixin hook-navbar-nav-item-onclick(){}
@mixin hook-navbar-nav-item-active(){}
@mixin hook-navbar-item(){}
@mixin hook-navbar-toggle(){}
@mixin hook-navbar-toggle-hover(){}
@mixin hook-navbar-toggle-icon(){}
@mixin hook-navbar-toggle-icon-hover(){}
@mixin hook-navbar-subtitle(){}
@mixin hook-navbar-primary(){}
@mixin hook-navbar-transparent(){}
@mixin hook-navbar-sticky(){}
@mixin hook-navbar-dropdown(){ box-shadow: $navbar-dropdown-box-shadow; }
@mixin hook-navbar-dropdown-dropbar(){ box-shadow: none; }
@mixin hook-navbar-dropdown-nav(){ font-size: $navbar-dropdown-nav-font-size; }
@mixin hook-navbar-dropdown-nav-item(){}
@mixin hook-navbar-dropdown-nav-item-hover(){}
@mixin hook-navbar-dropdown-nav-item-active(){}
@mixin hook-navbar-dropdown-nav-header(){}
@mixin hook-navbar-dropdown-nav-divider(){}
@mixin hook-navbar-dropbar(){}
@mixin hook-navbar-dropbar-slide(){ box-shadow: $navbar-dropbar-box-shadow; }
@mixin hook-navbar-misc(){

    /*
     * Navbar
     */

    .x-navbar-container > .x-container .x-navbar-left {
        margin-left: (-$navbar-nav-item-padding-horizontal);
        margin-right: (-$navbar-nav-item-padding-horizontal);
    }
    .x-navbar-container > .x-container .x-navbar-right { margin-right: (-$navbar-nav-item-padding-horizontal); }

    /*
     * Grid Divider
     */

    .x-navbar-dropdown-grid > * { position: relative; }

    .x-navbar-dropdown-grid > :not(.x-first-column)::before {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        left: ($navbar-dropdown-grid-gutter-horizontal / 2);
        border-left: $navbar-dropdown-grid-divider-border-width solid $navbar-dropdown-grid-divider-border;
    }

    /* Vertical */
    .x-navbar-dropdown-grid.x-grid-stack > .x-grid-margin::before {
        content: "";
        position: absolute;
        top: -($navbar-dropdown-grid-gutter-vertical / 2);
        left: $navbar-dropdown-grid-gutter-horizontal;
        right: 0;
        border-top: $navbar-dropdown-grid-divider-border-width solid $navbar-dropdown-grid-divider-border;
    }

}
@mixin hook-inverse-navbar-nav-item(){}
@mixin hook-inverse-navbar-nav-item-hover(){}
@mixin hook-inverse-navbar-nav-item-onclick(){}
@mixin hook-inverse-navbar-nav-item-active(){}
@mixin hook-inverse-navbar-item(){}
@mixin hook-inverse-navbar-toggle(){}
@mixin hook-inverse-navbar-toggle-hover(){}
@mixin hook-notification(){}
@mixin hook-notification-message(){}
@mixin hook-notification-close(){}
@mixin hook-notification-message-primary(){}
@mixin hook-notification-message-success(){}
@mixin hook-notification-message-warning(){}
@mixin hook-notification-message-danger(){}
@mixin hook-notification-misc(){}
@mixin hook-offcanvas-bar(){}
@mixin hook-offcanvas-close(){}
@mixin hook-offcanvas-overlay(){}
@mixin hook-offcanvas-misc(){}
@mixin hook-overlay(){}
@mixin hook-overlay-icon(){}
@mixin hook-overlay-default(){}
@mixin hook-overlay-primary(){}
@mixin hook-overlay-misc(){}
@mixin hook-padding-misc(){}
@mixin hook-pagination(){}
@mixin hook-pagination-item(){ transition: color 0.1s ease-in-out; }
@mixin hook-pagination-item-hover(){}
@mixin hook-pagination-item-active(){}
@mixin hook-pagination-item-disabled(){}
@mixin hook-pagination-misc(){}
@mixin hook-inverse-pagination-item(){}
@mixin hook-inverse-pagination-item-hover(){}
@mixin hook-inverse-pagination-item-active(){}
@mixin hook-inverse-pagination-item-disabled(){}
@mixin hook-placeholder(){ border: $placeholder-border-width dashed $placeholder-border; }
@mixin hook-placeholder-misc(){}
@mixin hook-position-misc(){}
@mixin hook-print(){}
@mixin hook-progress(){
    border-radius: $progress-border-radius;
    overflow: hidden;
}
@mixin hook-progress-bar(){}
@mixin hook-progress-misc(){}
@mixin hook-search-input(){}
@mixin hook-search-default-input(){ border: $search-default-border-width solid $search-default-border; }
@mixin hook-search-default-input-focus(){}
@mixin hook-search-navbar-input(){}
@mixin hook-search-large-input(){}
@mixin hook-search-toggle(){}
@mixin hook-search-toggle-hover(){}
@mixin hook-search-misc(){}
@mixin hook-inverse-search-default-input(){ border-color: $inverse-global-border; }
@mixin hook-inverse-search-default-input-focus(){}
@mixin hook-inverse-search-navbar-input(){}
@mixin hook-inverse-search-large-input(){}
@mixin hook-inverse-search-toggle(){}
@mixin hook-inverse-search-toggle-hover(){}
@mixin hook-section(){}
@mixin hook-section-default(){}
@mixin hook-section-muted(){}
@mixin hook-section-primary(){}
@mixin hook-section-secondary(){}
@mixin hook-section-overlap(){}
@mixin hook-section-misc(){}
@mixin hook-slidenav(){ transition: color 0.1s ease-in-out; }
@mixin hook-slidenav-hover(){}
@mixin hook-slidenav-active(){}
@mixin hook-slidenav-previous(){}
@mixin hook-slidenav-next(){}
@mixin hook-slidenav-large(){}
@mixin hook-slidenav-container(){}
@mixin hook-slidenav-misc(){}
@mixin hook-inverse-slidenav(){}
@mixin hook-inverse-slidenav-hover(){}
@mixin hook-inverse-slidenav-active(){}
@mixin hook-slider(){}
@mixin hook-slider-misc(){}
@mixin hook-slideshow(){}
@mixin hook-slideshow-misc(){}
@mixin hook-sortable(){}
@mixin hook-sortable-drag(){}
@mixin hook-sortable-placeholder(){}
@mixin hook-sortable-empty(){}
@mixin hook-sortable-misc(){}
@mixin hook-spinner(){}
@mixin hook-spinner-misc(){}
@mixin hook-sticky-misc(){}
@mixin hook-subnav(){}
@mixin hook-subnav-item(){
    font-size: $subnav-item-font-size;
    text-transform: $subnav-item-text-transform;
    transition: 0.1s ease-in-out;
    transition-property: color, background-color;
}
@mixin hook-subnav-item-hover(){}
@mixin hook-subnav-item-active(){}
@mixin hook-subnav-divider(){}
@mixin hook-subnav-pill-item(){}
@mixin hook-subnav-pill-item-hover(){}
@mixin hook-subnav-pill-item-onclick(){}
@mixin hook-subnav-pill-item-active(){}
@mixin hook-subnav-item-disabled(){}
@mixin hook-subnav-misc(){}
@mixin hook-inverse-subnav-item(){}
@mixin hook-inverse-subnav-item-hover(){}
@mixin hook-inverse-subnav-item-active(){}
@mixin hook-inverse-subnav-divider(){}
@mixin hook-inverse-subnav-pill-item(){}
@mixin hook-inverse-subnav-pill-item-hover(){}
@mixin hook-inverse-subnav-pill-item-onclick(){}
@mixin hook-inverse-subnav-pill-item-active(){}
@mixin hook-inverse-subnav-item-disabled(){}
@mixin hook-svg-misc(){}
@mixin hook-switcher-misc(){}
@mixin hook-tab(){

    position: relative;

    &::before {
        content: "";
        position: absolute;
        bottom: 0;
        left: $tab-margin-horizontal;
        right: 0;
        border-bottom: $tab-border-width solid $tab-border;
    }

}
@mixin hook-tab-item(){
    border-bottom: $tab-item-border-width solid transparent;
    font-size: $tab-item-font-size;
    text-transform: $tab-item-text-transform;
    transition: color 0.1s ease-in-out;
}
@mixin hook-tab-item-hover(){}
@mixin hook-tab-item-active(){ border-color: $tab-item-active-border; }
@mixin hook-tab-item-disabled(){}
@mixin hook-tab-bottom(){

    &::before {
        top: 0;
        bottom: auto;
    }

}
@mixin hook-tab-bottom-item(){
    border-top: $tab-item-border-width solid transparent;
    border-bottom: none;
}
@mixin hook-tab-left(){

    &::before {
        top: 0;
        bottom: 0;
        left: auto;
        right: 0;
        border-left: $tab-border-width solid $tab-border;
        border-bottom: none;
    }

}
@mixin hook-tab-right(){

    &::before {
        top: 0;
        bottom: 0;
        left: 0;
        right: auto;
        border-left: $tab-border-width solid $tab-border;
        border-bottom: none;
    }

}
@mixin hook-tab-left-item(){
    border-right: $tab-item-border-width solid transparent;
    border-bottom: none;
}
@mixin hook-tab-right-item(){
    border-left: $tab-item-border-width solid transparent;
    border-bottom: none;
}
@mixin hook-tab-misc(){

    .x-tab .x-dropdown { margin-left: ($tab-margin-horizontal + $tab-item-padding-horizontal) }

}
@mixin hook-inverse-tab(){

    &::before { border-color: $inverse-tab-border; }

}
@mixin hook-inverse-tab-item(){}
@mixin hook-inverse-tab-item-hover(){}
@mixin hook-inverse-tab-item-active(){ border-color: $inverse-global-primary-background; }
@mixin hook-inverse-tab-item-disabled(){}
@mixin hook-table(){}
@mixin hook-table-header-cell(){ text-transform: uppercase; }
@mixin hook-table-cell(){}
@mixin hook-table-footer(){}
@mixin hook-table-caption(){}
@mixin hook-table-divider(){}
@mixin hook-table-striped(){
    border-top: $table-striped-border-width solid $table-striped-border;
    border-bottom: $table-striped-border-width solid $table-striped-border;
}
@mixin hook-table-hover(){}
@mixin hook-table-row-active(){}
@mixin hook-table-small(){}
@mixin hook-table-large(){}
@mixin hook-table-misc(){

    .x-table tbody tr { transition: background-color 0.1s linear; }

}
@mixin hook-inverse-table-header-cell(){}
@mixin hook-inverse-table-caption(){}
@mixin hook-inverse-table-row-active(){}
@mixin hook-inverse-table-divider(){}
@mixin hook-inverse-table-striped(){
    border-top-color: $inverse-global-border;
    border-bottom-color: $inverse-global-border;
}
@mixin hook-inverse-table-hover(){}
@mixin hook-inverse-component-table(){

    .x-table th {
        color: $inverse-table-header-cell-color;
        @if(mixin-exists(hook-inverse-table-header-cell)) {@include hook-inverse-table-header-cell();}
    }

    .x-table caption {
        color: $inverse-table-caption-color;
        @if(mixin-exists(hook-inverse-table-caption)) {@include hook-inverse-table-caption();}
    }

    .x-table > tr.x-active,
    .x-table tbody tr.x-active {
        background: $inverse-table-row-active-background;
        @if(mixin-exists(hook-inverse-table-row-active)) {@include hook-inverse-table-row-active();}
    }

    .x-table-divider > tr:not(:first-child),
    .x-table-divider > :not(:first-child) > tr,
    .x-table-divider > :first-child > tr:not(:first-child) {
        border-top-color: $inverse-table-divider-border;
        @if(mixin-exists(hook-inverse-table-divider)) {@include hook-inverse-table-divider();}
    }

    .x-table-striped > tr:nth-of-type(odd),
    .x-table-striped tbody tr:nth-of-type(odd) {
        background: $inverse-table-striped-row-background;
        @if(mixin-exists(hook-inverse-table-striped)) {@include hook-inverse-table-striped();}
    }

    .x-table-hover > tr:hover,
    .x-table-hover tbody tr:hover {
        background: $inverse-table-hover-row-background;
        @if(mixin-exists(hook-inverse-table-hover)) {@include hook-inverse-table-hover();}
    }

}
@mixin hook-text-lead(){}
@mixin hook-text-meta(){

    a { color: $text-meta-link-color; }

    a:hover {
        color: $text-meta-link-hover-color;
        text-decoration: none;
    }

}
@mixin hook-text-small(){}
@mixin hook-text-large(){}
@mixin hook-text-background(){}
@mixin hook-text-misc(){}
@mixin hook-inverse-text-lead(){}
@mixin hook-inverse-text-meta(){}
@mixin hook-thumbnav(){}
@mixin hook-thumbnav-item(){

    position: relative;

    &::after {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background: $thumbnav-item-background;
        transition: background-color 0.1s ease-in-out;
    }

}
@mixin hook-thumbnav-item-hover(){
    &::after { background-color: $thumbnav-item-hover-background; }
}
@mixin hook-thumbnav-item-active(){
    &::after { background-color: $thumbnav-item-active-background; }
}
@mixin hook-thumbnav-misc(){}
@mixin hook-inverse-thumbnav-item(){}
@mixin hook-inverse-thumbnav-item-hover(){}
@mixin hook-inverse-thumbnav-item-active(){}
@mixin hook-inverse-component-thumbnav(){

    .x-thumbnav > * > * {
        @if(mixin-exists(hook-inverse-thumbnav-item)) {@include hook-inverse-thumbnav-item();}
    }

    .x-thumbnav > * > :hover,
    .x-thumbnav > * > :focus {
        @if(mixin-exists(hook-inverse-thumbnav-item-hover)) {@include hook-inverse-thumbnav-item-hover();}
    }

    .x-thumbnav > .x-active > * {
        @if(mixin-exists(hook-inverse-thumbnav-item-active)) {@include hook-inverse-thumbnav-item-active();}
    }

}
@mixin hook-tile(){}
@mixin hook-tile-default(){}
@mixin hook-tile-muted(){}
@mixin hook-tile-primary(){}
@mixin hook-tile-secondary(){}
@mixin hook-tile-misc(){}
@mixin hook-tooltip(){}
@mixin hook-tooltip-misc(){}
@mixin hook-totop(){ transition: color 0.1s ease-in-out; }
@mixin hook-totop-hover(){}
@mixin hook-totop-active(){}
@mixin hook-totop-misc(){}
@mixin hook-inverse-totop(){}
@mixin hook-inverse-totop-hover(){}
@mixin hook-inverse-totop-active(){}
@mixin hook-transition-misc(){}
@mixin hook-panel-scrollable(){}
@mixin hook-box-shadow-bottom(){}
@mixin hook-dropcap(){
    // Prevent line wrap
    margin-bottom: -2px;
}
@mixin hook-logo(){}
@mixin hook-logo-hover(){}
@mixin hook-utility-misc(){}
@mixin hook-inverse-dropcap(){}
@mixin hook-inverse-logo(){}
@mixin hook-inverse-logo-hover(){}
@mixin hook-visibility-misc(){}
@mixin hook-width-misc(){}
// Name:            Modal
// Description:     Component to create modal dialogs
//
// Component:       `x-modal`
//
// Sub-objects:     `x-modal-page`
//                  `x-modal-dialog`
//                  `x-modal-header`
//                  `x-modal-body`
//                  `x-modal-footer`
//                  `x-modal-title`
//                  `x-modal-close`
//
// Adopted:         `x-modal-close-default`
//                  `x-modal-close-outside`
//                  `x-modal-close-full`
//
// Modifiers:       `x-modal-container`
//                  `x-modal-full`
//
// States:          `x-open`
//
// ========================================================================


// Variables
// ========================================================================

$modal-z-index   : $global-z-index+10 !default;
$modal-background: rgba(0, 0, 0, 0.6) !default;

$modal-padding-horizontal  : 15px !default;
$modal-padding-horizontal-s: $global-gutter !default;
$modal-padding-horizontal-m: $global-medium-gutter !default;
$modal-padding-vertical    : $modal-padding-horizontal !default;
$modal-padding-vertical-s  : 50px !default;

$modal-dialog-width     : 600px !default;
$modal-dialog-background: $global-background !default;

$modal-container-width: 1200px !default;

$modal-body-padding-horizontal: $global-gutter !default;
$modal-body-padding-vertical  : $global-gutter !default;

$modal-header-padding-horizontal: $global-gutter !default;
$modal-header-padding-vertical  : ($modal-header-padding-horizontal / 2) !default;
$modal-header-background        : $global-muted-background !default;

$modal-footer-padding-horizontal: $global-gutter !default;
$modal-footer-padding-vertical  : ($modal-footer-padding-horizontal / 2) !default;
$modal-footer-background        : $global-muted-background !default;

$modal-title-font-size  : $global-xlarge-font-size !default;
$modal-title-line-height: 1.3 !default;

$modal-close-position: $global-small-margin !default;
$modal-close-padding : 5px !default;

$modal-close-outside-position   : 0 !default;
$modal-close-outside-translate  : 100% !default;
$modal-close-outside-color      : lighten($global-inverse-color, 20%) !default;
$modal-close-outside-hover-color: $global-inverse-color !default;


/* ========================================================================
   Component: Modal
 ========================================================================== */

/*
 * 1. Hide by default
 * 2. Set position
 * 3. Allow scrolling for the modal dialog
 * 4. Horizontal padding
 * 5. Mask the background page
 * 6. Fade-in transition
 */

.x-modal {
    /* 1 */
    display                   : none;
    /* 2 */
    position                  : fixed;
    top                       : 0;
    right                     : 0;
    bottom                    : 0;
    left                      : 0;
    z-index                   : $modal-z-index;
    /* 3 */
    overflow-y                : auto;
    -webkit-overflow-scrolling: touch;
    /* 4 */
    padding                   : $modal-padding-vertical $modal-padding-horizontal;
    /* 5 */
    background                : $modal-background;
    /* 6 */
    opacity                   : 0;
    transition                : opacity 0.15s linear;

    @if(mixin-exists(hook-modal)) {
        @include hook-modal();
    }
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-modal {
        padding: $modal-padding-vertical-s $modal-padding-horizontal-s;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-modal {
        padding-left : $modal-padding-horizontal-m;
        padding-right: $modal-padding-horizontal-m;
    }

}

/*
 * Open
 */

.x-modal.x-open {
    opacity: 1;
}


/* Page
 ========================================================================== */

/*
 * Prevent scrollbars
 */

.x-modal-page {
    overflow: hidden;
}


/* Dialog
 ========================================================================== */

/*
 * 1. Create position context for spinner and close button
 * 2. Dimensions
 * 3. Fix `max-width: 100%` not working in combination with flex and responsive images in IE11
 *    `!important` needed to overwrite `x-width-auto`. See `#modal-media-image` in tests
 * 4. Style
 * 5. Slide-in transition
 */

.x-modal-dialog {
    /* 1 */
    position           : relative;
    /* 2 */
    box-sizing         : border-box;
    margin             : 0 auto;
    width              : $modal-dialog-width;
    /* 3 */
    max-width          : unquote('calc(100% - 0.01px)') !important;
    /* 4 */
    background         : $modal-dialog-background;
    /* 5 */
    opacity            : 0;
    transform          : translateY(-100px);
    transition         : 0.3s linear;
    transition-property: opacity, transform;

    @if(mixin-exists(hook-modal-dialog)) {
        @include hook-modal-dialog();
    }
}

/*
 * Open
 */

.x-open>.x-modal-dialog {
    opacity  : 1;
    transform: translateY(0);
}


/* Size modifier
 ========================================================================== */

/*
 * Container size
 * Take the same size as the Container component
 */

.x-modal-container .x-modal-dialog {
    width: $modal-container-width;
}

/*
 * Full size
 * 1. Remove padding and background from modal
 * 2. Reset all default declarations from modal dialog
 */

/* 1 */
.x-modal-full {
    padding   : 0;
    background: none;
}

/* 2 */
.x-modal-full .x-modal-dialog {
    margin   : 0;
    width    : 100%;
    max-width: 100%;
    transform: translateY(0);

    @if(mixin-exists(hook-modal-full)) {
        @include hook-modal-full();
    }
}


/* Sections
 ========================================================================== */

.x-modal-body {
    display: flow-root;
    padding: $modal-body-padding-vertical $modal-body-padding-horizontal;

    @if(mixin-exists(hook-modal-body)) {
        @include hook-modal-body();
    }
}

.x-modal-header {
    display   : flow-root;
    padding   : $modal-header-padding-vertical $modal-header-padding-horizontal;
    background: $modal-header-background;

    @if(mixin-exists(hook-modal-header)) {
        @include hook-modal-header();
    }
}

.x-modal-footer {
    display   : flow-root;
    padding   : $modal-footer-padding-vertical $modal-footer-padding-horizontal;
    background: $modal-footer-background;

    @if(mixin-exists(hook-modal-footer)) {
        @include hook-modal-footer();
    }
}

/*
 * Remove margin from the last-child
 */

.x-modal-body> :last-child,
.x-modal-header> :last-child,
.x-modal-footer> :last-child {
    margin-bottom: 0;
}


/* Title
 ========================================================================== */

.x-modal-title {
    font-size  : $modal-title-font-size;
    line-height: $modal-title-line-height;

    @if(mixin-exists(hook-modal-title)) {
        @include hook-modal-title();
    }
}


/* Close
 * Adopts `x-close`
 ========================================================================== */

[class*='x-modal-close-'] {
    position: absolute;
    z-index : $modal-z-index;
    top     : $modal-close-position;
    right   : $modal-close-position;
    padding : $modal-close-padding;

    @if(mixin-exists(hook-modal-close)) {
        @include hook-modal-close();
    }
}

/*
 * Remove margin from adjacent element
 */

[class*='x-modal-close-']:first-child+* {
    margin-top: 0;
}

/*
 * Hover
 */

[class*='x-modal-close-']:hover {
    @if(mixin-exists(hook-modal-close-hover)) {
        @include hook-modal-close-hover();
    }
}

/*
 * Default
 */

.x-modal-close-default {
    @if(mixin-exists(hook-modal-close-default)) {
        @include hook-modal-close-default();
    }
}

.x-modal-close-default:hover {
    @if(mixin-exists(hook-modal-close-default-hover)) {
        @include hook-modal-close-default-hover();
    }
}

/*
 * Outside
 * 1. Prevent scrollbar on small devices
 */

.x-modal-close-outside {
    top      : $modal-close-outside-position;
    /* 1 */
    right    : (-$modal-close-padding);
    transform: translate(0, -($modal-close-outside-translate));
    color    : $modal-close-outside-color;

    @if(mixin-exists(hook-modal-close-outside)) {
        @include hook-modal-close-outside();
    }
}

.x-modal-close-outside:hover {
    color: $modal-close-outside-hover-color;

    @if(mixin-exists(hook-modal-close-outside-hover)) {
        @include hook-modal-close-outside-hover();
    }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    /* 1 */
    .x-modal-close-outside {
        right    : $modal-close-outside-position;
        transform: translate($modal-close-outside-translate, -($modal-close-outside-translate));
    }

}

/*
 * Full
 */

.x-modal-close-full {
    @if(mixin-exists(hook-modal-close-full)) {
        @include hook-modal-close-full();
    }
}

.x-modal-close-full:hover {
    @if(mixin-exists(hook-modal-close-full-hover)) {
        @include hook-modal-close-full-hover();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-modal-misc)) {
    @include hook-modal-misc();
}

// @mixin hook-modal(){}
// @mixin hook-modal-dialog(){}
// @mixin hook-modal-full(){}
// @mixin hook-modal-header(){}
// @mixin hook-modal-body(){}
// @mixin hook-modal-footer(){}
// @mixin hook-modal-title(){}
// @mixin hook-modal-close(){}
// @mixin hook-modal-close-hover(){}
// @mixin hook-modal-close-default(){}
// @mixin hook-modal-close-default-hover(){}
// @mixin hook-modal-close-outside(){}
// @mixin hook-modal-close-outside-hover(){}
// @mixin hook-modal-close-full(){}
// @mixin hook-modal-close-full-hover(){}
// @mixin hook-modal-misc(){}


//
// Component: Modal
//
// ========================================================================


// Variables
// ========================================================================

$modal-header-background:                        $modal-dialog-background !default;
$modal-footer-background:                        $modal-dialog-background !default;

//
// New
//

$modal-header-border-width:                     $global-border-width !default;
$modal-header-border:                           $global-border !default;

$modal-footer-border-width:                     $global-border-width !default;
$modal-footer-border:                           $global-border !default;

$modal-close-full-padding:                      $global-margin !default;
$modal-close-full-background:                   $modal-dialog-background !default;


// Component
// ========================================================================

// @mixin hook-modal(){}


// Dialog
// ========================================================================

// @mixin hook-modal-dialog(){}


// Full
// ========================================================================

// @mixin hook-modal-full(){}


// Sections
// ========================================================================



// @mixin hook-modal-body(){}




// Title
// ========================================================================

// @mixin hook-modal-title(){}


// Close
// ========================================================================

// @mixin hook-modal-close(){}

// @mixin hook-modal-close-hover(){}

// @mixin hook-modal-close-default(){}

// @mixin hook-modal-close-default-hover(){}

// @mixin hook-modal-close-outside(){}

// @mixin hook-modal-close-outside-hover(){}



// @mixin hook-modal-close-full-hover(){}


// Miscellaneous
// ========================================================================

// @mixin hook-modal-misc(){}
// Name:            Nav
// Description:     Defines styles for list navigations
//
// Component:       `x-nav`
//
// Sub-objects:     `x-nav-header`
//                  `x-nav-divider`
//                  `x-nav-sub`
//
// Modifiers:       `x-nav-parent-icon`
//                  `x-nav-default`
//                  `x-nav-primary`
//                  `x-nav-center`
//
// States:          `x-active`
//                  `x-parent`
//                  `x-open`
//                  `x-touch`
//
// ========================================================================


// Variables
// ========================================================================

$nav-item-padding-vertical  : 5px !default;
$nav-item-padding-horizontal: 0 !default;

$nav-sublist-padding-vertical     : 5px !default;
$nav-sublist-padding-left         : 15px !default;
$nav-sublist-deeper-padding-left  : 15px !default;
$nav-sublist-item-padding-vertical: 2px !default;

$nav-parent-icon-width : ($global-line-height * 1em) !default;
$nav-parent-icon-height: $nav-parent-icon-width !default;
$nav-parent-icon-color : $global-color !default;

$nav-header-padding-vertical  : $nav-item-padding-vertical !default;
$nav-header-padding-horizontal: $nav-item-padding-horizontal !default;
$nav-header-font-size         : $global-small-font-size !default;
$nav-header-text-transform    : uppercase !default;
$nav-header-margin-top        : $global-margin !default;

$nav-divider-margin-vertical  : 5px !default;
$nav-divider-margin-horizontal: 0 !default;

$nav-default-item-color               : $global-muted-color !default;
$nav-default-item-hover-color         : $global-color !default;
$nav-default-item-active-color        : $global-emphasis-color !default;
$nav-default-header-color             : $global-emphasis-color !default;
$nav-default-divider-border-width     : $global-border-width !default;
$nav-default-divider-border           : $global-border !default;
$nav-default-sublist-item-color       : $global-muted-color !default;
$nav-default-sublist-item-hover-color : $global-color !default;
$nav-default-sublist-item-active-color: $global-emphasis-color !default;

$nav-primary-item-font-size           : $global-large-font-size !default;
$nav-primary-item-line-height         : $global-line-height !default;
$nav-primary-item-color               : $global-muted-color !default;
$nav-primary-item-hover-color         : $global-color !default;
$nav-primary-item-active-color        : $global-emphasis-color !default;
$nav-primary-header-color             : $global-emphasis-color !default;
$nav-primary-divider-border-width     : $global-border-width !default;
$nav-primary-divider-border           : $global-border !default;
$nav-primary-sublist-item-color       : $global-muted-color !default;
$nav-primary-sublist-item-hover-color : $global-color !default;
$nav-primary-sublist-item-active-color: $global-emphasis-color !default;

$internal-nav-parent-close-image: "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2214%22%20height%3D%2214%22%20viewBox%3D%220%200%2014%2014%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Cpolyline%20fill%3D%22none%22%20stroke%3D%22#000%22%20stroke-width%3D%221.1%22%20points%3D%2210%201%204%207%2010%2013%22%20%2F%3E%0A%3C%2Fsvg%3E" !default;
$internal-nav-parent-open-image : "data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2214%22%20height%3D%2214%22%20viewBox%3D%220%200%2014%2014%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Cpolyline%20fill%3D%22none%22%20stroke%3D%22#000%22%20stroke-width%3D%221.1%22%20points%3D%221%204%207%2010%2013%204%22%20%2F%3E%0A%3C%2Fsvg%3E" !default;


/* ========================================================================
   Component: Nav
 ========================================================================== */

/*
 * Reset
 * 1. Prepare lists
 * 2. Prepare links
 * 3. Remove default focus style
 */

/* 1 */
.x-nav,
.x-nav ul {
    margin    : 0;
    padding   : 0;
    list-style: none;
}

/* 2 */
.x-nav li>a {
    display        : block;
    text-decoration: none;
}

/* 3 */
.x-nav li>a:focus {
    outline: none;
}

/*
 * Items
 * Must target `a` elements to exclude other elements (e.g. lists)
 */

.x-nav>li>a {
    padding: $nav-item-padding-vertical $nav-item-padding-horizontal;
}


/* Sublists
 ========================================================================== */

/*
 * Level 2
 * `ul` needed for higher specificity to override padding
 */

ul.x-nav-sub {
    padding: $nav-sublist-padding-vertical 0 $nav-sublist-padding-vertical $nav-sublist-padding-left;

    @if(mixin-exists(hook-nav-sub)) {
        @include hook-nav-sub();
    }
}

/*
 * Level 3 and deeper
 */

.x-nav-sub ul {
    padding-left: $nav-sublist-deeper-padding-left;
}

/*
 * Items
 */

.x-nav-sub a {
    padding: $nav-sublist-item-padding-vertical 0;
}


/* Parent icon modifier
 ========================================================================== */

.x-nav-parent-icon>.x-parent>a::after {
    content: "";
    width  : $nav-parent-icon-width;
    height : $nav-parent-icon-height;
    float  : right;
    @include svg-fill($internal-nav-parent-close-image, "#000", $nav-parent-icon-color);
    background-repeat  : no-repeat;
    background-position: 50% 50%;

    @if(mixin-exists(hook-nav-parent-icon)) {
        @include hook-nav-parent-icon();
    }
}

.x-nav-parent-icon>.x-parent.x-open>a::after {
    @include svg-fill($internal-nav-parent-open-image, "#000", $nav-parent-icon-color);
}


/* Header
 ========================================================================== */

.x-nav-header {
    padding       : $nav-header-padding-vertical $nav-header-padding-horizontal;
    text-transform: $nav-header-text-transform;
    font-size     : $nav-header-font-size;

    @if(mixin-exists(hook-nav-header)) {
        @include hook-nav-header();
    }
}

.x-nav-header:not(:first-child) {
    margin-top: $nav-header-margin-top;
}


/* Divider
 ========================================================================== */

.x-nav-divider {
    margin: $nav-divider-margin-vertical $nav-divider-margin-horizontal;

    @if(mixin-exists(hook-nav-divider)) {
        @include hook-nav-divider();
    }
}


/* Default modifier
 ========================================================================== */

.x-nav-default {
    @if(mixin-exists(hook-nav-default)) {
        @include hook-nav-default();
    }
}

/*
 * Items
 */

.x-nav-default>li>a {
    color: $nav-default-item-color;

    @if(mixin-exists(hook-nav-default-item)) {
        @include hook-nav-default-item();
    }
}

/* Hover + Focus */
.x-nav-default>li>a:hover,
.x-nav-default>li>a:focus {
    color: $nav-default-item-hover-color;

    @if(mixin-exists(hook-nav-default-item-hover)) {
        @include hook-nav-default-item-hover();
    }
}

/* Active */
.x-nav-default>li.x-active>a {
    color: $nav-default-item-active-color;

    @if(mixin-exists(hook-nav-default-item-active)) {
        @include hook-nav-default-item-active();
    }
}

/*
 * Header
 */

.x-nav-default .x-nav-header {
    color: $nav-default-header-color;

    @if(mixin-exists(hook-nav-default-header)) {
        @include hook-nav-default-header();
    }
}

/*
 * Divider
 */

.x-nav-default .x-nav-divider {
    border-top: $nav-default-divider-border-width solid $nav-default-divider-border;

    @if(mixin-exists(hook-nav-default-divider)) {
        @include hook-nav-default-divider();
    }
}

/*
 * Sublists
 */

.x-nav-default .x-nav-sub a {
    color: $nav-default-sublist-item-color;
}

.x-nav-default .x-nav-sub a:hover,
.x-nav-default .x-nav-sub a:focus {
    color: $nav-default-sublist-item-hover-color;
}

.x-nav-default .x-nav-sub li.x-active>a {
    color: $nav-default-sublist-item-active-color;
}


/* Primary modifier
 ========================================================================== */

.x-nav-primary {
    @if(mixin-exists(hook-nav-primary)) {
        @include hook-nav-primary();
    }
}

/*
 * Items
 */

.x-nav-primary>li>a {
    font-size  : $nav-primary-item-font-size;
    line-height: $nav-primary-item-line-height;
    color      : $nav-primary-item-color;

    @if(mixin-exists(hook-nav-primary-item)) {
        @include hook-nav-primary-item();
    }
}

/* Hover + Focus */
.x-nav-primary>li>a:hover,
.x-nav-primary>li>a:focus {
    color: $nav-primary-item-hover-color;

    @if(mixin-exists(hook-nav-primary-item-hover)) {
        @include hook-nav-primary-item-hover();
    }
}

/* Active */
.x-nav-primary>li.x-active>a {
    color: $nav-primary-item-active-color;

    @if(mixin-exists(hook-nav-primary-item-active)) {
        @include hook-nav-primary-item-active();
    }
}

/*
 * Header
 */

.x-nav-primary .x-nav-header {
    color: $nav-primary-header-color;

    @if(mixin-exists(hook-nav-primary-header)) {
        @include hook-nav-primary-header();
    }
}

/*
 * Divider
 */

.x-nav-primary .x-nav-divider {
    border-top: $nav-primary-divider-border-width solid $nav-primary-divider-border;

    @if(mixin-exists(hook-nav-primary-divider)) {
        @include hook-nav-primary-divider();
    }
}

/*
 * Sublists
 */

.x-nav-primary .x-nav-sub a {
    color: $nav-primary-sublist-item-color;
}

.x-nav-primary .x-nav-sub a:hover,
.x-nav-primary .x-nav-sub a:focus {
    color: $nav-primary-sublist-item-hover-color;
}

.x-nav-primary .x-nav-sub li.x-active>a {
    color: $nav-primary-sublist-item-active-color;
}


/* Alignment modifier
 ========================================================================== */

.x-nav-center {
    text-align: center;
}

/* Sublists */
.x-nav-center .x-nav-sub,
.x-nav-center .x-nav-sub ul {
    padding-left: 0;
}

/* Parent icon modifier  */
.x-nav-center.x-nav-parent-icon>.x-parent>a::after {
    position: absolute;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-nav-misc)) {
    @include hook-nav-misc();
}

// @mixin hook-nav-sub(){}
// @mixin hook-nav-parent-icon(){}
// @mixin hook-nav-header(){}
// @mixin hook-nav-divider(){}
// @mixin hook-nav-default(){}
// @mixin hook-nav-default-item(){}
// @mixin hook-nav-default-item-hover(){}
// @mixin hook-nav-default-item-active(){}
// @mixin hook-nav-default-header(){}
// @mixin hook-nav-default-divider(){}
// @mixin hook-nav-primary(){}
// @mixin hook-nav-primary-item(){}
// @mixin hook-nav-primary-item-hover(){}
// @mixin hook-nav-primary-item-active(){}
// @mixin hook-nav-primary-header(){}
// @mixin hook-nav-primary-divider(){}
// @mixin hook-nav-misc(){}


// Inverse
// ========================================================================

$inverse-nav-parent-icon-color                : $inverse-global-color !default;
$inverse-nav-default-item-color               : $inverse-global-muted-color !default;
$inverse-nav-default-item-hover-color         : $inverse-global-color !default;
$inverse-nav-default-item-active-color        : $inverse-global-emphasis-color !default;
$inverse-nav-default-header-color             : $inverse-global-emphasis-color !default;
$inverse-nav-default-divider-border           : $inverse-global-border !default;
$inverse-nav-default-sublist-item-color       : $inverse-global-muted-color !default;
$inverse-nav-default-sublist-item-hover-color : $inverse-global-color !default;
$inverse-nav-default-sublist-item-active-color: $inverse-global-emphasis-color !default;

$inverse-nav-primary-item-color               : $inverse-global-muted-color !default;
$inverse-nav-primary-item-hover-color         : $inverse-global-color !default;
$inverse-nav-primary-item-active-color        : $inverse-global-emphasis-color !default;
$inverse-nav-primary-header-color             : $inverse-global-emphasis-color !default;
$inverse-nav-primary-divider-border           : $inverse-global-border !default;
$inverse-nav-primary-sublist-item-color       : $inverse-global-muted-color !default;
$inverse-nav-primary-sublist-item-hover-color : $inverse-global-color !default;
$inverse-nav-primary-sublist-item-active-color: $inverse-global-emphasis-color !default;



// @mixin hook-inverse-nav-parent-icon(){}
// @mixin hook-inverse-nav-default-item(){}
// @mixin hook-inverse-nav-default-item-hover(){}
// @mixin hook-inverse-nav-default-item-active(){}
// @mixin hook-inverse-nav-default-header(){}
// @mixin hook-inverse-nav-default-divider(){}
// @mixin hook-inverse-nav-primary-item(){}
// @mixin hook-inverse-nav-primary-item-hover(){}
// @mixin hook-inverse-nav-primary-item-active(){}
// @mixin hook-inverse-nav-primary-header(){}
// @mixin hook-inverse-nav-primary-divider(){}

//
// Component: Nav
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$nav-default-font-size:                          $global-small-font-size !default;


// Sublists
// ========================================================================

// @mixin hook-nav-sub(){}


// Parent icon modifier
// ========================================================================

// @mixin hook-nav-parent-icon(){}


// Header
// ========================================================================

// @mixin hook-nav-header(){}


// Divider
// ========================================================================

// @mixin hook-nav-divider(){}


// Default style modifier
// ========================================================================



// @mixin hook-nav-default-item(){}

// @mixin hook-nav-default-item-hover(){}

// @mixin hook-nav-default-item-active(){}

// @mixin hook-nav-default-header(){}

// @mixin hook-nav-default-divider(){}


// Primary style modifier
// ========================================================================

// @mixin hook-nav-primary(){}

// @mixin hook-nav-primary-item(){}

// @mixin hook-nav-primary-item-hover(){}

// @mixin hook-nav-primary-item-active(){}

// @mixin hook-nav-primary-header(){}

// @mixin hook-nav-primary-divider(){}


// Miscellaneous
// ========================================================================

// @mixin hook-nav-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-nav-parent-icon(){}

// @mixin hook-inverse-nav-default-item(){}
// @mixin hook-inverse-nav-default-item-hover(){}
// @mixin hook-inverse-nav-default-item-active(){}
// @mixin hook-inverse-nav-default-header(){}
// @mixin hook-inverse-nav-default-divider(){}

// @mixin hook-inverse-nav-primary-item(){}
// @mixin hook-inverse-nav-primary-item-hover(){}
// @mixin hook-inverse-nav-primary-item-active(){}
// @mixin hook-inverse-nav-primary-header(){}
// @mixin hook-inverse-nav-primary-divider(){}
// Name:            Navbar
// Description:     Component to create horizontal navigation bars
//
// Component:       `x-navbar`
//
// Sub-objects:     `x-navbar-container`
//                  `x-navbar-left`
//                  `x-navbar-right`
//                  `x-navbar-center`
//                  `x-navbar-center-left`
//                  `x-navbar-center-right`
//                  `x-navbar-nav`
//                  `x-navbar-item`
//                  `x-navbar-toggle`
//                  `x-navbar-subtitle`
//                  `x-navbar-dropbar`
//
// Adopted:         `x-navbar-dropdown` + Modifiers
//                  `x-navbar-dropdown-nav`
//                  `x-navbar-dropdown-grid`
//                  `x-navbar-toggle-icon`
//
// Modifiers:       `x-navbar-primary`
//                  `x-navbar-transparent`
//                  `x-navbar-sticky`
//                  `x-navbar-dropdown-stack`
//
// States:          `x-active`
//                  `x-parent`
//                  `x-open`
//
//
// ========================================================================


// Variables
// ========================================================================

$navbar-background: $global-muted-background !default;
$navbar-color-mode: none !default;

$navbar-nav-item-height            : 80px !default;
$navbar-nav-item-padding-horizontal: 15px !default;
$navbar-nav-item-color             : $global-muted-color !default;
$navbar-nav-item-font-size         : $global-font-size !default;
$navbar-nav-item-font-family       : $global-font-family !default;
$navbar-nav-item-hover-color       : $global-color !default;
$navbar-nav-item-onclick-color     : $global-emphasis-color !default;
$navbar-nav-item-active-color      : $global-emphasis-color !default;

$navbar-item-color: $global-color !default;

$navbar-toggle-color      : $global-muted-color !default;
$navbar-toggle-hover-color: $global-color !default;

$navbar-subtitle-font-size: $global-small-font-size !default;

$navbar-dropdown-z-index               : $global-z-index+20 !default;
$navbar-dropdown-width                 : 200px !default;
$navbar-dropdown-margin                : 0 !default;
$navbar-dropdown-padding               : 15px !default;
$navbar-dropdown-background            : $global-muted-background !default;
$navbar-dropdown-color                 : $global-color !default;
$navbar-dropdown-grid-gutter-horizontal: $global-gutter !default;
$navbar-dropdown-grid-gutter-vertical  : $navbar-dropdown-grid-gutter-horizontal !default;

$navbar-dropdown-dropbar-margin-top   : 0 !default;
$navbar-dropdown-dropbar-margin-bottom: $navbar-dropdown-dropbar-margin-top !default;

$navbar-dropdown-nav-item-color               : $global-muted-color !default;
$navbar-dropdown-nav-item-hover-color         : $global-color !default;
$navbar-dropdown-nav-item-active-color        : $global-emphasis-color !default;
$navbar-dropdown-nav-header-color             : $global-emphasis-color !default;
$navbar-dropdown-nav-divider-border-width     : $global-border-width !default;
$navbar-dropdown-nav-divider-border           : $global-border !default;
$navbar-dropdown-nav-sublist-item-color       : $global-muted-color !default;
$navbar-dropdown-nav-sublist-item-hover-color : $global-color !default;
$navbar-dropdown-nav-sublist-item-active-color: $global-emphasis-color !default;

$navbar-dropbar-background: $navbar-dropdown-background !default;
$navbar-dropbar-z-index   : $global-z-index - 20 !default;


/* ========================================================================
   Component: Navbar
 ========================================================================== */

/*
 * 1. Create position context to center navbar group
 */

.x-navbar {
    display : flex;
    /* 1 */
    position: relative;

    @if(mixin-exists(hook-navbar)) {
        @include hook-navbar();
    }
}


/* Container
 ========================================================================== */

.x-navbar-container:not(.x-navbar-transparent) {
    background: $navbar-background;

    @if(mixin-exists(hook-navbar-container)) {
        @include hook-navbar-container();
    }
}

// Color Mode
@if ($navbar-color-mode==light) {
    .x-navbar-container:not(.x-navbar-transparent) {
        @extend .x-light !optional;
    }
}

@if ($navbar-color-mode==dark) {
    .x-navbar-container:not(.x-navbar-transparent) {
        @extend .x-dark !optional;
    }
}

/*
 * Remove pseudo elements created by micro clearfix as precaution (if Container component is used)
 */

.x-navbar-container> ::before,
.x-navbar-container> ::after {
    display: none !important;
}


/* Groups
 ========================================================================== */

/*
 * 1. Align navs and items vertically if they have a different height
 * 2. Note: IE 11 requires an extra `div` which affects the center selector
 */

.x-navbar-left,
.x-navbar-right,
// 2. [class*='x-navbar-center'],
.x-navbar-center,
.x-navbar-center-left>*,
.x-navbar-center-right>* {
    display    : flex;
    /* 1 */
    align-items: center;
}

/*
 * Horizontal alignment
 * 1. Create position context for centered navbar with sub groups (left/right)
 * 2. Fix text wrapping if content is larger than 50% of the container.
 * 3. Needed for dropdowns because a new position context is created
 *    `z-index` must be smaller than off-canvas
 * 4. Align sub groups for centered navbar
 */

.x-navbar-right {
    margin-left: auto;
}

.x-navbar-center:only-child {
    margin-left : auto;
    margin-right: auto;
    /* 1 */
    position    : relative;
}

.x-navbar-center:not(:only-child) {
    position  : absolute;
    top       : 50%;
    left      : 50%;
    transform : translate(-50%, -50%);
    /* 2 */
    width     : max-content;
    box-sizing: border-box;
    /* 3 */
    z-index   : $global-z-index - 10;
}

/* 4 */
.x-navbar-center-left,
.x-navbar-center-right {
    position: absolute;
    top     : 0;
}

.x-navbar-center-left {
    right: 100%;
}

.x-navbar-center-right {
    left: 100%;
}

[class*='x-navbar-center-'] {
    width     : max-content;
    box-sizing: border-box;
}


/* Nav
 ========================================================================== */

/*
 * 1. Reset list
 */

.x-navbar-nav {
    display   : flex;
    /* 1 */
    margin    : 0;
    padding   : 0;
    list-style: none;
}

/*
 * Allow items to wrap into the next line
 * Only not `absolute` positioned groups
 */

.x-navbar-left,
.x-navbar-right,
.x-navbar-center:only-child {
    flex-wrap: wrap;
}

/*
 * Items
 * 1. Center content vertically and horizontally
 * 2. Dimensions
 * 3. Style
 * 4. Required for `a`
 */

.x-navbar-nav>li>a,
// Nav item
.x-navbar-item,
// Content item
.x-navbar-toggle {
    // Clickable item
    /* 1 */
    display        : flex;
    justify-content: center;
    align-items    : center;
    /* 2 */
    box-sizing     : border-box;
    min-height     : $navbar-nav-item-height;
    padding        : 0 $navbar-nav-item-padding-horizontal;
    /* 3 */
    font-size      : $navbar-nav-item-font-size;
    font-family    : $navbar-nav-item-font-family;
    /* 4 */
    text-decoration: none;
}

/*
 * Nav items
 */

.x-navbar-nav>li>a {
    color: $navbar-nav-item-color;

    @if(mixin-exists(hook-navbar-nav-item)) {
        @include hook-navbar-nav-item();
    }
}

/*
 * Hover
 * Apply hover style also to focus state and if dropdown is opened
 */

.x-navbar-nav>li:hover>a,
.x-navbar-nav>li>a:focus,
.x-navbar-nav>li>a.x-open {
    color  : $navbar-nav-item-hover-color;
    outline: none;

    @if(mixin-exists(hook-navbar-nav-item-hover)) {
        @include hook-navbar-nav-item-hover();
    }
}

/* OnClick */
.x-navbar-nav>li>a:active {
    color: $navbar-nav-item-onclick-color;

    @if(mixin-exists(hook-navbar-nav-item-onclick)) {
        @include hook-navbar-nav-item-onclick();
    }
}

/* Active */
.x-navbar-nav>li.x-active>a {
    color: $navbar-nav-item-active-color;

    @if(mixin-exists(hook-navbar-nav-item-active)) {
        @include hook-navbar-nav-item-active();
    }
}


/* Item
 ========================================================================== */

.x-navbar-item {
    color: $navbar-item-color;

    @if(mixin-exists(hook-navbar-item)) {
        @include hook-navbar-item();
    }
}


/* Toggle
 ========================================================================== */

.x-navbar-toggle {
    color: $navbar-toggle-color;

    @if(mixin-exists(hook-navbar-toggle)) {
        @include hook-navbar-toggle();
    }
}

.x-navbar-toggle:hover,
.x-navbar-toggle:focus,
.x-navbar-toggle.x-open {
    color          : $navbar-toggle-hover-color;
    outline        : none;
    text-decoration: none;

    @if(mixin-exists(hook-navbar-toggle-hover)) {
        @include hook-navbar-toggle-hover();
    }
}

/*
 * Icon
 * Adopts `x-icon`
 */

.x-navbar-toggle-icon {
    @if(mixin-exists(hook-navbar-toggle-icon)) {
        @include hook-navbar-toggle-icon();
    }
}

/* Hover + Focus */
:hover>.x-navbar-toggle-icon,
:focus>.x-navbar-toggle-icon {
    @if(mixin-exists(hook-navbar-toggle-icon-hover)) {
        @include hook-navbar-toggle-icon-hover();
    }
}


/* Subtitle
 ========================================================================== */

.x-navbar-subtitle {
    font-size: $navbar-subtitle-font-size;

    @if(mixin-exists(hook-navbar-subtitle)) {
        @include hook-navbar-subtitle();
    }
}


/* Style modifiers
 ========================================================================== */

.x-navbar-primary {
    @if(mixin-exists(hook-navbar-primary)) {
        @include hook-navbar-primary();
    }
}

.x-navbar-transparent {
    @if(mixin-exists(hook-navbar-transparent)) {
        @include hook-navbar-transparent();
    }
}

.x-navbar-sticky {
    @if(mixin-exists(hook-navbar-sticky)) {
        @include hook-navbar-sticky();
    }
}


/* Dropdown
 ========================================================================== */

/*
 * Adopts `x-dropdown`
 * 1. Hide by default
 * 2. Set position
 * 3. Set a default width
 * 4. Style
 */

.x-navbar-dropdown {
    /* 1 */
    display   : none;
    /* 2 */
    position  : absolute;
    z-index   : $navbar-dropdown-z-index;
    /* 3 */
    box-sizing: border-box;
    width     : $navbar-dropdown-width;
    /* 4 */
    padding   : $navbar-dropdown-padding;
    background: $navbar-dropdown-background;
    color     : $navbar-dropdown-color;

    @if(mixin-exists(hook-navbar-dropdown)) {
        @include hook-navbar-dropdown();
    }
}

/* Show */
.x-navbar-dropdown.x-open {
    display: block;
}

/*
 * Direction / Alignment modifiers
 */

/* Direction */
[class*='x-navbar-dropdown-top'] {
    margin-top: (-$navbar-dropdown-margin);
}

[class*='x-navbar-dropdown-bottom'] {
    margin-top: $navbar-dropdown-margin;
}

[class*='x-navbar-dropdown-left'] {
    margin-left: (-$navbar-dropdown-margin);
}

[class*='x-navbar-dropdown-right'] {
    margin-left: $navbar-dropdown-margin;
}

/*
 * Grid
 * Adopts `x-grid`
 */

/* Gutter Horizontal */
.x-navbar-dropdown-grid {
    margin-left: (-$navbar-dropdown-grid-gutter-horizontal);
}

.x-navbar-dropdown-grid>* {
    padding-left: $navbar-dropdown-grid-gutter-horizontal;
}

/* Gutter Vertical */
.x-navbar-dropdown-grid>.x-grid-margin {
    margin-top: $navbar-dropdown-grid-gutter-vertical;
}

/* Stack */
.x-navbar-dropdown-stack .x-navbar-dropdown-grid>* {
    width: 100% !important;
}

/*
 * Width modifier
 */

.x-navbar-dropdown-width-2:not(.x-navbar-dropdown-stack) {
    width: ($navbar-dropdown-width * 2);
}

.x-navbar-dropdown-width-3:not(.x-navbar-dropdown-stack) {
    width: ($navbar-dropdown-width * 3);
}

.x-navbar-dropdown-width-4:not(.x-navbar-dropdown-stack) {
    width: ($navbar-dropdown-width * 4);
}

.x-navbar-dropdown-width-5:not(.x-navbar-dropdown-stack) {
    width: ($navbar-dropdown-width * 5);
}

/*
 * Dropbar modifier
 */

.x-navbar-dropdown-dropbar {
    margin-top   : $navbar-dropdown-dropbar-margin-top;
    margin-bottom: $navbar-dropdown-dropbar-margin-bottom;

    @if(mixin-exists(hook-navbar-dropdown-dropbar)) {
        @include hook-navbar-dropdown-dropbar();
    }
}


/* Dropdown Nav
 * Adopts `x-nav`
 ========================================================================== */

.x-navbar-dropdown-nav {
    @if(mixin-exists(hook-navbar-dropdown-nav)) {
        @include hook-navbar-dropdown-nav();
    }
}

/*
 * Items
 */

.x-navbar-dropdown-nav>li>a {
    color: $navbar-dropdown-nav-item-color;

    @if(mixin-exists(hook-navbar-dropdown-nav-item)) {
        @include hook-navbar-dropdown-nav-item();
    }
}

/* Hover + Focus */
.x-navbar-dropdown-nav>li>a:hover,
.x-navbar-dropdown-nav>li>a:focus {
    color: $navbar-dropdown-nav-item-hover-color;

    @if(mixin-exists(hook-navbar-dropdown-nav-item-hover)) {
        @include hook-navbar-dropdown-nav-item-hover();
    }
}

/* Active */
.x-navbar-dropdown-nav>li.x-active>a {
    color: $navbar-dropdown-nav-item-active-color;

    @if(mixin-exists(hook-navbar-dropdown-nav-item-active)) {
        @include hook-navbar-dropdown-nav-item-active();
    }
}

/*
 * Header
 */

.x-navbar-dropdown-nav .x-nav-header {
    color: $navbar-dropdown-nav-header-color;

    @if(mixin-exists(hook-navbar-dropdown-nav-header)) {
        @include hook-navbar-dropdown-nav-header();
    }
}

/*
 * Divider
 */

.x-navbar-dropdown-nav .x-nav-divider {
    border-top: $navbar-dropdown-nav-divider-border-width solid $navbar-dropdown-nav-divider-border;

    @if(mixin-exists(hook-navbar-dropdown-nav-divider)) {
        @include hook-navbar-dropdown-nav-divider();
    }
}

/*
 * Sublists
 */

.x-navbar-dropdown-nav .x-nav-sub a {
    color: $navbar-dropdown-nav-sublist-item-color;
}

.x-navbar-dropdown-nav .x-nav-sub a:hover,
.x-navbar-dropdown-nav .x-nav-sub a:focus {
    color: $navbar-dropdown-nav-sublist-item-hover-color;
}

.x-navbar-dropdown-nav .x-nav-sub li.x-active>a {
    color: $navbar-dropdown-nav-sublist-item-active-color;
}


/* Dropbar
 ========================================================================== */

.x-navbar-dropbar {
    background: $navbar-dropbar-background;

    @if(mixin-exists(hook-navbar-dropbar)) {
        @include hook-navbar-dropbar();
    }
}

/*
 * Slide modifier
 */

.x-navbar-dropbar-slide {
    position: absolute;
    z-index : $navbar-dropbar-z-index;
    left    : 0;
    right   : 0;

    @if(mixin-exists(hook-navbar-dropbar-slide)) {
        @include hook-navbar-dropbar-slide();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-navbar-misc)) {
    @include hook-navbar-misc();
}

// @mixin hook-navbar(){}
// @mixin hook-navbar-container(){}
// @mixin hook-navbar-nav-item(){}
// @mixin hook-navbar-nav-item-hover(){}
// @mixin hook-navbar-nav-item-onclick(){}
// @mixin hook-navbar-nav-item-active(){}
// @mixin hook-navbar-item(){}
// @mixin hook-navbar-toggle(){}
// @mixin hook-navbar-toggle-hover(){}
// @mixin hook-navbar-toggle-icon(){}
// @mixin hook-navbar-toggle-icon-hover(){}
// @mixin hook-navbar-subtitle(){}
// @mixin hook-navbar-primary(){}
// @mixin hook-navbar-transparent(){}
// @mixin hook-navbar-sticky(){}
// @mixin hook-navbar-dropdown(){}
// @mixin hook-navbar-dropdown-dropbar(){}
// @mixin hook-navbar-dropdown-nav(){}
// @mixin hook-navbar-dropdown-nav-item(){}
// @mixin hook-navbar-dropdown-nav-item-hover(){}
// @mixin hook-navbar-dropdown-nav-item-active(){}
// @mixin hook-navbar-dropdown-nav-header(){}
// @mixin hook-navbar-dropdown-nav-divider(){}
// @mixin hook-navbar-dropbar(){}
// @mixin hook-navbar-dropbar-slide(){}
// @mixin hook-navbar-misc(){}


// Inverse
// ========================================================================

$inverse-navbar-nav-item-color        : $inverse-global-muted-color !default;
$inverse-navbar-nav-item-hover-color  : $inverse-global-color !default;
$inverse-navbar-nav-item-onclick-color: $inverse-global-emphasis-color !default;
$inverse-navbar-nav-item-active-color : $inverse-global-emphasis-color !default;
$inverse-navbar-item-color            : $inverse-global-color !default;
$inverse-navbar-toggle-color          : $inverse-global-muted-color !default;
$inverse-navbar-toggle-hover-color    : $inverse-global-color !default;



// @mixin hook-inverse-navbar-nav-item(){}
// @mixin hook-inverse-navbar-nav-item-hover(){}
// @mixin hook-inverse-navbar-nav-item-onclick(){}
// @mixin hook-inverse-navbar-nav-item-active(){}
// @mixin hook-inverse-navbar-item(){}
// @mixin hook-inverse-navbar-toggle(){}
// @mixin hook-inverse-navbar-toggle-hover(){}

//
// Component: Navbar
//
// ========================================================================


// Variables
// ========================================================================

$navbar-nav-item-font-size:                      $global-small-font-size !default;

$navbar-dropdown-margin:                         15px !default;
$navbar-dropdown-padding:                        25px !default;
$navbar-dropdown-background:                     $global-background !default;
$navbar-dropdown-grid-gutter-horizontal:         ($navbar-dropdown-padding * 2) !default;

//
// New
//

$navbar-nav-item-text-transform:                 uppercase !default;

$navbar-dropdown-nav-font-size:                  $global-small-font-size !default;

$navbar-dropdown-box-shadow:                     0 5px 12px rgba(0,0,0,0.15) !default;

$navbar-dropbar-box-shadow:                      0 5px 7px rgba(0, 0, 0, 0.05) !default;

$navbar-dropdown-grid-divider-border-width:      $global-border-width !default;
$navbar-dropdown-grid-divider-border:            $navbar-dropdown-nav-divider-border !default;


// Component
// ========================================================================

// @mixin hook-navbar(){}


// Container
// ========================================================================

// @mixin hook-navbar-container(){}


// Nav
// ========================================================================



// @mixin hook-navbar-nav-item-hover(){}

// @mixin hook-navbar-nav-item-onclick(){}

// @mixin hook-navbar-nav-item-active(){}


// Item
// ========================================================================

// @mixin hook-navbar-item(){}


// Toggle
// ========================================================================

// @mixin hook-navbar-toggle(){}

// @mixin hook-navbar-toggle-hover(){}

// @mixin hook-navbar-toggle-icon(){}

// @mixin hook-navbar-toggle-icon-hover(){}


// Subtitle
// ========================================================================

// @mixin hook-navbar-subtitle(){}


// Style modifiers
// ========================================================================

// @mixin hook-navbar-primary(){}

// @mixin hook-navbar-transparent(){}

// @mixin hook-navbar-sticky(){}


// Dropdown
// ========================================================================






// Dropdown nav
// ========================================================================



// @mixin hook-navbar-dropdown-nav-item(){}

// @mixin hook-navbar-dropdown-nav-item-hover(){}

// @mixin hook-navbar-dropdown-nav-header(){}

// @mixin hook-navbar-dropdown-nav-divider(){}


// Dropbar
// ========================================================================

// @mixin hook-navbar-dropbar(){}




// Miscellaneous
// ========================================================================




// Inverse
// ========================================================================

// @mixin hook-inverse-navbar-nav-item(){}
// @mixin hook-inverse-navbar-nav-item-hover(){}
// @mixin hook-inverse-navbar-nav-item-onclick(){}
// @mixin hook-inverse-navbar-nav-item-active(){}

// @mixin hook-inverse-navbar-item(){}

// @mixin hook-inverse-navbar-toggle(){}
// @mixin hook-inverse-navbar-toggle-hover(){}
// Name:            Notification
// Description:     Component to create notification messages
//
// Component:       `x-notification`
//
// Sub-objects:     `x-notification-message`
//
// Adopted:         `x-notification-close`
//
// Modifiers:       `x-notification-top-center`
//                  `x-notification-top-right`
//                  `x-notification-bottom-left`
//                  `x-notification-bottom-center`
//                  `x-notification-bottom-right`
//                  `x-notification-message-primary`
//                  `x-notification-message-success`
//                  `x-notification-message-warning`
//                  `x-notification-message-danger`
//
// ========================================================================


// Variables
// ========================================================================

$notification-position: 10px !default;
$notification-z-index : $global-z-index+40 !default;
$notification-width   : 350px !default;

$notification-message-margin-top : 10px !default;
$notification-message-padding    : $global-small-gutter !default;
$notification-message-background : $global-muted-background !default;
$notification-message-color      : $global-color !default;
$notification-message-font-size  : $global-medium-font-size !default;
$notification-message-line-height: 1.4 !default;

$notification-close-top  : $notification-message-padding+5px !default;
$notification-close-right: $notification-message-padding !default;

$notification-message-primary-color: $global-primary-background !default;
$notification-message-success-color: $global-success-background !default;
$notification-message-warning-color: $global-warning-background !default;
$notification-message-danger-color : $global-danger-background !default;


/* ========================================================================
   Component: Notification
 ========================================================================== */

/*
 * 1. Set position
 * 2. Dimensions
 */

.x-notification {
    /* 1 */
    position  : fixed;
    top       : $notification-position;
    left      : $notification-position;
    z-index   : $notification-z-index;
    /* 2 */
    box-sizing: border-box;
    width     : $notification-width;

    @if(mixin-exists(hook-notification)) {
        @include hook-notification();
    }
}


/* Position modifiers
========================================================================== */

.x-notification-top-right,
.x-notification-bottom-right {
    left : auto;
    right: $notification-position;
}

.x-notification-top-center,
.x-notification-bottom-center {
    left       : 50%;
    margin-left: ($notification-width / -2);
}

.x-notification-bottom-left,
.x-notification-bottom-right,
.x-notification-bottom-center {
    top   : auto;
    bottom: $notification-position;
}


/* Responsiveness
========================================================================== */

/* Phones portrait and smaller */
@media (max-width: $breakpoint-xsmall-max) {

    .x-notification {
        left  : $notification-position;
        right : $notification-position;
        width : auto;
        margin: 0;
    }

}


/* Message
========================================================================== */

.x-notification-message {
    position   : relative;
    padding    : $notification-message-padding;
    background : $notification-message-background;
    color      : $notification-message-color;
    font-size  : $notification-message-font-size;
    line-height: $notification-message-line-height;
    cursor     : pointer;

    @if(mixin-exists(hook-notification-message)) {
        @include hook-notification-message();
    }
}

*+.x-notification-message {
    margin-top: $notification-message-margin-top;
}


/* Close
 * Adopts `x-close`
 ========================================================================== */

.x-notification-close {
    display : none;
    position: absolute;
    top     : $notification-close-top;
    right   : $notification-close-right;

    @if(mixin-exists(hook-notification-close)) {
        @include hook-notification-close();
    }
}

.x-notification-message:hover .x-notification-close {
    display: block;
}


/* Style modifiers
 ========================================================================== */

/*
 * Primary
 */

.x-notification-message-primary {
    color: $notification-message-primary-color;

    @if(mixin-exists(hook-notification-message-primary)) {
        @include hook-notification-message-primary();
    }
}

/*
 * Success
 */

.x-notification-message-success {
    color: $notification-message-success-color;

    @if(mixin-exists(hook-notification-message-success)) {
        @include hook-notification-message-success();
    }
}

/*
 * Warning
 */

.x-notification-message-warning {
    color: $notification-message-warning-color;

    @if(mixin-exists(hook-notification-message-warning)) {
        @include hook-notification-message-warning();
    }
}

/*
 * Danger
 */

.x-notification-message-danger {
    color: $notification-message-danger-color;

    @if(mixin-exists(hook-notification-message-danger)) {
        @include hook-notification-message-danger();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-notification-misc)) {
    @include hook-notification-misc();
}

// @mixin hook-notification(){}
// @mixin hook-notification-message(){}
// @mixin hook-notification-close(){}
// @mixin hook-notification-message-primary(){}
// @mixin hook-notification-message-success(){}
// @mixin hook-notification-message-warning(){}
// @mixin hook-notification-message-danger(){}
// @mixin hook-notification-misc(){}

//
// Component: Notification
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-notification(){}


// Message
// ========================================================================

// @mixin hook-notification-message(){}


// Close
// ========================================================================

// @mixin hook-notification-close(){}


// Style modifiers
// ========================================================================

// @mixin hook-notification-message-primary(){}

// @mixin hook-notification-message-success(){}

// @mixin hook-notification-message-warning(){}

// @mixin hook-notification-message-danger(){}


// Miscellaneous
// ========================================================================

// @mixin hook-notification-misc(){}
// Name:            Off-canvas
// Description:     Component to create an off-canvas sidebar
//
// Component:       `x-offcanvas`
//
// Sub-objects:     `x-offcanvas-bar`
//                  `x-offcanvas-container`
//                  `x-offcanvas-page`
//
// Adopted:         `x-offcanvas-close`
//
// Modifiers:       `x-offcanvas-flip`
//                  `x-offcanvas-bar-animation`
//                  `x-offcanvas-reveal`
//                  `x-offcanvas-overlay`
//                  `x-offcanvas-container-animation`
//
// States:          `x-open`
//
// ========================================================================


// Variables
// ========================================================================

$offcanvas-z-index: $global-z-index !default;

$offcanvas-bar-width             : 270px !default;
$offcanvas-bar-padding-vertical  : $global-margin !default;
$offcanvas-bar-padding-horizontal: $global-margin !default;
$offcanvas-bar-background        : $global-secondary-background !default;
$offcanvas-bar-color-mode        : light !default;

$offcanvas-bar-width-m             : 350px !default;
$offcanvas-bar-padding-vertical-m  : $global-medium-gutter !default;
$offcanvas-bar-padding-horizontal-m: $global-medium-gutter !default;

$offcanvas-close-position: 20px !default;
$offcanvas-close-padding : 5px !default;

$offcanvas-overlay-background: rgba(0, 0, 0, 0.1) !default;


/* ========================================================================
   Component: Off-canvas
 ========================================================================== */

/*
 * 1. Hide by default
 * 2. Set position
 */

.x-offcanvas {
    /* 1 */
    display : none;
    /* 2 */
    position: fixed;
    top     : 0;
    bottom  : 0;
    left    : 0;
    z-index : $offcanvas-z-index;
}

/*
 * Flip modifier
 */

.x-offcanvas-flip .x-offcanvas {
    right: 0;
    left : auto;
}


/* Bar
 ========================================================================== */

/*
 * 1. Set position
 * 2. Size and style
 * 3. Allow scrolling
 */

.x-offcanvas-bar {
    /* 1 */
    position                  : absolute;
    top                       : 0;
    bottom                    : 0;
    left                      : (-$offcanvas-bar-width);
    /* 2 */
    box-sizing                : border-box;
    width                     : $offcanvas-bar-width;
    padding                   : $offcanvas-bar-padding-vertical $offcanvas-bar-padding-horizontal;
    background                : $offcanvas-bar-background;
    /* 3 */
    overflow-y                : auto;
    -webkit-overflow-scrolling: touch;

    @if(mixin-exists(hook-offcanvas-bar)) {
        @include hook-offcanvas-bar();
    }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-offcanvas-bar {
        left   : (-$offcanvas-bar-width-m);
        width  : $offcanvas-bar-width-m;
        padding: $offcanvas-bar-padding-vertical-m $offcanvas-bar-padding-horizontal-m;
    }

}

// Color Mode
@if ($offcanvas-bar-color-mode==light) {
    .x-offcanvas-bar {
        @extend .x-light !optional;
    }
}

@if ($offcanvas-bar-color-mode==dark) {
    .x-offcanvas-bar {
        @extend .x-dark !optional;
    }
}

/* Flip modifier */
.x-offcanvas-flip .x-offcanvas-bar {
    left : auto;
    right: (-$offcanvas-bar-width);
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-offcanvas-flip .x-offcanvas-bar {
        right: (-$offcanvas-bar-width-m);
    }

}

/*
 * Open
 */

.x-open>.x-offcanvas-bar {
    left: 0;
}

.x-offcanvas-flip .x-open>.x-offcanvas-bar {
    left : auto;
    right: 0;
}

/*
 * Slide Animation (Used in slide and push mode)
 */

.x-offcanvas-bar-animation {
    transition: left 0.3s ease-out;
}

.x-offcanvas-flip .x-offcanvas-bar-animation {
    transition-property: right;
}

/*
 * Reveal Animation
 * 1. Set position
 * 2. Clip the bar
 * 3. Animation
 * 4. Reset position
 */

.x-offcanvas-reveal {
    /* 1 */
    position  : absolute;
    top       : 0;
    bottom    : 0;
    left      : 0;
    /* 2 */
    width     : 0;
    overflow  : hidden;
    /* 3 */
    transition: width 0.3s ease-out;
}

.x-offcanvas-reveal .x-offcanvas-bar {
    /* 4 */
    left: 0;
}

.x-offcanvas-flip .x-offcanvas-reveal .x-offcanvas-bar {
    /* 4 */
    left : auto;
    right: 0;
}

.x-open>.x-offcanvas-reveal {
    width: $offcanvas-bar-width;
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-open>.x-offcanvas-reveal {
        width: $offcanvas-bar-width-m;
    }

}

/*
 * Flip modifier
 */

.x-offcanvas-flip .x-offcanvas-reveal {
    right: 0;
    left : auto;
}


/* Close
 * Adopts `x-close`
 ========================================================================== */

.x-offcanvas-close {
    position: absolute;
    z-index : $offcanvas-z-index;
    top     : $offcanvas-close-position;
    right   : $offcanvas-close-position;
    padding : $offcanvas-close-padding;

    @if(mixin-exists(hook-offcanvas-close)) {
        @include hook-offcanvas-close();
    }
}


/* Overlay
 ========================================================================== */

/*
 * Overlay the whole page. Needed for the `::before`
 * 1. Using `100vw` so no modification is needed when off-canvas is flipped
 * 2. Allow for closing with swipe gesture on devices with pointer events.
 */

.x-offcanvas-overlay {
    /* 1 */
    width       : 100vw;
    /* 2 */
    touch-action: none;
}

/*
 * 1. Mask the whole page
 * 2. Fade-in transition
 */

.x-offcanvas-overlay::before {
    /* 1 */
    content   : "";
    position  : absolute;
    top       : 0;
    bottom    : 0;
    left      : 0;
    right     : 0;
    background: $offcanvas-overlay-background;
    /* 2 */
    opacity   : 0;
    transition: opacity 0.15s linear;

    @if(mixin-exists(hook-offcanvas-overlay)) {
        @include hook-offcanvas-overlay();
    }
}

.x-offcanvas-overlay.x-open::before {
    opacity: 1;
}


/* Prevent scrolling
 ========================================================================== */

/*
 * Prevent horizontal scrollbar when the content is slide-out
 * Has to be on the `html` element too to make it work on the `body`
 */

.x-offcanvas-page,
.x-offcanvas-container {
    overflow-x: hidden;
}


/* Container
 ========================================================================== */

/*
 * Prepare slide-out animation (Used in reveal and push mode)
 * Using `position: left` instead of `transform` because position `fixed` elements like sticky navbars
 * lose their fixed state and behaves like `absolute` within a transformed container
 * 1. Provide a fixed width and prevent shrinking
 */

.x-offcanvas-container {
    position  : relative;
    left      : 0;
    transition: left 0.3s ease-out;
    /* 1 */
    box-sizing: border-box;
    width     : 100%;
}

/*
 * Activate slide-out animation
 */

:not(.x-offcanvas-flip).x-offcanvas-container-animation {
    left: $offcanvas-bar-width;
}

.x-offcanvas-flip.x-offcanvas-container-animation {
    left: (-$offcanvas-bar-width);
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    :not(.x-offcanvas-flip).x-offcanvas-container-animation {
        left: $offcanvas-bar-width-m;
    }

    .x-offcanvas-flip.x-offcanvas-container-animation {
        left: (-$offcanvas-bar-width-m);
    }

}


// Hooks
// ========================================================================

@if(mixin-exists(hook-offcanvas-misc)) {
    @include hook-offcanvas-misc();
}

// @mixin hook-offcanvas-bar(){}
// @mixin hook-offcanvas-close(){}
// @mixin hook-offcanvas-overlay(){}
// @mixin hook-offcanvas-misc(){}


//
// Component: Off-canvas
//
// ========================================================================


// Variables
// ========================================================================


// Bar
// ========================================================================

// @mixin hook-offcanvas-bar(){}


// Close
// ========================================================================

// @mixin hook-offcanvas-close(){}


// Overlay
// ========================================================================

// @mixin hook-offcanvas-overlay(){}


// Miscellaneous
// ========================================================================

// @mixin hook-offcanvas-misc(){}
// Name:            Overlay
// Description:     Component to create content areas overlaying an image
//
// Component:       `x-overlay`
//
// Adopted:         `x-overlay-icon`
//
// Modifier:        `x-overlay-default`
//                  `x-overlay-primary`
//
// ========================================================================


// Variables
// ========================================================================

$overlay-padding-horizontal: $global-gutter !default;
$overlay-padding-vertical  : $global-gutter !default;

$overlay-default-background: rgba($global-background, 0.8) !default;

$overlay-primary-background: rgba($global-secondary-background, 0.8) !default;
$overlay-primary-color-mode: light !default;


/* ========================================================================
   Component: Overlay
 ========================================================================== */

.x-overlay {
    padding: $overlay-padding-vertical $overlay-padding-horizontal;

    @if(mixin-exists(hook-overlay)) {
        @include hook-overlay();
    }
}

/*
 * Remove margin from the last-child
 */

.x-overlay> :last-child {
    margin-bottom: 0;
}


/* Icon
 ========================================================================== */

.x-overlay-icon {
    @if(mixin-exists(hook-overlay-icon)) {
        @include hook-overlay-icon();
    }
}


/* Style modifiers
 ========================================================================== */

/*
 * Default
 */

.x-overlay-default {
    background: $overlay-default-background;

    @if(mixin-exists(hook-overlay-default)) {
        @include hook-overlay-default();
    }
}

/*
 * Primary
 */

.x-overlay-primary {
    background: $overlay-primary-background;

    @if(mixin-exists(hook-overlay-primary)) {
        @include hook-overlay-primary();
    }
}

// Color Mode
@if ($overlay-primary-color-mode==light) {
    .x-overlay-primary {
        @extend .x-light !optional;
    }
}

@if ($overlay-primary-color-mode==dark) {
    .x-overlay-primary {
        @extend .x-dark !optional;
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-overlay-misc)) {
    @include hook-overlay-misc();
}

// @mixin hook-overlay(){}
// @mixin hook-overlay-icon(){}
// @mixin hook-overlay-default(){}
// @mixin hook-overlay-primary(){}
// @mixin hook-overlay-misc(){}

//
// Component: Overlay
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-overlay(){}

// Icon
// ========================================================================

// @mixin hook-overlay-icon(){}


// Style modifiers
// ========================================================================

// @mixin hook-overlay-default(){}

// @mixin hook-overlay-primary(){}


// Miscellaneous
// ========================================================================

// @mixin hook-overlay-misc(){}
// Name:            Padding
// Description:     Utilities for padding
//
// Component:       `x-padding`
//                  `x-padding-large`
//                  `x-padding-remove-*`
//
// ========================================================================


// Variables
// ========================================================================

$padding-padding  : $global-gutter !default;
$padding-padding-l: $global-medium-gutter !default;

$padding-small-padding: $global-small-gutter !default;

$padding-large-padding  : $global-gutter !default;
$padding-large-padding-l: $global-large-gutter !default;


/* ========================================================================
   Component: Padding
 ========================================================================== */

.x-padding {
    padding: $padding-padding;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-padding {
        padding: $padding-padding-l;
    }

}


/* Small
 ========================================================================== */

.x-padding-small {
    padding: $padding-small-padding;
}


/* Large
 ========================================================================== */

.x-padding-large {
    padding: $padding-large-padding;
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-padding-large {
        padding: $padding-large-padding-l;
    }

}


/* Remove
 ========================================================================== */

.x-padding-remove {
    padding: 0 !important;
}

.x-padding-remove-top {
    padding-top: 0 !important;
}

.x-padding-remove-bottom {
    padding-bottom: 0 !important;
}

.x-padding-remove-left {
    padding-left: 0 !important;
}

.x-padding-remove-right {
    padding-right: 0 !important;
}

.x-padding-remove-vertical {
    padding-top   : 0 !important;
    padding-bottom: 0 !important;
}

.x-padding-remove-horizontal {
    padding-left : 0 !important;
    padding-right: 0 !important;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-padding-misc)) {
    @include hook-padding-misc();
}

// @mixin hook-padding-misc(){}

//
// Component: Padding
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-padding-misc(){}
// Name:            Pagination
// Description:     Component to create a page navigation
//
// Component:       `x-pagination`
//
// Adopted:         `x-pagination-next`
//                  `x-pagination-previous`
//
// States:          `x-active`
//                  `x-disabled`
//
// ========================================================================


// Variables
// ========================================================================

$pagination-margin-horizontal: 0 !default;

$pagination-item-padding-vertical     : 5px !default;
$pagination-item-padding-horizontal   : 10px !default;
$pagination-item-color                : $global-muted-color !default;
$pagination-item-hover-color          : $global-color !default;
$pagination-item-hover-text-decoration: none !default;
$pagination-item-active-color         : $global-color !default;
$pagination-item-disabled-color       : $global-muted-color !default;


/* ========================================================================
   Component: Pagination
 ========================================================================== */

/*
 * 1. Allow items to wrap into the next line
 * 2. Gutter
 * 3. Reset list
 */

.x-pagination {
    display    : flex;
    /* 1 */
    flex-wrap  : wrap;
    /* 2 */
    margin-left: (-$pagination-margin-horizontal);
    /* 3 */
    padding    : 0;
    list-style : none;

    @if(mixin-exists(hook-pagination)) {
        @include hook-pagination();
    }
}

/*
 * 1. Space is allocated solely based on content dimensions: 0 0 auto
 * 2. Gutter
 * 3. Create position context for dropdowns
 */

.x-pagination>* {
    /* 1 */
    flex        : none;
    /* 2 */
    padding-left: $pagination-margin-horizontal;
    /* 3 */
    position    : relative;
}


/* Items
 ========================================================================== */

/*
 * 1. Prevent gap if child element is `inline-block`, e.g. an icon
 * 2. Style
 */

.x-pagination>*>* {
    /* 1 */
    display: block;
    /* 2 */
    padding: $pagination-item-padding-vertical $pagination-item-padding-horizontal;
    color  : $pagination-item-color;

    @if(mixin-exists(hook-pagination-item)) {
        @include hook-pagination-item();
    }
}

/* Hover + Focus */
.x-pagination>*> :hover,
.x-pagination>*> :focus {
    color          : $pagination-item-hover-color;
    text-decoration: $pagination-item-hover-text-decoration;

    @if(mixin-exists(hook-pagination-item-hover)) {
        @include hook-pagination-item-hover();
    }
}

/* Active */
.x-pagination>.x-active>* {
    color: $pagination-item-active-color;

    @if(mixin-exists(hook-pagination-item-active)) {
        @include hook-pagination-item-active();
    }
}

/* Disabled */
.x-pagination>.x-disabled>* {
    color: $pagination-item-disabled-color;

    @if(mixin-exists(hook-pagination-item-disabled)) {
        @include hook-pagination-item-disabled();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-pagination-misc)) {
    @include hook-pagination-misc();
}

// @mixin hook-pagination(){}
// @mixin hook-pagination-item(){}
// @mixin hook-pagination-item-hover(){}
// @mixin hook-pagination-item-active(){}
// @mixin hook-pagination-item-disabled(){}
// @mixin hook-pagination-misc(){}


// Inverse
// ========================================================================

$inverse-pagination-item-color         : $inverse-global-muted-color !default;
$inverse-pagination-item-hover-color   : $inverse-global-color !default;
$inverse-pagination-item-active-color  : $inverse-global-color !default;
$inverse-pagination-item-disabled-color: $inverse-global-muted-color !default;



// @mixin hook-inverse-pagination-item(){}
// @mixin hook-inverse-pagination-item-hover(){}
// @mixin hook-inverse-pagination-item-active(){}
// @mixin hook-inverse-pagination-item-disabled(){}

//
// Component: Pagination
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-pagination(){}


// Items
// ========================================================================



// @mixin hook-pagination-item-hover(){}

// @mixin hook-pagination-item-active(){}

// @mixin hook-pagination-item-disabled(){}


// Miscellaneous
// ========================================================================

// @mixin hook-pagination-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-pagination-item(){}
// @mixin hook-inverse-pagination-item-hover(){}
// @mixin hook-inverse-pagination-item-active(){}
// @mixin hook-inverse-pagination-item-disabled(){}
// Name:            Placeholder
// Description:     Component to create placeholder boxes
//
// Component:       `x-placeholder`
//
// ========================================================================


// Variables
// ========================================================================

$placeholder-margin-vertical   : $global-margin !default;
$placeholder-padding-vertical  : $global-gutter !default;
$placeholder-padding-horizontal: $global-gutter !default;
$placeholder-background        : $global-muted-background !default;


/* ========================================================================
   Component: Placeholder
 ========================================================================== */

.x-placeholder {
  margin-bottom: $placeholder-margin-vertical;
  padding      : $placeholder-padding-vertical $placeholder-padding-horizontal;
  background   : $placeholder-background;

  @if(mixin-exists(hook-placeholder)) {
    @include hook-placeholder();
  }
}

/* Add margin if adjacent element */
*+.x-placeholder {
  margin-top: $placeholder-margin-vertical;
}

/*
 * Remove margin from the last-child
 */

.x-placeholder> :last-child {
  margin-bottom: 0;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-placeholder-misc)) {
  @include hook-placeholder-misc();
}

// @mixin hook-placeholder(){}
// @mixin hook-placeholder-misc(){}

//
// Component: Placeholder
//
// ========================================================================


// Variables
// ========================================================================

$placeholder-background:                         transparent !default;

//
// New
//

$placeholder-border-width:                       $global-border-width !default;
$placeholder-border:                             $global-border !default;


// Component
// ========================================================================




// Miscellaneous
// ========================================================================

// @mixin hook-placeholder-misc(){}

// Name:            Position
// Description:     Utilities to position content
//
// Component:       `x-position-absolute`
//                  `x-position-relative`
//                  `x-position-z-index`
//                  `x-position-top`
//                  `x-position-bottom`
//                  `x-position-left`
//                  `x-position-right`
//                  `x-position-top-left`
//                  `x-position-top-center`
//                  `x-position-top-right`
//                  `x-position-bottom-left`
//                  `x-position-bottom-center`
//                  `x-position-bottom-right`
//                  `x-position-center`
//                  `x-position-center-left`
//                  `x-position-center-right`
//                  `x-position-cover`
//
// Modifiers:       `x-position-small`
//                  `x-position-medium`
//                  `x-position-large`
//
// ========================================================================


// Variables
// ========================================================================

$position-small-margin  : $global-small-gutter !default;
$position-medium-margin : $global-gutter !default;
$position-large-margin  : $global-gutter !default;
$position-large-margin-l: 50px !default;


/* ========================================================================
   Component: Position
 ========================================================================== */


/* Directions
 ========================================================================== */

/*
 * 1. Prevent content overflow if `max-width: 100%` is used inside position container.
 */

[class*='x-position-top'],
[class*='x-position-bottom'],
[class*='x-position-left'],
[class*='x-position-right'],
[class*='x-position-center'] {
    position : absolute !important;
    /* 1 */
    max-width: 100%;
}


/* Edges
 ========================================================================== */

/* Don't use `width: 100%` because it is wrong if the parent has padding. */
.x-position-top {
    top  : 0;
    left : 0;
    right: 0;
}

.x-position-bottom {
    bottom: 0;
    left  : 0;
    right : 0;
}

.x-position-left {
    top   : 0;
    bottom: 0;
    left  : 0;
}

.x-position-right {
    top   : 0;
    bottom: 0;
    right : 0;
}


/* Corners
 ========================================================================== */

.x-position-top-left {
    top : 0;
    left: 0;
}

.x-position-top-right {
    top  : 0;
    right: 0;
}

.x-position-bottom-left {
    bottom: 0;
    left  : 0;
}

.x-position-bottom-right {
    bottom: 0;
    right : 0;
}

/*
 * Center
 * 1. Fix text wrapping if content is larger than 50% of the container.
 */

.x-position-center {
    top       : 50%;
    left      : 50%;
    transform : translate(-50%, -50%);
    /* 1 */
    width     : max-content;
    max-width : 100%;
    box-sizing: border-box;
}

/* Vertical */
[class*='x-position-center-left'],
[class*='x-position-center-right'] {
    top      : 50%;
    transform: translateY(-50%);
}

.x-position-center-left {
    left: 0;
}

.x-position-center-right {
    right: 0;
}

.x-position-center-left-out {
    right: 100%;
    width: max-content;
}

.x-position-center-right-out {
    left : 100%;
    width: max-content;
}

/* Horizontal */
.x-position-top-center,
.x-position-bottom-center {
    left      : 50%;
    transform : translateX(-50%);
    /* 1 */
    width     : max-content;
    max-width : 100%;
    box-sizing: border-box;
}

.x-position-top-center {
    top: 0;
}

.x-position-bottom-center {
    bottom: 0;
}


/* Cover
 ========================================================================== */

.x-position-cover {
    position: absolute;
    top     : 0;
    bottom  : 0;
    left    : 0;
    right   : 0;
}


/* Utility
 ========================================================================== */

.x-position-relative {
    position: relative !important;
}

.x-position-absolute {
    position: absolute !important;
}

.x-position-fixed {
    position: fixed !important;
}

.x-position-z-index {
    z-index: 1;
}


/* Margin modifier
 ========================================================================== */

/*
 * Small
 */

.x-position-small {
    max-width: unquote('calc(100% - (#{$position-small-margin} * 2))');
    margin   : $position-small-margin;
}

.x-position-small.x-position-center {
    transform: translate(-50%, -50%) translate(-$position-small-margin, (-$position-small-margin));
}

.x-position-small[class*='x-position-center-left'],
.x-position-small[class*='x-position-center-right'] {
    transform: translateY(-50%) translateY(-$position-small-margin);
}

.x-position-small.x-position-top-center,
.x-position-small.x-position-bottom-center {
    transform: translateX(-50%) translateX(-$position-small-margin);
}

/*
 * Medium
 */

.x-position-medium {
    max-width: unquote('calc(100% - (#{$position-medium-margin} * 2))');
    margin   : $position-medium-margin;
}

.x-position-medium.x-position-center {
    transform: translate(-50%, -50%) translate(-$position-medium-margin, (-$position-medium-margin));
}

.x-position-medium[class*='x-position-center-left'],
.x-position-medium[class*='x-position-center-right'] {
    transform: translateY(-50%) translateY(-$position-medium-margin);
}

.x-position-medium.x-position-top-center,
.x-position-medium.x-position-bottom-center {
    transform: translateX(-50%) translateX(-$position-medium-margin);
}

/*
 * Large
 */

.x-position-large {
    max-width: unquote('calc(100% - (#{$position-large-margin} * 2))');
    margin   : $position-large-margin;
}

.x-position-large.x-position-center {
    transform: translate(-50%, -50%) translate(-$position-large-margin, (-$position-large-margin));
}

.x-position-large[class*='x-position-center-left'],
.x-position-large[class*='x-position-center-right'] {
    transform: translateY(-50%) translateY(-$position-large-margin);
}

.x-position-large.x-position-top-center,
.x-position-large.x-position-bottom-center {
    transform: translateX(-50%) translateX(-$position-large-margin);
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-position-large {
        max-width: unquote('calc(100% - (#{$position-large-margin-l} * 2))');
        margin   : $position-large-margin-l;
    }

    .x-position-large.x-position-center {
        transform: translate(-50%, -50%) translate(-$position-large-margin-l, (-$position-large-margin-l));
    }

    .x-position-large[class*='x-position-center-left'],
    .x-position-large[class*='x-position-center-right'] {
        transform: translateY(-50%) translateY(-$position-large-margin-l);
    }

    .x-position-large.x-position-top-center,
    .x-position-large.x-position-bottom-center {
        transform: translateX(-50%) translateX(-$position-large-margin-l);
    }

}


// Hooks
// ========================================================================

@if(mixin-exists(hook-position-misc)) {
    @include hook-position-misc();
}

// @mixin hook-position-misc(){}

//
// Component: Position
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-position-misc(){}
// Name:            Print
// Description:     Optimize page for printing
//
// Adapted from http://github.com/h5bp/html5-boilerplate
//
// Modifications:   Removed link `href` and `title` related rules
//
// ========================================================================


/* ========================================================================
   Component: Print
 ========================================================================== */

@media print {

    *,
    *::before,
    *::after {
        background : transparent !important;
        color      : black !important;
        box-shadow : none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    pre,
    blockquote {
        border           : 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group;
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows : 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }

    @if(mixin-exists(hook-print)) {
        @include hook-print();
    }

}

// Hooks
// ========================================================================

// @mixin hook-print(){}
// Name:            Progress
// Description:     Component to create progress bars
//
// Component:       `x-progress`
//
// ========================================================================


// Variables
// ========================================================================

$progress-height         : 15px !default;
$progress-margin-vertical: $global-margin !default;
$progress-background     : $global-muted-background !default;

$progress-bar-background: $global-primary-background !default;


/* ========================================================================
   Component: Progress
 ========================================================================== */

/*
 * 1. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 * 2. Remove default style
 * 3. Behave like a block element
 * 4. Remove borders in Firefox and Edge
 * 5. Set background color for progress container in Firefox, IE11 and Edge
 * 6. Style
 */

.x-progress {
    /* 1 */
    vertical-align    : baseline;
    /* 2 */
    -webkit-appearance: none;
    -moz-appearance   : none;
    /* 3 */
    display           : block;
    width             : 100%;
    /* 4 */
    border            : 0;
    /* 5 */
    background-color  : $progress-background;
    /* 6 */
    margin-bottom     : $progress-margin-vertical;
    height            : $progress-height;

    @if(mixin-exists(hook-progress)) {
        @include hook-progress();
    }
}

/* Add margin if adjacent element */
*+.x-progress {
    margin-top: $progress-margin-vertical;
}

/*
 * Remove animated circles for indeterminate state in IE11 and Edge
 */

.x-progress:indeterminate {
    color: transparent;
}

/*
 * Progress container
 * 2. Remove progress bar for indeterminate state in Firefox
 */

.x-progress::-webkit-progress-bar {
    background-color: $progress-background;

    @if(mixin-exists(hook-progress)) {
        @include hook-progress();
    }
}

/* 2 */
.x-progress:indeterminate::-moz-progress-bar {
    width: 0;
}

/*
 * Progress bar
 * 1. Remove right border in IE11 and Edge
 */

.x-progress::-webkit-progress-value {
    background-color: $progress-bar-background;
    transition      : width 0.6s ease;

    @if(mixin-exists(hook-progress-bar)) {
        @include hook-progress-bar();
    }
}

.x-progress::-moz-progress-bar {
    background-color: $progress-bar-background;

    @if(mixin-exists(hook-progress-bar)) {
        @include hook-progress-bar();
    }
}

.x-progress::-ms-fill {
    background-color: $progress-bar-background;
    transition      : width 0.6s ease;
    /* 1 */
    border          : 0;

    @if(mixin-exists(hook-progress-bar)) {
        @include hook-progress-bar();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-progress-misc)) {
    @include hook-progress-misc();
}

// @mixin hook-progress(){}
// @mixin hook-progress-bar(){}
// @mixin hook-progress-misc(){}

//
// Component: Progress
//
// ========================================================================


// Variables
// ========================================================================

$progress-border-radius:                         500px !default;


// Component
// ========================================================================



// @mixin hook-progress-bar(){}


// Miscellaneous
// ========================================================================

// @mixin hook-progress-misc(){}

// Name:            Search
// Description:     Component to create the search
//
// Component:       `x-search`
//
// Sub-objects:     `x-search-input`
//                  `x-search-toggle`
//
// Adopted:         `x-search-icon`
//
// Modifier:        `x-search-default`
//                  `x-search-navbar`
//                  `x-search-large`
//
// ========================================================================


// Variables
// ========================================================================

$search-color            : $global-color !default;
$search-placeholder-color: $global-muted-color !default;

$search-icon-color: $global-muted-color !default;

$search-default-width             : 180px !default;
$search-default-height            : $global-control-height !default;
$search-default-padding-horizontal: 6px !default;
$search-default-background        : $global-muted-background !default;
$search-default-focus-background  : $search-default-background !default;

$search-default-icon-width: $global-control-height !default;

$search-navbar-width     : 400px !default;
$search-navbar-height    : 40px !default;
$search-navbar-background: transparent !default;
$search-navbar-font-size : $global-large-font-size !default;

$search-navbar-icon-width: 40px !default;

$search-large-width     : 500px !default;
$search-large-height    : 80px !default;
$search-large-background: transparent !default;
$search-large-font-size : $global-2xlarge-font-size !default;

$search-large-icon-width: 80px !default;

$search-toggle-color      : $global-muted-color !default;
$search-toggle-hover-color: $global-color !default;


/* ========================================================================
   Component: Search
 ========================================================================== */

/*
 * 1. Container fits its content
 * 2. Create position context
 * 3. Prevent content overflow
 * 4. Reset `form`
 */

.x-search {
    /* 1 */
    display  : inline-block;
    /* 2 */
    position : relative;
    /* 3 */
    max-width: 100%;
    /* 4 */
    margin   : 0;
}


/* Input
 ========================================================================== */

/*
 * Remove the inner padding and cancel buttons in Chrome on OS X and Safari on OS X.
 */

.x-search-input::-webkit-search-cancel-button,
.x-search-input::-webkit-search-decoration {
    -webkit-appearance: none;
}

/*
 * Removes placeholder transparency in Firefox.
 */

.x-search-input::-moz-placeholder {
    opacity: 1;
}

/*
 * 1. Define consistent box sizing.
 * 2. Address margins set differently in Firefox/IE and Chrome/Safari/Opera.
 * 3. Remove `border-radius` in iOS.
 * 4. Change font properties to `inherit` in all browsers
 * 5. Show the overflow in Edge.
 * 6. Remove default style in iOS.
 * 7. Vertical alignment
 * 8. Take the full container width
 * 9. Style
 */

.x-search-input {
    /* 1 */
    box-sizing        : border-box;
    /* 2 */
    margin            : 0;
    /* 3 */
    border-radius     : 0;
    /* 4 */
    font              : inherit;
    /* 5 */
    overflow          : visible;
    /* 6 */
    -webkit-appearance: none;
    /* 7 */
    vertical-align    : middle;
    /* 8 */
    width             : 100%;
    /* 9 */
    border            : none;
    color             : $search-color;

    @if(mixin-exists(hook-search-input)) {
        @include hook-search-input();
    }
}

.x-search-input:focus {
    outline: none;
}

/* Placeholder */
.x-search-input:-ms-input-placeholder {
    color: $search-placeholder-color !important;
}

.x-search-input::placeholder {
    color: $search-placeholder-color;
}


/* Icon (Adopts `x-icon`)
 ========================================================================== */

/*
 * Remove default focus style
 */

.x-search-icon:focus {
    outline: none;
}

/*
 * Position above input
 * 1. Set position
 * 2. Center icon vertically and horizontally
 * 3. Style
 */

.x-search .x-search-icon {
    /* 1 */
    position       : absolute;
    top            : 0;
    bottom         : 0;
    left           : 0;
    /* 2 */
    display        : inline-flex;
    justify-content: center;
    align-items    : center;
    /* 3 */
    color          : $search-icon-color;
}

/*
 * Required for `a`.
 */

.x-search .x-search-icon:hover {
    color: $search-icon-color;
}

/*
 * Make `input` element clickable through icon, e.g. if it's a `span`
 */

.x-search .x-search-icon:not(a):not(button):not(input) {
    pointer-events: none;
}

/*
 * Position modifier
 */

.x-search .x-search-icon-flip {
    right: 0;
    left : auto;
}


/* Default modifier
 ========================================================================== */

.x-search-default {
    width: $search-default-width;
}

/*
 * Input
 */

.x-search-default .x-search-input {
    height       : $search-default-height;
    padding-left : $search-default-padding-horizontal;
    padding-right: $search-default-padding-horizontal;
    background   : $search-default-background;

    @if(mixin-exists(hook-search-default-input)) {
        @include hook-search-default-input();
    }
}

/* Focus */
.x-search-default .x-search-input:focus {
    background-color: $search-default-focus-background;

    @if(mixin-exists(hook-search-default-input-focus)) {
        @include hook-search-default-input-focus();
    }
}

/*
 * Icon
 */

.x-search-default .x-search-icon {
    width: $search-default-icon-width;
}

.x-search-default .x-search-icon:not(.x-search-icon-flip)~.x-search-input {
    padding-left: ($search-default-icon-width);
}

.x-search-default .x-search-icon-flip~.x-search-input {
    padding-right: ($search-default-icon-width);
}


/* Navbar modifier
 ========================================================================== */

.x-search-navbar {
    width: $search-navbar-width;
}

/*
 * Input
 */

.x-search-navbar .x-search-input {
    height    : $search-navbar-height;
    background: $search-navbar-background;
    font-size : $search-navbar-font-size;

    @if(mixin-exists(hook-search-navbar-input)) {
        @include hook-search-navbar-input();
    }
}

/*
 * Icon
 */

.x-search-navbar .x-search-icon {
    width: $search-navbar-icon-width;
}

.x-search-navbar .x-search-icon:not(.x-search-icon-flip)~.x-search-input {
    padding-left: ($search-navbar-icon-width);
}

.x-search-navbar .x-search-icon-flip~.x-search-input {
    padding-right: ($search-navbar-icon-width);
}


/* Large modifier
 ========================================================================== */

.x-search-large {
    width: $search-large-width;
}

/*
 * Input
 */

.x-search-large .x-search-input {
    height    : $search-large-height;
    background: $search-large-background;
    font-size : $search-large-font-size;

    @if(mixin-exists(hook-search-large-input)) {
        @include hook-search-large-input();
    }
}

/*
 * Icon
 */

.x-search-large .x-search-icon {
    width: $search-large-icon-width;
}

.x-search-large .x-search-icon:not(.x-search-icon-flip)~.x-search-input {
    padding-left: ($search-large-icon-width);
}

.x-search-large .x-search-icon-flip~.x-search-input {
    padding-right: ($search-large-icon-width);
}


/* Toggle
 ========================================================================== */

.x-search-toggle {
    color: $search-toggle-color;

    @if(mixin-exists(hook-search-toggle)) {
        @include hook-search-toggle();
    }
}

/* Hover + Focus */
.x-search-toggle:hover,
.x-search-toggle:focus {
    color: $search-toggle-hover-color;

    @if(mixin-exists(hook-search-toggle-hover)) {
        @include hook-search-toggle-hover();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-search-misc)) {
    @include hook-search-misc();
}

// @mixin hook-search-input(){}
// @mixin hook-search-default-input(){}
// @mixin hook-search-default-input-focus(){}
// @mixin hook-search-navbar-input(){}
// @mixin hook-search-large-input(){}

// @mixin hook-search-toggle(){}
// @mixin hook-search-toggle-hover(){}

// @mixin hook-search-misc(){}


// Inverse
// ========================================================================

$inverse-search-color            : $inverse-global-color !default;
$inverse-search-placeholder-color: $inverse-global-muted-color !default;

$inverse-search-icon-color: $inverse-global-muted-color !default;

$inverse-search-default-background      : $inverse-global-muted-background !default;
$inverse-search-default-focus-background: $inverse-search-default-background !default;

$inverse-search-navbar-background: transparent !default;

$inverse-search-large-background: transparent !default;

$inverse-search-toggle-color      : $inverse-global-muted-color !default;
$inverse-search-toggle-hover-color: $inverse-global-color !default;



// @mixin hook-inverse-search-default-input(){}
// @mixin hook-inverse-search-default-input-focus(){}
// @mixin hook-inverse-search-navbar-input(){}
// @mixin hook-inverse-search-large-input(){}
// @mixin hook-inverse-search-toggle(){}
// @mixin hook-inverse-search-toggle-hover(){}

//
// Component: Search
//
// ========================================================================


// Variables
// ========================================================================

$search-default-background:                          transparent !default;

//
// New
//

$search-default-border-width:                        $global-border-width !default;
$search-default-border:                              $global-border !default;


// Component
// ========================================================================

// @mixin hook-search-input(){}


// Default modifiers
// ========================================================================




// Navbar modifiers
// ========================================================================

// @mixin hook-search-navbar-input(){}

// @mixin hook-search-default-input-focus(){}


// Large modifiers
// ========================================================================

// @mixin hook-search-large-input(){}


// Toggle
// ========================================================================

// @mixin hook-search-toggle(){}

// @mixin hook-search-toggle-hover(){}


// Miscellaneous
// ========================================================================

// @mixin hook-search-misc(){}


// Inverse
// ========================================================================

$inverse-search-default-background:             transparent !default;


// @mixin hook-inverse-search-default-input-focus(){}

// @mixin hook-inverse-search-navbar-input(){}

// @mixin hook-inverse-search-large-input(){}

// @mixin hook-inverse-search-toggle(){}
// @mixin hook-inverse-search-toggle-hover(){}
// Name:            Section
// Description:     Component to create horizontal layout section
//
// Component:       `x-section`
//
// Modifiers:       `x-section-xsmall`
//                  `x-section-small`
//                  `x-section-large`
//                  `x-section-xlarge`
//                  `x-section-default`
//                  `x-section-muted`
//                  `x-section-primary`
//                  `x-section-secondary`
//                  `x-section-overlap`
//
// States:          `x-preserve-color`
//
// ========================================================================


// Variables
// ========================================================================

$section-padding-vertical  : $global-medium-margin !default;
$section-padding-vertical-m: $global-large-margin !default;

$section-xsmall-padding-vertical: $global-margin !default;

$section-small-padding-vertical: $global-medium-margin !default;

$section-large-padding-vertical  : $global-large-margin !default;
$section-large-padding-vertical-m: $global-xlarge-margin !default;

$section-xlarge-padding-vertical  : $global-xlarge-margin !default;
$section-xlarge-padding-vertical-m: ($global-large-margin + $global-xlarge-margin) !default;

$section-default-background: $global-background !default;

$section-muted-background: $global-muted-background !default;

$section-primary-background: $global-primary-background !default;
$section-primary-color-mode: light !default;

$section-secondary-background: $global-secondary-background !default;
$section-secondary-color-mode: light !default;


/* ========================================================================
   Component: Section
 ========================================================================== */

/*
 * 1. Make it work with `100vh` and height in general
 */

.x-section {
    display       : flow-root;
    box-sizing    : border-box;
    /* 1 */
    padding-top   : $section-padding-vertical;
    padding-bottom: $section-padding-vertical;

    @if(mixin-exists(hook-section)) {
        @include hook-section();
    }
}

/* Desktop and bigger */
@media (min-width: $breakpoint-medium) {

    .x-section {
        padding-top   : $section-padding-vertical-m;
        padding-bottom: $section-padding-vertical-m;
    }

}

/*
 * Remove margin from the last-child
 */

.x-section> :last-child {
    margin-bottom: 0;
}


/* Size modifiers
 ========================================================================== */

/*
 * XSmall
 */

.x-section-xsmall {
    padding-top   : $section-xsmall-padding-vertical;
    padding-bottom: $section-xsmall-padding-vertical;
}

/*
 * Small
 */

.x-section-small {
    padding-top   : $section-small-padding-vertical;
    padding-bottom: $section-small-padding-vertical;
}

/*
 * Large
 */

.x-section-large {
    padding-top   : $section-large-padding-vertical;
    padding-bottom: $section-large-padding-vertical;
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-section-large {
        padding-top   : $section-large-padding-vertical-m;
        padding-bottom: $section-large-padding-vertical-m;
    }

}


/*
 * XLarge
 */

.x-section-xlarge {
    padding-top   : $section-xlarge-padding-vertical;
    padding-bottom: $section-xlarge-padding-vertical;
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-section-xlarge {
        padding-top   : $section-xlarge-padding-vertical-m;
        padding-bottom: $section-xlarge-padding-vertical-m;
    }

}


/* Style modifiers
 ========================================================================== */

/*
 * Default
 */

.x-section-default {
    background: $section-default-background;

    @if(mixin-exists(hook-section-default)) {
        @include hook-section-default();
    }
}

/*
 * Muted
 */

.x-section-muted {
    background: $section-muted-background;

    @if(mixin-exists(hook-section-muted)) {
        @include hook-section-muted();
    }
}

/*
 * Primary
 */

.x-section-primary {
    background: $section-primary-background;

    @if(mixin-exists(hook-section-primary)) {
        @include hook-section-primary();
    }
}

@if ($section-primary-color-mode==light) {
    .x-section-primary:not(.x-preserve-color) {
        @extend .x-light !optional;
    }
}

@if ($section-primary-color-mode==dark) {
    .x-section-primary:not(.x-preserve-color) {
        @extend .x-dark !optional;
    }
}


/*
 * Secondary
 */

.x-section-secondary {
    background: $section-secondary-background;

    @if(mixin-exists(hook-section-secondary)) {
        @include hook-section-secondary();
    }
}

@if ($section-secondary-color-mode==light) {
    .x-section-secondary:not(.x-preserve-color) {
        @extend .x-light !optional;
    }
}

@if ($section-secondary-color-mode==dark) {
    .x-section-secondary:not(.x-preserve-color) {
        @extend .x-dark !optional;
    }
}


/* Overlap modifier
 ========================================================================== */

/*
 * Reserved modifier to make a section overlap another section with an border image
 * Implemented by the theme
 */

.x-section-overlap {
    @if(mixin-exists(hook-section-overlap)) {
        @include hook-section-overlap();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-section-misc)) {
    @include hook-section-misc();
}

// @mixin hook-section(){}
// @mixin hook-section-default(){}
// @mixin hook-section-muted(){}
// @mixin hook-section-secondary(){}
// @mixin hook-section-primary(){}
// @mixin hook-section-overlap(){}
// @mixin hook-section-misc(){}

//
// Component: Section
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-section(){}


// Style modifiers
// ========================================================================

// @mixin hook-section-default(){}

// @mixin hook-section-muted(){}

// @mixin hook-section-primary(){}

// @mixin hook-section-secondary(){}


// Miscellaneous
// ========================================================================

// @mixin hook-section-misc(){}

// Name:            Slidenav
// Description:     Component to create previous/next icon navigations
//
// Component:       `x-slidenav`
//
// Sub-objects:     `x-slidenav-container`
//
// Modifiers:       `x-slidenav-previous`
//                  `x-slidenav-next`
//                  `x-slidenav-large`
//
// ========================================================================


// Variables
// ========================================================================

$slidenav-padding-vertical  : 5px !default;
$slidenav-padding-horizontal: 10px !default;

$slidenav-color       : rgba($global-color, 0.5) !default;
$slidenav-hover-color : rgba($global-color, 0.9) !default;
$slidenav-active-color: rgba($global-color, 0.5) !default;

$slidenav-large-padding-vertical  : 10px !default;
$slidenav-large-padding-horizontal: $slidenav-large-padding-vertical !default;


/* ========================================================================
   Component: Slidenav
 ========================================================================== */

/*
 * Adopts `x-icon`
 */

.x-slidenav {
    padding: $slidenav-padding-vertical $slidenav-padding-horizontal;
    color  : $slidenav-color;

    @if(mixin-exists(hook-slidenav)) {
        @include hook-slidenav();
    }
}

/* Hover + Focus */
.x-slidenav:hover,
.x-slidenav:focus {
    color  : $slidenav-hover-color;
    outline: none;

    @if(mixin-exists(hook-slidenav-hover)) {
        @include hook-slidenav-hover();
    }
}

/* OnClick */
.x-slidenav:active {
    color: $slidenav-active-color;

    @if(mixin-exists(hook-slidenav-active)) {
        @include hook-slidenav-active();
    }
}


/* Icon modifier
 ========================================================================== */

/*
 * Previous
 */

.x-slidenav-previous {
    @if(mixin-exists(hook-slidenav-previous)) {
        @include hook-slidenav-previous();
    }
}

/*
 * Next
 */

.x-slidenav-next {
    @if(mixin-exists(hook-slidenav-next)) {
        @include hook-slidenav-next();
    }
}


/* Size modifier
 ========================================================================== */

.x-slidenav-large {
    padding: $slidenav-large-padding-vertical $slidenav-large-padding-horizontal;

    @if(mixin-exists(hook-slidenav-large)) {
        @include hook-slidenav-large();
    }
}


/* Container
 ========================================================================== */

.x-slidenav-container {
    display: flex;

    @if(mixin-exists(hook-slidenav-container)) {
        @include hook-slidenav-container();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-slidenav-misc)) {
    @include hook-slidenav-misc();
}

// @mixin hook-slidenav(){}
// @mixin hook-slidenav-hover(){}
// @mixin hook-slidenav-active(){}
// @mixin hook-slidenav-previous(){}
// @mixin hook-slidenav-next(){}
// @mixin hook-slidenav-large(){}
// @mixin hook-slidenav-container(){}
// @mixin hook-slidenav-misc(){}


// Inverse
// ========================================================================

$inverse-slidenav-color       : rgba($inverse-global-color, 0.7) !default;
$inverse-slidenav-hover-color : rgba($inverse-global-color, 0.95) !default;
$inverse-slidenav-active-color: rgba($inverse-global-color, 0.7) !default;



// @mixin hook-inverse-slidenav(){}
// @mixin hook-inverse-slidenav-hover(){}
// @mixin hook-inverse-slidenav-active(){}

//
// Component: Slidenav
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================



// @mixin hook-slidenav-hover(){}

// @mixin hook-slidenav-active(){}


// Icon modifier
// ========================================================================

// @mixin hook-slidenav-previous(){}

// @mixin hook-slidenav-next(){}


// Size modifier
// ========================================================================

// @mixin hook-slidenav-large(){}


// Container
// ========================================================================

// @mixin hook-slidenav-container(){}


// Miscellaneous
// ========================================================================

// @mixin hook-slidenav-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-slidenav(){}
// @mixin hook-inverse-slidenav-hover(){}
// @mixin hook-inverse-slidenav-active(){}

// Name:            Slider
// Description:     Component to create horizontal sliders
//
// Component:       `x-slider`
//
// Sub-objects:     `x-slider-container`
//                  `x-slider-items`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$slider-container-margin-top   : -11px !default;
$slider-container-margin-bottom: -39px !default;
$slider-container-margin-left  : -25px !default;
$slider-container-margin-right : -25px !default;


/* ========================================================================
   Component: Slider
 ========================================================================== */

/*
 * 1. Prevent tab highlighting on iOS.
 */

.x-slider {
    /* 1 */
    -webkit-tap-highlight-color: transparent;

    @if(mixin-exists(hook-slider)) {
        @include hook-slider();
    }
}


/* Container
 ========================================================================== */

/*
 * Clip child elements
 */

.x-slider-container {
    overflow: hidden;
}

/*
 * Widen container to prevent box-shadows from clipping, `large-box-shadow`
 */

.x-slider-container-offset {
    margin : $slider-container-margin-top $slider-container-margin-right $slider-container-margin-bottom $slider-container-margin-left;
    padding: ($slider-container-margin-top * -1) ($slider-container-margin-right * -1) ($slider-container-margin-bottom * -1) ($slider-container-margin-left * -1);
}

/* Items
 ========================================================================== */

/*
 * 1. Optimize animation
 * 2. Create a containing block. In Safari it's neither created by `transform` nor `will-change`.
 */

.x-slider-items {
    /* 1 */
    will-change: transform;
    /* 2 */
    position   : relative;
}

/*
 * 1. Reset list style without interfering with grid
 * 2. Prevent displaying the callout information on iOS.
 */

.x-slider-items:not(.x-grid) {
    display              : flex;
    /* 1 */
    margin               : 0;
    padding              : 0;
    list-style           : none;
    /* 2 */
    -webkit-touch-callout: none;
}

.x-slider-items.x-grid {
    flex-wrap: nowrap;
}


/* Item
 ========================================================================== */

/*
 * 1. Let items take content dimensions (0 0 auto)
 * 2. Create position context
 * 3. Disable horizontal panning gestures in IE11 and Edge
 * 4. Suppress outline on focus
 */

.x-slider-items>* {
    /* 1 */
    flex        : none;
    /* 2 */
    position    : relative;
    /* 3 */
    touch-action: pan-y;
}

/* 4 */
.x-slider-items> :focus {
    outline: none;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-slider-misc)) {
    @include hook-slider-misc();
}

// @mixin hook-slider(){}
// @mixin hook-slider-misc(){}

//
// Component: Slider
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-slider-misc(){}

// Name:            Slideshow
// Description:     Component to create slideshows
//
// Component:       `x-slideshow`
//
// Sub-objects:     `x-slideshow-items`
//
// States:          `x-active`
//
// ========================================================================


/* ========================================================================
   Component: Slideshow
 ========================================================================== */

/*
 * 1. Prevent tab highlighting on iOS.
 */

.x-slideshow {
    /* 1 */
    -webkit-tap-highlight-color: transparent;

    @if(mixin-exists(hook-slideshow)) {
        @include hook-slideshow();
    }
}


/* Items
 ========================================================================== */

/*
 * 1. Create position and stacking context
 * 2. Reset list
 * 3. Clip child elements
 * 4. Prevent displaying the callout information on iOS.
 */

.x-slideshow-items {
    /* 1 */
    position             : relative;
    z-index              : 0;
    /* 2 */
    margin               : 0;
    padding              : 0;
    list-style           : none;
    /* 3 */
    overflow             : hidden;
    /* 4 */
    -webkit-touch-callout: none;
}


/* Item
 ========================================================================== */

/*
 * 1. Position items above each other
 * 2. Take the full width
 * 3. Clip child elements, e.g. for `x-cover`
 * 4. Optimize animation
 * 5. Disable horizontal panning gestures in IE11 and Edge
 * 6. Suppress outline on focus
 */

.x-slideshow-items>* {
    /* 1 */
    position    : absolute;
    top         : 0;
    left        : 0;
    /* 2 */
    right       : 0;
    bottom      : 0;
    /* 3 */
    overflow    : hidden;
    /* 4 */
    will-change : transform, opacity;
    /* 5 */
    touch-action: pan-y;
}

/* 6 */
.x-slideshow-items> :focus {
    outline: none;
}

/*
 * Hide not active items
 */

.x-slideshow-items> :not(.x-active) {
    display: none;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-slideshow-misc)) {
    @include hook-slideshow-misc();
}

// @mixin hook-slideshow(){}
// @mixin hook-slideshow-misc(){}

// Name:            Sortable
// Description:     Component to create sortable grids and lists
//
// Component:       `x-sortable`
//
// Sub-objects:     `x-sortable-drag`
//                  `x-sortable-placeholder`
//                  `x-sortable-handle`
//
// Modifiers:       `x-sortable-empty`
//
// States:          `x-drag`
//
// ========================================================================


// Variables
// ========================================================================

$sortable-dragged-z-index: $global-z-index+50 !default;

$sortable-placeholder-opacity: 0 !default;

$sortable-empty-height: 50px !default;


/* ========================================================================
   Component: Sortable
 ========================================================================== */

.x-sortable {
    position: relative;

    @if(mixin-exists(hook-sortable)) {
        @include hook-sortable();
    }
}

/*
 * Remove margin from the last-child
 */

.x-sortable> :last-child {
    margin-bottom: 0;
}


/* Drag
 ========================================================================== */

.x-sortable-drag {
    position      : fixed !important;
    z-index       : $sortable-dragged-z-index !important;
    pointer-events: none;

    @if(mixin-exists(hook-sortable-drag)) {
        @include hook-sortable-drag();
    }
}


/* Placeholder
 ========================================================================== */

.x-sortable-placeholder {
    opacity       : $sortable-placeholder-opacity;
    pointer-events: none;

    @if(mixin-exists(hook-sortable-placeholder)) {
        @include hook-sortable-placeholder();
    }
}


/* Empty modifier
 ========================================================================== */

.x-sortable-empty {
    min-height: $sortable-empty-height;

    @if(mixin-exists(hook-sortable-empty)) {
        @include hook-sortable-empty();
    }
}


/* Handle
 ========================================================================== */

/* Hover */
.x-sortable-handle:hover {
    cursor: move;
}



// Hooks
// ========================================================================

@if(mixin-exists(hook-sortable-misc)) {
    @include hook-sortable-misc();
}

// @mixin hook-sortable(){}
// @mixin hook-sortable-drag(){}
// @mixin hook-sortable-placeholder(){}
// @mixin hook-sortable-empty(){}
// @mixin hook-sortable-misc(){}

//
// Component: Sortable
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-sortable(){}


// Drag
// ========================================================================

// @mixin hook-sortable-drag(){}


// Placeholder
// ========================================================================

// @mixin hook-sortable-placeholder(){}


// Empty
// ========================================================================

// @mixin hook-sortable-empty(){}


// Miscellaneous
// ========================================================================

// @mixin hook-sortable-misc(){}

// Name:            Spinner
// Description:     Component to create a loading spinner
//
// Component:       `x-spinner`
//
// ========================================================================


// Variables
// ========================================================================

$spinner-size         : 30px !default;
$spinner-stroke-width : 1 !default;
$spinner-radius       : floor(($spinner-size - $spinner-stroke-width) / 2) !default; // Minus stroke width to prevent overflow clipping
$spinner-circumference: round(2 * 3.141 * $spinner-radius) !default;
$spinner-duration     : 1.4s !default;


/* ========================================================================
   Component: Spinner
 ========================================================================== */

/*
 * Adopts `x-icon`
 */

.x-spinner {
    @if(mixin-exists(hook-spinner)) {
        @include hook-spinner();
    }
}


/* SVG
 ========================================================================== */

.x-spinner>* {
    animation: x-spinner-rotate $spinner-duration linear infinite;
}

@keyframes x-spinner-rotate {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(270deg);
    }
}

/*
 * Circle
 */

.x-spinner>*>* {
    stroke-dasharray : $spinner-circumference;
    stroke-dashoffset: 0;
    transform-origin : center;
    animation        : x-spinner-dash $spinner-duration ease-in-out infinite;
    stroke-width     : $spinner-stroke-width;
    stroke-linecap   : round;
}

@keyframes x-spinner-dash {
    0% {
        stroke-dashoffset: $spinner-circumference;
    }

    50% {
        stroke-dashoffset: $spinner-circumference/4;
        transform        : rotate(135deg);
    }

    100% {
        stroke-dashoffset: $spinner-circumference;
        transform        : rotate(450deg);
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-spinner-misc)) {
    @include hook-spinner-misc();
}

// @mixin hook-spinner(){}
// @mixin hook-spinner-misc(){}

//
// Component: Spinner
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-spinner-misc(){}
// Name:            Sticky
// Description:     Component to make elements sticky in the viewport
//
// Component:       `x-sticky`
//
// Modifier:        `x-sticky-fixed`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$sticky-z-index: $global-z-index - 20 !default;

$sticky-animation-duration        : 0.2s !default;
$sticky-reverse-animation-duration: 0.2s !default;


/* ========================================================================
   Component: Sticky
 ========================================================================== */

/*
 * 1. Resolve frame rate issues on devices with lower frame rates by forcing hardware acceleration
 */

.x-sticky-fixed {
  z-index                    : $sticky-z-index;
  box-sizing                 : border-box;
  margin                     : 0 !important;
  /* 1 */
  -webkit-backface-visibility: hidden;
  backface-visibility        : hidden;
}

/*
 * Faster animations
 */

.x-sticky[class*='x-animation-'] {
  animation-duration: $sticky-animation-duration;
}

.x-sticky.x-animation-reverse {
  animation-duration: $sticky-reverse-animation-duration;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-sticky-misc)) {
  @include hook-sticky-misc();
}

// @mixin hook-sticky-misc(){}

//
// Component: Sticky
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-sticky-misc(){}
// Name:            Subnav
// Description:     Component to create a sub navigation
//
// Component:       `x-subnav`
//
// Modifiers:       `x-subnav-divider`
//                  `x-subnav-pill`
//
// States:          `x-active`
//                  `x-first-column`
//
// ========================================================================


// Variables
// ========================================================================

$subnav-margin-horizontal: 20px !default;

$subnav-item-color                : $global-muted-color !default;
$subnav-item-hover-color          : $global-color !default;
$subnav-item-hover-text-decoration: none !default;
$subnav-item-active-color         : $global-emphasis-color !default;

$subnav-divider-margin-horizontal: $subnav-margin-horizontal !default;
$subnav-divider-border-height    : 1.5em !default;
$subnav-divider-border-width     : $global-border-width !default;
$subnav-divider-border           : $global-border !default;

$subnav-pill-item-padding-vertical  : 5px !default;
$subnav-pill-item-padding-horizontal: 10px !default;
$subnav-pill-item-background        : transparent !default;
$subnav-pill-item-color             : $subnav-item-color !default;
$subnav-pill-item-hover-background  : $global-muted-background !default;
$subnav-pill-item-hover-color       : $global-color !default;
$subnav-pill-item-onclick-background: $subnav-pill-item-hover-background !default;
$subnav-pill-item-onclick-color     : $subnav-pill-item-hover-color !default;
$subnav-pill-item-active-background : $global-primary-background !default;
$subnav-pill-item-active-color      : $global-inverse-color !default;

$subnav-item-disabled-color: $global-muted-color !default;


/* ========================================================================
   Component: Subnav
 ========================================================================== */

/*
 * 1. Allow items to wrap into the next line
 * 2. Gutter
 * 3. Reset list
 */

.x-subnav {
    display    : flex;
    /* 1 */
    flex-wrap  : wrap;
    /* 2 */
    margin-left: (-$subnav-margin-horizontal);
    /* 3 */
    padding    : 0;
    list-style : none;

    @if(mixin-exists(hook-subnav)) {
        @include hook-subnav();
    }
}

/*
 * 1. Space is allocated solely based on content dimensions: 0 0 auto
 * 2. Gutter
 * 3. Create position context for dropdowns
 */

.x-subnav>* {
    /* 1 */
    flex        : none;
    /* 2 */
    padding-left: $subnav-margin-horizontal;
    /* 3 */
    position    : relative;
}


/* Items
 ========================================================================== */

/*
 * Items must target `a` elements to exclude other elements (e.g. dropdowns)
 * Using `:first-child` instead of `a` to support `span` elements for text
 * 1. Prevent gap if child element is `inline-block`, e.g. an icon
 * 2. Style
 */

.x-subnav>*> :first-child {
    /* 1 */
    display: block;
    /* 2 */
    color  : $subnav-item-color;

    @if(mixin-exists(hook-subnav-item)) {
        @include hook-subnav-item();
    }
}

/* Hover + Focus */
.x-subnav>*>a:hover,
.x-subnav>*>a:focus {
    color          : $subnav-item-hover-color;
    text-decoration: $subnav-item-hover-text-decoration;
    outline        : none;

    @if(mixin-exists(hook-subnav-item-hover)) {
        @include hook-subnav-item-hover();
    }
}

/* Active */
.x-subnav>.x-active>a {
    color: $subnav-item-active-color;

    @if(mixin-exists(hook-subnav-item-active)) {
        @include hook-subnav-item-active();
    }
}


/* Divider modifier
 ========================================================================== */

/*
 * Set gutter
 */

.x-subnav-divider {
    margin-left: -(($subnav-divider-margin-horizontal * 2) + $subnav-divider-border-width);
}

/*
 * Align items and divider vertically
 */

.x-subnav-divider>* {
    display    : flex;
    align-items: center;
}

/*
 * Divider
 * 1. `nth-child` makes it also work without JS if it's only one row
 */

.x-subnav-divider> ::before {
    content     : "";
    height      : $subnav-divider-border-height;
    margin-left : ($subnav-divider-margin-horizontal - $subnav-margin-horizontal);
    margin-right: $subnav-divider-margin-horizontal;
    border-left : $subnav-divider-border-width solid transparent;
}

/* 1 */
.x-subnav-divider> :nth-child(n+2):not(.x-first-column)::before {
    border-left-color: $subnav-divider-border;

    @if(mixin-exists(hook-subnav-divider)) {
        @include hook-subnav-divider();
    }
}


/* Pill modifier
 ========================================================================== */

.x-subnav-pill>*> :first-child {
    padding   : $subnav-pill-item-padding-vertical $subnav-pill-item-padding-horizontal;
    background: $subnav-pill-item-background;
    color     : $subnav-pill-item-color;

    @if(mixin-exists(hook-subnav-pill-item)) {
        @include hook-subnav-pill-item();
    }
}

/* Hover + Focus */
.x-subnav-pill>*>a:hover,
.x-subnav-pill>*>a:focus {
    background-color: $subnav-pill-item-hover-background;
    color           : $subnav-pill-item-hover-color;

    @if(mixin-exists(hook-subnav-pill-item-hover)) {
        @include hook-subnav-pill-item-hover();
    }
}

/* OnClick */
.x-subnav-pill>*>a:active {
    background-color: $subnav-pill-item-onclick-background;
    color           : $subnav-pill-item-onclick-color;

    @if(mixin-exists(hook-subnav-pill-item-onclick)) {
        @include hook-subnav-pill-item-onclick();
    }
}

/* Active */
.x-subnav-pill>.x-active>a {
    background-color: $subnav-pill-item-active-background;
    color           : $subnav-pill-item-active-color;

    @if(mixin-exists(hook-subnav-pill-item-active)) {
        @include hook-subnav-pill-item-active();
    }
}


/* Disabled
 * The same for all style modifiers
 ========================================================================== */

.x-subnav>.x-disabled>a {
    color: $subnav-item-disabled-color;

    @if(mixin-exists(hook-subnav-item-disabled)) {
        @include hook-subnav-item-disabled();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-subnav-misc)) {
    @include hook-subnav-misc();
}

// @mixin hook-subnav(){}
// @mixin hook-subnav-item(){}
// @mixin hook-subnav-item-hover(){}
// @mixin hook-subnav-item-active(){}
// @mixin hook-subnav-divider(){}
// @mixin hook-subnav-pill-item(){}
// @mixin hook-subnav-pill-item-hover(){}
// @mixin hook-subnav-pill-item-onclick(){}
// @mixin hook-subnav-pill-item-active(){}
// @mixin hook-subnav-item-disabled(){}
// @mixin hook-subnav-misc(){}


// Inverse
// ========================================================================

$inverse-subnav-item-color                  : $inverse-global-muted-color !default;
$inverse-subnav-item-hover-color            : $inverse-global-color !default;
$inverse-subnav-item-active-color           : $inverse-global-emphasis-color !default;
$inverse-subnav-divider-border              : $inverse-global-border !default;
$inverse-subnav-pill-item-background        : transparent !default;
$inverse-subnav-pill-item-color             : $inverse-global-muted-color !default;
$inverse-subnav-pill-item-hover-background  : $inverse-global-muted-background !default;
$inverse-subnav-pill-item-hover-color       : $inverse-global-color !default;
$inverse-subnav-pill-item-onclick-background: $inverse-subnav-pill-item-hover-background !default;
$inverse-subnav-pill-item-onclick-color     : $inverse-subnav-pill-item-hover-color !default;
$inverse-subnav-pill-item-active-background : $inverse-global-primary-background !default;
$inverse-subnav-pill-item-active-color      : $inverse-global-inverse-color !default;
$inverse-subnav-item-disabled-color         : $inverse-global-muted-color !default;



// @mixin hook-inverse-subnav-item(){}
// @mixin hook-inverse-subnav-item-hover(){}
// @mixin hook-inverse-subnav-item-active(){}
// @mixin hook-inverse-subnav-divider(){}
// @mixin hook-inverse-subnav-pill-item(){}
// @mixin hook-inverse-subnav-pill-item-hover(){}
// @mixin hook-inverse-subnav-pill-item-onclick(){}
// @mixin hook-inverse-subnav-pill-item-active(){}
// @mixin hook-inverse-subnav-item-disabled(){}

//
// Component: Subnav
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$subnav-item-font-size:                          $global-small-font-size !default;
$subnav-item-text-transform:                     uppercase !default;


// Component
// ========================================================================

// @mixin hook-subnav(){}



// @mixin hook-subnav-item-hover(){}

// @mixin hook-subnav-item-active(){}


// Divider modifier
// ========================================================================

// @mixin hook-subnav-divider(){}


// Pill modifier
// ========================================================================

// @mixin hook-subnav-pill-item(){}

// @mixin hook-subnav-pill-item-hover(){}

// @mixin hook-subnav-pill-item-onclick(){}

// @mixin hook-subnav-pill-item-active(){}


// Disabled
// ========================================================================

// @mixin hook-subnav-item-disabled(){}


// Miscellaneous
// ========================================================================

// @mixin hook-subnav-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-subnav-item(){}
// @mixin hook-inverse-subnav-item-hover(){}
// @mixin hook-inverse-subnav-item-active(){}

// @mixin hook-inverse-subnav-divider(){}

// @mixin hook-inverse-subnav-pill-item(){}
// @mixin hook-inverse-subnav-pill-item-hover(){}
// @mixin hook-inverse-subnav-pill-item-onclick(){}
// @mixin hook-inverse-subnav-pill-item-active(){}

// @mixin hook-inverse-subnav-item-disabled(){}

// Name:            SVG
// Description:     Component to style SVGs
//
// Component:       `x-svg`
//
// ========================================================================


/* ========================================================================
   Component: SVG
 ========================================================================== */

/*
 * 1. Fill all SVG elements with the current text color if no `fill` attribute is set
 * 2. Set the fill and stroke color of all SVG elements to the current text color
 */

/* 1 */
.x-svg,
/* 2 */
.x-svg:not(.x-preserve) [fill*='#']:not(.x-preserve) {
  fill: currentcolor;
}

.x-svg:not(.x-preserve) [stroke*='#']:not(.x-preserve) {
  stroke: currentcolor;
}

/*
 * Fix Firefox blurry SVG rendering: https://bugzilla.mozilla.org/show_bug.cgi?id=1046835
 */

.x-svg {
  transform: translate(0, 0);
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-svg-misc)) {
  @include hook-svg-misc();
}

// @mixin hook-svg-misc(){}

// Name:            Switcher
// Description:     Component to navigate through different content panes
//
// Component:       `x-switcher`
//
// States:          `x-active`
//
// ========================================================================


/* ========================================================================
   Component: Switcher
 ========================================================================== */

/*
 * Reset list
 */

.x-switcher {
  margin    : 0;
  padding   : 0;
  list-style: none;
}


/* Items
 ========================================================================== */

/*
 * Hide not active items
 */

.x-switcher> :not(.x-active) {
  display: none;
}

/*
 * Remove margin from the last-child
 */

.x-switcher>*> :last-child {
  margin-bottom: 0;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-switcher-misc)) {
  @include hook-switcher-misc();
}

// @mixin hook-switcher-misc(){}

// Name:            Tab
// Description:     Component to create a tabbed navigation
//
// Component:       `x-tab`
//
// Modifiers:       `x-tab-bottom`
//                  `x-tab-left`
//                  `x-tab-right`
//
// States:          `x-active`
//                  `x-disabled`
//
// ========================================================================


// Variables
// ========================================================================

$tab-margin-horizontal: 20px !default;

$tab-item-padding-horizontal   : 10px !default;
$tab-item-padding-vertical     : 5px !default;
$tab-item-color                : $global-muted-color !default;
$tab-item-hover-color          : $global-color !default;
$tab-item-hover-text-decoration: none !default;
$tab-item-active-color         : $global-emphasis-color !default;
$tab-item-disabled-color       : $global-muted-color !default;


/* ========================================================================
   Component: Tab
 ========================================================================== */

/*
 * 1. Allow items to wrap into the next line
 * 2. Gutter
 * 3. Reset list
 */

.x-tab {
    display    : flex;
    /* 1 */
    flex-wrap  : wrap;
    /* 2 */
    margin-left: (-$tab-margin-horizontal);
    /* 3 */
    padding    : 0;
    list-style : none;

    @if(mixin-exists(hook-tab)) {
        @include hook-tab();
    }
}

/*
 * 1. Space is allocated solely based on content dimensions: 0 0 auto
 * 2. Gutter
 * 3. Create position context for dropdowns
 */

.x-tab>* {
    /* 1 */
    flex        : none;
    /* 2 */
    padding-left: $tab-margin-horizontal;
    /* 3 */
    position    : relative;
}


/* Items
 ========================================================================== */

/*
 * Items must target `a` elements to exclude other elements (e.g. dropdowns)
 * 1. Center text if a width is set
 * 2. Style
 */

.x-tab>*>a {
    /* 1 */
    display   : block;
    text-align: center;
    /* 2 */
    padding   : $tab-item-padding-vertical $tab-item-padding-horizontal;
    color     : $tab-item-color;

    @if(mixin-exists(hook-tab-item)) {
        @include hook-tab-item();
    }
}

/* Hover + Focus */
.x-tab>*>a:hover,
.x-tab>*>a:focus {
    color          : $tab-item-hover-color;
    text-decoration: $tab-item-hover-text-decoration;

    @if(mixin-exists(hook-tab-item-hover)) {
        @include hook-tab-item-hover();
    }
}

/* Active */
.x-tab>.x-active>a {
    color: $tab-item-active-color;

    @if(mixin-exists(hook-tab-item-active)) {
        @include hook-tab-item-active();
    }
}

/* Disabled */
.x-tab>.x-disabled>a {
    color: $tab-item-disabled-color;

    @if(mixin-exists(hook-tab-item-disabled)) {
        @include hook-tab-item-disabled();
    }
}


/* Position modifier
 ========================================================================== */

/*
 * Bottom
 */

.x-tab-bottom {
    @if(mixin-exists(hook-tab-bottom)) {
        @include hook-tab-bottom();
    }
}

.x-tab-bottom>*>a {
    @if(mixin-exists(hook-tab-bottom-item)) {
        @include hook-tab-bottom-item();
    }
}

/*
 * Left + Right
 * 1. Reset Gutter
 */

.x-tab-left,
.x-tab-right {
    flex-direction: column;
    /* 1 */
    margin-left   : 0;
}

/* 1 */
.x-tab-left>*,
.x-tab-right>* {
    padding-left: 0;
}

.x-tab-left {
    @if(mixin-exists(hook-tab-left)) {
        @include hook-tab-left();
    }
}

.x-tab-right {
    @if(mixin-exists(hook-tab-right)) {
        @include hook-tab-right();
    }
}

.x-tab-left>*>a {
    text-align: left;

    @if(mixin-exists(hook-tab-left-item)) {
        @include hook-tab-left-item();
    }
}

.x-tab-right>*>a {
    text-align: left;

    @if(mixin-exists(hook-tab-right-item)) {
        @include hook-tab-right-item();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-tab-misc)) {
    @include hook-tab-misc();
}

// @mixin hook-tab(){}
// @mixin hook-tab-item(){}
// @mixin hook-tab-item-hover(){}
// @mixin hook-tab-item-active(){}
// @mixin hook-tab-item-disabled(){}
// @mixin hook-tab-bottom(){}
// @mixin hook-tab-bottom-item(){}
// @mixin hook-tab-left(){}
// @mixin hook-tab-left-item(){}
// @mixin hook-tab-right(){}
// @mixin hook-tab-right-item(){}
// @mixin hook-tab-misc(){}


// Inverse
// ========================================================================

$inverse-tab-item-color         : $inverse-global-muted-color !default;
$inverse-tab-item-hover-color   : $inverse-global-color !default;
$inverse-tab-item-active-color  : $inverse-global-emphasis-color !default;
$inverse-tab-item-disabled-color: $inverse-global-muted-color !default;



// @mixin hook-inverse-tab(){}
// @mixin hook-inverse-tab-item(){}
// @mixin hook-inverse-tab-item-hover(){}
// @mixin hook-inverse-tab-item-active(){}
// @mixin hook-inverse-tab-item-disabled(){}

//
// Component: Tab
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$tab-border-width:                               $global-border-width !default;
$tab-border:                                     $global-border !default;

$tab-item-border-width:                          $global-border-width !default;
$tab-item-font-size:                             $global-small-font-size !default;
$tab-item-text-transform:                        uppercase !default;

$tab-item-active-border:                         $global-primary-background !default;


// Component
// ========================================================================




// Items
// ========================================================================



// @mixin hook-tab-item-hover(){}



// @mixin hook-tab-item-disabled(){}


// Position modifiers
// ========================================================================














// Miscellaneous
// ========================================================================




// Inverse
// ========================================================================

$inverse-tab-border:                         $inverse-global-border !default;



// @mixin hook-inverse-tab-item(){}
// @mixin hook-inverse-tab-item-hover(){}

// @mixin hook-inverse-tab-item-disabled(){}
// Name:            Table
// Description:     Styles for tables
//
// Component:       `x-table`
//
// Modifiers:       `x-table-middle`
//                  `x-table-divider`
//                  `x-table-striped`
//                  `x-table-hover`
//                  `x-table-small`
//                  `x-table-justify`
//                  `x-table-shrink`
//                  `x-table-expand`
//                  `x-table-link`
//                  `x-table-responsive`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$table-margin-vertical: $global-margin !default;

$table-cell-padding-vertical  : 16px !default;
$table-cell-padding-horizontal: 12px !default;

$table-header-cell-font-size  : $global-font-size !default;
$table-header-cell-font-weight: bold !default;
$table-header-cell-color      : $global-color !default;

$table-footer-font-size: $global-small-font-size !default;

$table-caption-font-size: $global-small-font-size !default;
$table-caption-color    : $global-muted-color !default;

$table-row-active-background: #ffd !default;

$table-divider-border-width: $global-border-width !default;
$table-divider-border      : $global-border !default;

$table-striped-row-background: $global-muted-background !default;

$table-hover-row-background: $table-row-active-background !default;

$table-small-cell-padding-vertical  : 10px !default;
$table-small-cell-padding-horizontal: 12px !default;

$table-large-cell-padding-vertical  : 22px !default;
$table-large-cell-padding-horizontal: 12px !default;

$table-expand-min-width: 150px !default;


/* ========================================================================
   Component: Table
 ========================================================================== */

/*
 * 1. Remove most spacing between table cells.
 * 2. Behave like a block element
 * 3. Style
 */

.x-table {
    /* 1 */
    border-collapse: collapse;
    border-spacing : 0;
    /* 2 */
    width          : 100%;
    /* 3 */
    margin-bottom  : $table-margin-vertical;

    @if(mixin-exists(hook-table)) {
        @include hook-table();
    }
}

/* Add margin if adjacent element */
*+.x-table {
    margin-top: $table-margin-vertical;
}


/* Header cell
 ========================================================================== */

/*
 * 1. Style
 */

.x-table th {
    padding       : $table-cell-padding-vertical $table-cell-padding-horizontal;
    text-align    : left;
    vertical-align: bottom;
    /* 1 */
    font-size     : $table-header-cell-font-size;
    font-weight   : $table-header-cell-font-weight;
    color         : $table-header-cell-color;

    @if(mixin-exists(hook-table-header-cell)) {
        @include hook-table-header-cell();
    }
}


/* Cell
 ========================================================================== */

.x-table td {
    padding       : $table-cell-padding-vertical $table-cell-padding-horizontal;
    vertical-align: top;

    @if(mixin-exists(hook-table-cell)) {
        @include hook-table-cell();
    }
}

/*
 * Remove margin from the last-child
 */

.x-table td> :last-child {
    margin-bottom: 0;
}


/* Footer
 ========================================================================== */

.x-table tfoot {
    font-size: $table-footer-font-size;

    @if(mixin-exists(hook-table-footer)) {
        @include hook-table-footer();
    }
}


/* Caption
 ========================================================================== */

.x-table caption {
    font-size : $table-caption-font-size;
    text-align: left;
    color     : $table-caption-color;

    @if(mixin-exists(hook-table-caption)) {
        @include hook-table-caption();
    }
}


/* Alignment modifier
 ========================================================================== */

.x-table-middle,
.x-table-middle td {
    vertical-align: middle !important;
}


/* Style modifiers
 ========================================================================== */

/*
 * Divider
 */

.x-table-divider>tr:not(:first-child),
.x-table-divider> :not(:first-child)>tr,
.x-table-divider> :first-child>tr:not(:first-child) {
    border-top: $table-divider-border-width solid $table-divider-border;

    @if(mixin-exists(hook-table-divider)) {
        @include hook-table-divider();
    }
}

/*
 * Striped
 */

.x-table-striped>tr:nth-of-type(odd),
.x-table-striped tbody tr:nth-of-type(odd) {
    background: $table-striped-row-background;

    @if(mixin-exists(hook-table-striped)) {
        @include hook-table-striped();
    }
}

/*
 * Hover
 */

.x-table-hover>tr:hover,
.x-table-hover tbody tr:hover {
    background: $table-hover-row-background;

    @if(mixin-exists(hook-table-hover)) {
        @include hook-table-hover();
    }
}


/* Active state
 ========================================================================== */

.x-table>tr.x-active,
.x-table tbody tr.x-active {
    background: $table-row-active-background;

    @if(mixin-exists(hook-table-row-active)) {
        @include hook-table-row-active();
    }
}

/* Size modifier
 ========================================================================== */

.x-table-small th,
.x-table-small td {
    padding: $table-small-cell-padding-vertical $table-small-cell-padding-horizontal;

    @if(mixin-exists(hook-table-small)) {
        @include hook-table-small();
    }
}

.x-table-large th,
.x-table-large td {
    padding: $table-large-cell-padding-vertical $table-large-cell-padding-horizontal;

    @if(mixin-exists(hook-table-large)) {
        @include hook-table-large();
    }
}


/* Justify modifier
 ========================================================================== */

.x-table-justify th:first-child,
.x-table-justify td:first-child {
    padding-left: 0;
}

.x-table-justify th:last-child,
.x-table-justify td:last-child {
    padding-right: 0;
}


/* Cell size modifier
 ========================================================================== */

.x-table-shrink {
    width: 1px;
}

.x-table-expand {
    min-width: $table-expand-min-width;
}


/* Cell link modifier
 ========================================================================== */

/*
 * Does not work with `x-table-justify` at the moment
 */

.x-table-link {
    padding: 0 !important;
}

.x-table-link>a {
    display: block;
    padding: $table-cell-padding-vertical $table-cell-padding-horizontal;
}

.x-table-small .x-table-link>a {
    padding: $table-small-cell-padding-vertical $table-small-cell-padding-horizontal;
}


/* Responsive table
 ========================================================================== */


/* Phone landscape and smaller */
@media (max-width: $breakpoint-small-max) {

    .x-table-responsive,
    .x-table-responsive tbody,
    .x-table-responsive th,
    .x-table-responsive td,
    .x-table-responsive tr {
        display: block;
    }

    .x-table-responsive thead {
        display: none;
    }

    .x-table-responsive th,
    .x-table-responsive td {
        width      : auto !important;
        max-width  : none !important;
        min-width  : 0 !important;
        overflow   : visible !important;
        white-space: normal !important;
    }

    .x-table-responsive th:not(:first-child):not(.x-table-link),
    .x-table-responsive td:not(:first-child):not(.x-table-link),
    .x-table-responsive .x-table-link:not(:first-child)>a {
        padding-top: round($table-cell-padding-vertical / 3) !important;
    }

    .x-table-responsive th:not(:last-child):not(.x-table-link),
    .x-table-responsive td:not(:last-child):not(.x-table-link),
    .x-table-responsive .x-table-link:not(:last-child)>a {
        padding-bottom: round($table-cell-padding-vertical / 3) !important;
    }

    .x-table-justify.x-table-responsive th,
    .x-table-justify.x-table-responsive td {
        padding-left : 0;
        padding-right: 0;
    }

}


// Hooks
// ========================================================================

@if(mixin-exists(hook-table-misc)) {
    @include hook-table-misc();
}

// @mixin hook-table(){}
// @mixin hook-table-header-cell(){}
// @mixin hook-table-cell(){}
// @mixin hook-table-footer(){}
// @mixin hook-table-caption(){}
// @mixin hook-table-row-active(){}
// @mixin hook-table-divider(){}
// @mixin hook-table-striped(){}
// @mixin hook-table-hover(){}
// @mixin hook-table-small(){}
// @mixin hook-table-large(){}
// @mixin hook-table-misc(){}


// Inverse
// ========================================================================

$inverse-table-header-cell-color     : $inverse-global-color !default;
$inverse-table-caption-color         : $inverse-global-muted-color !default;
$inverse-table-row-active-background : fade-out($inverse-global-muted-background, 0.02) !default;
$inverse-table-divider-border        : $inverse-global-border !default;
$inverse-table-striped-row-background: $inverse-global-muted-background !default;
$inverse-table-hover-row-background  : $inverse-table-row-active-background !default;



// @mixin hook-inverse-table-header-cell(){}
// @mixin hook-inverse-table-caption(){}
// @mixin hook-inverse-table-row-active(){}
// @mixin hook-inverse-table-divider(){}
// @mixin hook-inverse-table-striped(){}
// @mixin hook-inverse-table-hover(){}

//
// Component: Table
//
// ========================================================================


// Variables
// ========================================================================

$table-header-cell-font-size:                    $global-small-font-size !default;
$table-header-cell-font-weight:                  normal !default;
$table-header-cell-color:                        $global-muted-color !default;

//
// New
//

$table-striped-border-width:                     $global-border-width !default;
$table-striped-border:                           $global-border !default;


// Component
// ========================================================================



// @mixin hook-table-cell(){}

// @mixin hook-table-footer(){}

// @mixin hook-table-caption(){}

// @mixin hook-table-row-active(){}


// Style modifiers
// ========================================================================

// @mixin hook-table-divider(){}



// @mixin hook-table-hover(){}


// Size modifier
// ========================================================================

// @mixin hook-table-small(){}

// @mixin hook-table-large(){}


// Miscellaneous
// ========================================================================




// Inverse
// ========================================================================

// @mixin hook-inverse-table-header-cell(){}
// @mixin hook-inverse-table-caption(){}
// @mixin hook-inverse-table-row-active(){}
// @mixin hook-inverse-table-divider(){}

// @mixin hook-inverse-table-hover(){}
// Name:            Text
// Description:     Utilities for text
//
// Component:       `x-text-*`
//
// ========================================================================


// Variables
// ========================================================================

$text-lex-font-size  : $global-large-font-size !default;
$text-lex-line-height: 1.5 !default;
$text-lex-color      : $global-emphasis-color !default;

$text-meta-font-size  : $global-small-font-size !default;
$text-meta-line-height: 1.4 !default;
$text-meta-color      : $global-muted-color !default;

$text-small-font-size  : $global-small-font-size !default;
$text-small-line-height: 1.5 !default;

$text-large-font-size  : $global-large-font-size !default;
$text-large-line-height: 1.5 !default;

$text-muted-color    : $global-muted-color !default;
$text-emphasis-color : $global-emphasis-color !default;
$text-primary-color  : $global-primary-background !default;
$text-secondary-color: $global-secondary-background !default;
$text-success-color  : $global-success-background !default;
$text-warning-color  : $global-warning-background !default;
$text-danger-color   : $global-danger-background !default;

$text-background-color: $global-primary-background !default;


/* ========================================================================
   Component: Text
 ========================================================================== */


/* Style modifiers
 ========================================================================== */

.x-text-lead {
    font-size  : $text-lex-font-size;
    line-height: $text-lex-line-height;
    color      : $text-lex-color;

    @if(mixin-exists(hook-text-lead)) {
        @include hook-text-lead();
    }
}

.x-text-meta {
    font-size  : $text-meta-font-size;
    line-height: $text-meta-line-height;
    color      : $text-meta-color;

    @if(mixin-exists(hook-text-meta)) {
        @include hook-text-meta();
    }
}


/* Size modifiers
 ========================================================================== */

.x-text-small {
    font-size  : $text-small-font-size;
    line-height: $text-small-line-height;

    @if(mixin-exists(hook-text-small)) {
        @include hook-text-small();
    }
}

.x-text-large {
    font-size  : $text-large-font-size;
    line-height: $text-large-line-height;

    @if(mixin-exists(hook-text-large)) {
        @include hook-text-large();
    }
}

.x-text-default {
    font-size  : $global-font-size;
    line-height: $global-line-height;
}


/* Weight modifier
 ========================================================================== */

.x-text-light {
    font-weight: 300;
}

.x-text-normal {
    font-weight: 400;
}

.x-text-bold {
    font-weight: 700;
}

.x-text-lighter {
    font-weight: lighter;
}

.x-text-bolder {
    font-weight: bolder;
}


/* Style modifier
 ========================================================================== */

.x-text-italic {
    font-style: italic;
}


/* Transform modifier
 ========================================================================== */

.x-text-capitalize {
    text-transform: capitalize !important;
}

.x-text-uppercase {
    text-transform: uppercase !important;
}

.x-text-lowercase {
    text-transform: lowercase !important;
}


/* Color modifiers
 ========================================================================== */

.x-text-muted {
    color: $text-muted-color !important;
}

.x-text-emphasis {
    color: $text-emphasis-color !important;
}

.x-text-primary {
    color: $text-primary-color !important;
}

.x-text-secondary {
    color: $text-secondary-color !important;
}

.x-text-success {
    color: $text-success-color !important;
}

.x-text-warning {
    color: $text-warning-color !important;
}

.x-text-danger {
    color: $text-danger-color !important;
}


/* Background modifier
 ========================================================================== */

/*
 * 1. The background clips to the foreground text. Works in Chrome, Firefox, Safari, Edge and Opera
 *    Default color is set to transparent
 * 2. Container fits the text
 * 3. Fallback color for IE11
 */

.x-text-background {
    /* 1 */
    background-clip        : text;
    -webkit-background-clip: text;
    /* 2 */
    display                : inline-block;
    /* 3 */
    color                  : $text-background-color !important;
}

@supports (-webkit-background-clip: text) {

    .x-text-background {
        background-color: $text-background-color;
        color           : transparent !important;

        @if(mixin-exists(hook-text-background)) {
            @include hook-text-background();
        }
    }

}


/* Alignment modifiers
 ========================================================================== */

.x-text-left {
    text-align: left !important;
}

.x-text-right {
    text-align: right !important;
}

.x-text-center {
    text-align: center !important;
}

.x-text-justify {
    text-align: justify !important;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-text-left\:small {
        text-align: left !important;
    }

    .x-text-right\:small {
        text-align: right !important;
    }

    .x-text-center\:small {
        text-align: center !important;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-text-left\:medium {
        text-align: left !important;
    }

    .x-text-right\:medium {
        text-align: right !important;
    }

    .x-text-center\:medium {
        text-align: center !important;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-text-left\:large {
        text-align: left !important;
    }

    .x-text-right\:large {
        text-align: right !important;
    }

    .x-text-center\:large {
        text-align: center !important;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-text-left\:xlarge {
        text-align: left !important;
    }

    .x-text-right\:xlarge {
        text-align: right !important;
    }

    .x-text-center\:xlarge {
        text-align: center !important;
    }

}

/*
 * Vertical
 */

.x-text-top {
    vertical-align: top !important;
}

.x-text-middle {
    vertical-align: middle !important;
}

.x-text-bottom {
    vertical-align: bottom !important;
}

.x-text-baseline {
    vertical-align: baseline !important;
}


/* Wrap modifiers
 ========================================================================== */

/*
 * Prevent text from wrapping onto multiple lines
 */

.x-text-nowrap {
    white-space: nowrap;
}

/*
 * 1. Make sure a max-width is set after which truncation can occur
 * 2. Prevent text from wrapping onto multiple lines, and truncate with an ellipsis
 * 3. Fix for table cells
 */

.x-text-truncate {
    /* 1 */
    max-width    : 100%;
    /* 2 */
    overflow     : hidden;
    text-overflow: ellipsis;
    white-space  : nowrap;
}

/* 2 */
th.x-text-truncate,
td.x-text-truncate {
    max-width: 0;
}


/*
 * 1. Wrap long words onto the next line and break them if they are too long to fit
 * 2. Legacy `word-wrap` as fallback for `overflow-wrap`
 * 3. Fix `overflow-wrap` which doesn't work with table cells in Chrome, Opera, IE11 and Edge
 *    Must use `break-all` to support IE11 and Edge
 * Note: Not using `hyphens: auto;` because it hyphenates text even if not needed
 */

.x-text-break {
    /* 1 */
    overflow-wrap: break-word;
    /* 2 */
    word-wrap    : break-word;
}

/* 3 */
th.x-text-break,
td.x-text-break {
    word-break: break-all;
}



// Hooks
// ========================================================================

@if(mixin-exists(hook-text-misc)) {
    @include hook-text-misc();
}

// @mixin hook-text-lead(){}
// @mixin hook-text-meta(){}
// @mixin hook-text-small(){}
// @mixin hook-text-large(){}
// @mixin hook-text-background(){}
// @mixin hook-text-misc(){}


// Inverse
// ========================================================================

$inverse-text-lex-color     : $inverse-global-color !default;
$inverse-text-meta-color     : $inverse-global-muted-color !default;
$inverse-text-muted-color    : $inverse-global-muted-color !default;
$inverse-text-emphasis-color : $inverse-global-emphasis-color !default;
$inverse-text-primary-color  : $inverse-global-primary-background !default;
$inverse-text-secondary-color: $inverse-global-primary-background !default;



// @mixin hook-inverse-text-lead(){}
// @mixin hook-inverse-text-meta(){}

//
// Component: Text
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$text-meta-link-color:                           $text-meta-color !default;
$text-meta-link-hover-color:                     $global-color !default;


// Style modifiers
// ========================================================================

// @mixin hook-text-lead(){}




// Size modifiers
// ========================================================================

// @mixin hook-text-small(){}

// @mixin hook-text-large(){}


// Background modifier
// ========================================================================

// @mixin hook-text-background(){}


// Miscellaneous
// ========================================================================

// @mixin hook-text-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-text-lead(){}
// @mixin hook-inverse-text-meta(){}

// Name:            Thumbnav
// Description:     Component to create thumbnail navigations
//
// Component:       `x-thumbnav`
//
// Modifier:        `x-thumbnav-vertical`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$thumbnav-margin-horizontal: 15px !default;
$thumbnav-margin-vertical  : $thumbnav-margin-horizontal !default;


/* ========================================================================
   Component: Thumbnav
 ========================================================================== */

/*
 * 1. Allow items to wrap into the next line
 * 2. Reset list
 * 3. Gutter
 */

.x-thumbnav {
    display    : flex;
    /* 1 */
    flex-wrap  : wrap;
    /* 2 */
    margin     : 0;
    padding    : 0;
    list-style : none;
    /* 3 */
    margin-left: (-$thumbnav-margin-horizontal);

    @if(mixin-exists(hook-thumbnav)) {
        @include hook-thumbnav();
    }
}

/*
 * Space is allocated based on content dimensions, but shrinks: 0 1 auto
 * 1. Gutter
 */

.x-thumbnav>* {
    /* 1 */
    padding-left: $thumbnav-margin-horizontal;
}


/* Items
 ========================================================================== */

/*
 * Items
 */

.x-thumbnav>*>* {
    display: inline-block;

    @if(mixin-exists(hook-thumbnav-item)) {
        @include hook-thumbnav-item();
    }
}

/* Hover + Focus */
.x-thumbnav>*> :hover,
.x-thumbnav>*> :focus {
    outline: none;

    @if(mixin-exists(hook-thumbnav-item-hover)) {
        @include hook-thumbnav-item-hover();
    }
}

/* Active */
.x-thumbnav>.x-active>* {
    @if(mixin-exists(hook-thumbnav-item-active)) {
        @include hook-thumbnav-item-active();
    }
}


/* Modifier: 'x-thumbnav-vertical'
 ========================================================================== */

/*
 * 1. Change direction
 * 2. Gutter
 */

.x-thumbnav-vertical {
    /* 1 */
    flex-direction: column;
    /* 2 */
    margin-left   : 0;
    margin-top    : (-$thumbnav-margin-vertical);
}

/* 2 */
.x-thumbnav-vertical>* {
    padding-left: 0;
    padding-top : $thumbnav-margin-vertical;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-thumbnav-misc)) {
    @include hook-thumbnav-misc();
}

// @mixin hook-thumbnav(){}
// @mixin hook-thumbnav-item(){}
// @mixin hook-thumbnav-item-hover(){}
// @mixin hook-thumbnav-item-active(){}
// @mixin hook-thumbnav-misc(){}


// Inverse
// ========================================================================



// @mixin hook-inverse-thumbnav-item(){}
// @mixin hook-inverse-thumbnav-item-hover(){}
// @mixin hook-inverse-thumbnav-item-active(){}

//
// Component: Thumbnav
//
// ========================================================================


// Variables
// ========================================================================

//
// New
//

$thumbnav-item-background:                       rgba($global-background, 0.4) !default;
$thumbnav-item-hover-background:                 transparent !default;
$thumbnav-item-active-background:                transparent !default;


// Component
// ========================================================================

// @mixin hook-thumbnav(){}








// Miscellaneous
// ========================================================================

// @mixin hook-thumbnav-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-thumbnav-item(){}
// @mixin hook-inverse-thumbnav-item-hover(){}
// @mixin hook-inverse-thumbnav-item-active(){}
// Name:            Tile
// Description:     Component to create tiled boxes
//
// Component:       `x-tile`
//
// Modifiers:       `x-tile-xsmall`
//                  `x-tile-small`
//                  `x-tile-large`
//                  `x-tile-xlarge`
//                  `x-tile-default`
//                  `x-tile-muted`
//                  `x-tile-primary`
//                  `x-tile-secondary`
//
// States:          `x-preserve-color`
//
// ========================================================================


// Variables
// ========================================================================

$tile-padding-horizontal  : 15px !default;
$tile-padding-horizontal-s: $global-gutter !default;
$tile-padding-horizontal-m: $global-medium-gutter !default;
$tile-padding-vertical    : $global-medium-margin !default;
$tile-padding-vertical-m  : $global-large-margin !default;

$tile-xsmall-padding-vertical: $global-margin !default;

$tile-small-padding-vertical: $global-medium-margin !default;

$tile-large-padding-vertical  : $global-large-margin !default;
$tile-large-padding-vertical-m: $global-xlarge-margin !default;

$tile-xlarge-padding-vertical  : $global-xlarge-margin !default;
$tile-xlarge-padding-vertical-m: ($global-large-margin + $global-xlarge-margin) !default;

$tile-default-background: $global-background !default;

$tile-muted-background: $global-muted-background !default;

$tile-primary-background: $global-primary-background !default;
$tile-primary-color-mode: light !default;

$tile-secondary-background: $global-secondary-background !default;
$tile-secondary-color-mode: light !default;


/* ========================================================================
   Component: Tile
 ========================================================================== */

.x-tile {
    display       : flow-root;
    position      : relative;
    box-sizing    : border-box;
    padding-left  : $tile-padding-horizontal;
    padding-right : $tile-padding-horizontal;
    padding-top   : $tile-padding-vertical;
    padding-bottom: $tile-padding-vertical;

    @if(mixin-exists(hook-tile)) {
        @include hook-tile();
    }
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-tile {
        padding-left : $tile-padding-horizontal-s;
        padding-right: $tile-padding-horizontal-s;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-tile {
        padding-left  : $tile-padding-horizontal-m;
        padding-right : $tile-padding-horizontal-m;
        padding-top   : $tile-padding-vertical-m;
        padding-bottom: $tile-padding-vertical-m;
    }

}

/*
 * Remove margin from the last-child
 */

.x-tile> :last-child {
    margin-bottom: 0;
}


/* Size modifiers
 ========================================================================== */

/*
 * XSmall
 */

.x-tile-xsmall {
    padding-top   : $tile-xsmall-padding-vertical;
    padding-bottom: $tile-xsmall-padding-vertical;
}

/*
 * Small
 */

.x-tile-small {
    padding-top   : $tile-small-padding-vertical;
    padding-bottom: $tile-small-padding-vertical;
}

/*
 * Large
 */

.x-tile-large {
    padding-top   : $tile-large-padding-vertical;
    padding-bottom: $tile-large-padding-vertical;
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-tile-large {
        padding-top   : $tile-large-padding-vertical-m;
        padding-bottom: $tile-large-padding-vertical-m;
    }

}


/*
 * XLarge
 */

.x-tile-xlarge {
    padding-top   : $tile-xlarge-padding-vertical;
    padding-bottom: $tile-xlarge-padding-vertical;
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-tile-xlarge {
        padding-top   : $tile-xlarge-padding-vertical-m;
        padding-bottom: $tile-xlarge-padding-vertical-m;
    }

}


/* Style modifiers
 ========================================================================== */

/*
 * Default
 */

.x-tile-default {
    background: $tile-default-background;

    @if(mixin-exists(hook-tile-default)) {
        @include hook-tile-default();
    }
}

/*
 * Muted
 */

.x-tile-muted {
    background: $tile-muted-background;

    @if(mixin-exists(hook-tile-muted)) {
        @include hook-tile-muted();
    }
}

/*
 * Primary
 */

.x-tile-primary {
    background: $tile-primary-background;

    @if(mixin-exists(hook-tile-primary)) {
        @include hook-tile-primary();
    }
}

// Color Mode
@if ($tile-primary-color-mode==light) {
    .x-tile-primary:not(.x-preserve-color) {
        @extend .x-light !optional;
    }
}

@if ($tile-primary-color-mode==dark) {
    .x-tile-primary:not(.x-preserve-color) {
        @extend .x-dark !optional;
    }
}

/*
 * Secondary
 */

.x-tile-secondary {
    background: $tile-secondary-background;

    @if(mixin-exists(hook-tile-secondary)) {
        @include hook-tile-secondary();
    }
}

// Color Mode
@if ($tile-secondary-color-mode==light) {
    .x-tile-secondary:not(.x-preserve-color) {
        @extend .x-light !optional;
    }
}

@if ($tile-secondary-color-mode==dark) {
    .x-tile-secondary:not(.x-preserve-color) {
        @extend .x-dark !optional;
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-tile-misc)) {
    @include hook-tile-misc();
}

// @mixin hook-tile(){}
// @mixin hook-tile-default(){}
// @mixin hook-tile-muted(){}
// @mixin hook-tile-primary(){}
// @mixin hook-tile-secondary(){}
// @mixin hook-tile-misc(){}

//
// Component: Tile
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-tile(){}


// Style modifiers
// ========================================================================

// @mixin hook-tile-default(){}

// @mixin hook-tile-muted(){}

// @mixin hook-tile-primary(){}

// @mixin hook-tile-secondary(){}


// Miscellaneous
// ========================================================================

// @mixin hook-tile-misc(){}
// Name:            Tooltip
// Description:     Component to create tooltips
//
// Component:       `x-tooltip`
//
// Modifiers        `x-tooltip-top`
//                  `x-tooltip-top-left`
//                  `x-tooltip-top-right`
//                  `x-tooltip-bottom`
//                  `x-tooltip-bottom-left`
//                  `x-tooltip-bottom-right`
//                  `x-tooltip-left`
//                  `x-tooltip-right`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$tooltip-z-index           : $global-z-index+30 !default;
$tooltip-max-width         : 200px !default;
$tooltip-padding-vertical  : 3px !default;
$tooltip-padding-horizontal: 6px !default;
$tooltip-background        : #666 !default;
$tooltip-border-radius     : 2px !default;
$tooltip-color             : $global-inverse-color !default;
$tooltip-font-size         : 12px !default;

$tooltip-margin: 10px !default;


/* ========================================================================
   Component: Tooltip
 ========================================================================== */

/*
 * 1. Hide by default
 * 2. Position
 * 3. Remove tooltip from document flow to keep the container from changing its size when injected into the document initially
 * 4. Dimensions
 * 5. Style
 */

.x-tooltip {
  /* 1 */
  display      : none;
  /* 2 */
  position     : absolute;
  z-index      : $tooltip-z-index;
  /* 3 */
  top          : 0;
  /* 4 */
  box-sizing   : border-box;
  max-width    : $tooltip-max-width;
  padding      : $tooltip-padding-vertical $tooltip-padding-horizontal;
  /* 5 */
  background   : $tooltip-background;
  border-radius: $tooltip-border-radius;
  color        : $tooltip-color;
  font-size    : $tooltip-font-size;

  @if(mixin-exists(hook-tooltip)) {
    @include hook-tooltip();
  }
}

/* Show */
.x-tooltip.x-active {
  display: block;
}


/* Direction / Alignment modifiers
 ========================================================================== */

/* Direction */
[class*='x-tooltip-top'] {
  margin-top: (-$tooltip-margin);
}

[class*='x-tooltip-bottom'] {
  margin-top: $tooltip-margin;
}

[class*='x-tooltip-left'] {
  margin-left: (-$tooltip-margin);
}

[class*='x-tooltip-right'] {
  margin-left: $tooltip-margin;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-tooltip-misc)) {
  @include hook-tooltip-misc();
}

// @mixin hook-tooltip(){}
// @mixin hook-tooltip-misc(){}

//
// Component: Tooltip
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================

// @mixin hook-tooltip(){}


// Miscellaneous
// ========================================================================

// @mixin hook-tooltip-misc(){}
// Name:            Totop
// Description:     Component to create an icon to scroll back to top
//
// Component:       `x-totop`
//
// ========================================================================


// Variables
// ========================================================================

$totop-padding: 5px !default;
$totop-color  : $global-muted-color !default;

$totop-hover-color: $global-color !default;

$totop-active-color: $global-emphasis-color !default;


/* ========================================================================
   Component: Totop
 ========================================================================== */

/*
 * Addopts `x-icon`
 */

.x-totop {
    padding: $totop-padding;
    color  : $totop-color;

    @if(mixin-exists(hook-totop)) {
        @include hook-totop();
    }
}

/* Hover + Focus */
.x-totop:hover,
.x-totop:focus {
    color  : $totop-hover-color;
    outline: none;

    @if(mixin-exists(hook-totop-hover)) {
        @include hook-totop-hover();
    }
}

/* OnClick */
.x-totop:active {
    color: $totop-active-color;

    @if(mixin-exists(hook-totop-active)) {
        @include hook-totop-active();
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-totop-misc)) {
    @include hook-totop-misc();
}

// @mixin hook-totop(){}
// @mixin hook-totop-hover(){}
// @mixin hook-totop-active(){}
// @mixin hook-totop-misc(){}


// Inverse
// ========================================================================

$inverse-totop-color       : $inverse-global-muted-color !default;
$inverse-totop-hover-color : $inverse-global-color !default;
$inverse-totop-active-color: $inverse-global-emphasis-color !default;



// @mixin hook-inverse-totop(){}
// @mixin hook-inverse-totop-hover(){}
// @mixin hook-inverse-totop-active(){}

//
// Component: Totop
//
// ========================================================================


// Variables
// ========================================================================


// Component
// ========================================================================



// @mixin hook-totop-hover(){}

// @mixin hook-totop-active(){}


// Miscellaneous
// ========================================================================

// @mixin hook-icon-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-totop(){}
// @mixin hook-inverse-totop-hover(){}
// @mixin hook-inverse-totop-active(){}
// Name:            Transition
// Description:     Utilities for transitions
//
// Component:       `x-transition-*`
//
// Modifiers:       `x-transition-fade`
//                  `x-transition-scale-up`
//                  `x-transition-scale-down`
//                  `x-transition-slide-top-*`
//                  `x-transition-slide-bottom-*`
//                  `x-transition-slide-left-*`
//                  `x-transition-slide-right-*`
//                  `x-transition-opaque`
//                  `x-transition-slow`
//
// Sub-objects:     `x-transition-toggle`,
//                  `x-transition-active`
//
// States:          `x-active`
//
// ========================================================================


// Variables
// ========================================================================

$transition-duration: 0.3s !default;

$transition-scale: 1.03 !default;

$transition-slide-small-translate : 10px !default;
$transition-slide-medium-translate: 50px !default;

$transition-slow-duration: 0.7s !default;


/* ========================================================================
   Component: Transition
 ========================================================================== */


/* Toggle (Hover + Focus)
 ========================================================================== */

/*
 * 1. Prevent tab highlighting on iOS.
 */

.x-transition-toggle {
    /* 1 */
    -webkit-tap-highlight-color: transparent;
}

/*
 * Remove outline for `tabindex`
 */

.x-transition-toggle:focus {
    outline: none;
}


/* Transitions
 ========================================================================== */

/*
 * The toggle is triggered on touch devices by two methods:
 * 1. Using `:focus` and tabindex
 * 2. Using `:hover` and a `touchstart` event listener registered on the document
 *    (Doesn't work on Surface touch devices)
 *
 * Note: Transitions don't work with `x-postion-center-*` classes because they also use `transform`,
 *       therefore it's recommended to use an extra `div` for the transition.
 */

.x-transition-fade,
[class*='x-transition-scale'],
[class*='x-transition-slide'] {
    transition         : $transition-duration ease-out;
    transition-property: opacity, transform, filter;
    opacity            : 0;
}

/*
 * Fade
 */

.x-transition-toggle:hover .x-transition-fade,
.x-transition-toggle:focus .x-transition-fade,
.x-transition-active.x-active .x-transition-fade {
    opacity: 1;
}

/*
 * Scale
 */

.x-transition-scale-up {
    transform: scale(1, 1);
}

.x-transition-scale-down {
    transform: scale($transition-scale, $transition-scale);
}

/* Show */
.x-transition-toggle:hover .x-transition-scale-up,
.x-transition-toggle:focus .x-transition-scale-up,
.x-transition-active.x-active .x-transition-scale-up {
    opacity  : 1;
    transform: scale($transition-scale, $transition-scale);
}

.x-transition-toggle:hover .x-transition-scale-down,
.x-transition-toggle:focus .x-transition-scale-down,
.x-transition-active.x-active .x-transition-scale-down {
    opacity  : 1;
    transform: scale(1, 1);
}

/*
 * Slide
 */

.x-transition-slide-top {
    transform: translateY(-100%);
}

.x-transition-slide-bottom {
    transform: translateY(100%);
}

.x-transition-slide-left {
    transform: translateX(-100%);
}

.x-transition-slide-right {
    transform: translateX(100%);
}

.x-transition-slide-top-small {
    transform: translateY(-$transition-slide-small-translate);
}

.x-transition-slide-bottom-small {
    transform: translateY($transition-slide-small-translate);
}

.x-transition-slide-left-small {
    transform: translateX(-$transition-slide-small-translate);
}

.x-transition-slide-right-small {
    transform: translateX($transition-slide-small-translate);
}

.x-transition-slide-top-medium {
    transform: translateY(-$transition-slide-medium-translate);
}

.x-transition-slide-bottom-medium {
    transform: translateY($transition-slide-medium-translate);
}

.x-transition-slide-left-medium {
    transform: translateX(-$transition-slide-medium-translate);
}

.x-transition-slide-right-medium {
    transform: translateX($transition-slide-medium-translate);
}

/* Show */
.x-transition-toggle:hover [class*='x-transition-slide'],
.x-transition-toggle:focus [class*='x-transition-slide'],
.x-transition-active.x-active [class*='x-transition-slide'] {
    opacity  : 1;
    transform: translate(0, 0);
}


/* Opacity modifier
 ========================================================================== */

.x-transition-opaque {
    opacity: 1;
}


/* Duration modifiers
 ========================================================================== */

.x-transition-slow {
    transition-duration: $transition-slow-duration;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-transition-misc)) {
    @include hook-transition-misc();
}

// @mixin hook-transition-misc(){}

//
// Component: Transition
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-transition-misc(){}
// Name:            Utility
// Description:     Utilities collection
//
// Component:       `x-panel-*`
//                  `x-clearfix`
//                  `x-float-*`
//                  `x-overflow-*`
//                  `x-resize-*`
//                  `x-display-*`
//                  `x-inline-*`
//                  `x-responsive-*`
//                  `x-preserve-width`
//                  `x-border-*`
//                  `x-box-shadow-*`
//                  `x-box-shadow-bottom`
//                  `x-dropcap`
//                  `x-logo`
//                  `x-blend-*`
//                  `x-transform-*`
//                  `x-transform-origin-*`
//
// States:          `x-disabled`
//                  `x-drag`
//                  `x-dragover`
//                  `x-preserve`
//
// ========================================================================


// Variables
// ========================================================================

$panel-scrollable-height      : 170px !default;
$panel-scrollable-padding     : 10px !default;
$panel-scrollable-border-width: $global-border-width !default;
$panel-scrollable-border      : $global-border !default;

$border-rounded-border-radius: 5px !default;
$border-xrounded-border-radius: 10px !default;
$border-xxrounded-border-radius: 15px !default;

$box-shadow-duration: 0.1s !default;

$box-shadow-bottom-height       : 30px !default;
$box-shadow-bottom-border-radius: 100% !default;
$box-shadow-bottom-background   : #444 !default;
$box-shadow-bottom-blur         : 20px !default;

$dropcap-margin-right: 10px !default;
$dropcap-font-size   : (($global-line-height * 3) * 1em) !default;

$logo-font-size  : $global-large-font-size !default;
$logo-font-family: $global-font-family !default;
$logo-color      : $global-color !default;
$logo-hover-color: $global-color !default;

$dragover-box-shadow: 0 0 20px rgba(100, 100, 100, 0.3) !default;


/* ========================================================================
   Component: Utility
 ========================================================================== */


/* Panel
 ========================================================================== */

.x-panel {
    display   : flow-root;
    position  : relative;
    box-sizing: border-box;
}

/*
 * Remove margin from the last-child
 */

.x-panel> :last-child {
    margin-bottom: 0;
}


/*
 * Scrollable
 */

.x-panel-scrollable {
    height                    : $panel-scrollable-height;
    padding                   : $panel-scrollable-padding;
    border                    : $panel-scrollable-border-width solid $panel-scrollable-border;
    overflow                  : auto;
    -webkit-overflow-scrolling: touch;
    resize                    : both;

    @if(mixin-exists(hook-panel-scrollable)) {
        @include hook-panel-scrollable();
    }
}


/* Clearfix
 ========================================================================== */

/*
 * 1. `table-cell` is used with `::before` because `table` creates a 1px gap when it becomes a flex item, only in Webkit
 * 2. `table` is used again with `::after` because `clear` only works with block elements.
 * Note: `display: block` with `overflow: hidden` is currently not working in the latest Safari
 */

/* 1 */
.x-clearfix::before {
    content: "";
    display: table-cell;
}

/* 2 */
.x-clearfix::after {
    content: "";
    display: table;
    clear  : both;
}


/* Float
 ========================================================================== */

/*
 * 1. Prevent content overflow
 */

.x-float-left {
    float: left;
}

.x-float-right {
    float: right;
}

/* 1 */
[class*='x-float-'] {
    max-width: 100%;
}


/* Overfow
 ========================================================================== */

.x-overflow-hidden {
    overflow: hidden;
}

/*
 * Enable scrollbars if content is clipped
 * Note: Firefox ignores `padding-bottom` for the scrollable overflow https://bugzilla.mozilla.org/show_bug.cgi?id=748518
 */

.x-overflow-auto {
    overflow                  : auto;
    -webkit-overflow-scrolling: touch;
}

.x-overflow-auto> :last-child {
    margin-bottom: 0;
}


/* Resize
 ========================================================================== */

.x-resize {
    resize: both;
}

.x-resize-vertical {
    resize: vertical;
}


/* Display
 ========================================================================== */

.x-display-block {
    display: block !important;
}

.x-display-inline {
    display: inline !important;
}

.x-display-inline-block {
    display: inline-block !important;
}


/* Inline
 ========================================================================== */

/*
 * 1. Container fits its content
 * 2. Create position context
 * 3. Prevent content overflow
 * 4. Behave like most inline-block elements
 * 5. Force hardware acceleration without creating a new stacking context
 *    to fix 1px glitch when combined with overlays and transitions in Webkit
 * 6. Clip child elements
 */

[class*='x-inline'] {
    /* 1 */
    display                    : inline-block;
    /* 2 */
    position                   : relative;
    /* 3 */
    max-width                  : 100%;
    /* 4 */
    vertical-align             : middle;
    /* 5 */
    backface-visibility        : hidden;
    -webkit-backface-visibility: hidden;
}

.x-inline-clip {
    /* 6 */
    overflow: hidden;
}


/* Responsive objects
 ========================================================================== */

/*
 * Preserve original dimensions
 * Because `img, `video`, `canvas` and  `audio` are already responsive by default, see Base component
 */

.x-preserve-width,
.x-preserve-width canvas,
.x-preserve-width img,
.x-preserve-width svg,
.x-preserve-width video {
    max-width: none;
}

/*
 * Responsiveness
 * Corrects `max-width` and `max-height` behavior if padding and border are used
 */

.x-responsive-width,
.x-responsive-height {
    box-sizing: border-box;
}

/*
 * 1. Set a maximum width. `important` needed to override `x-preserve-width img`
 * 2. Auto scale the height. Only needed if `height` attribute is present
 */

.x-responsive-width {
    /* 1 */
    max-width: 100% !important;
    /* 2 */
    height   : auto;
}

/*
 * 1. Set a maximum height. Only works if the parent element has a fixed height
 * 2. Auto scale the width. Only needed if `width` attribute is present
 * 3. Reset max-width, which `img, `video`, `canvas` and  `audio` already have by default
 */

.x-responsive-height {
    /* 1 */
    max-height: 100%;
    /* 2 */
    width     : auto;
    /* 3 */
    max-width : none;
}


/* Border
 ========================================================================== */

.x-border-circle {
    border-radius: 50%;
}

.x-border-pill {
    border-radius: 500px;
}

.x-border-rounded {
    border-radius: $border-rounded-border-radius;
}

.x-border-xrounded {
    border-radius: $border-xrounded-border-radius;
}

.x-border-xxrounded {
    border-radius: $border-xxrounded-border-radius;
}

/*
 * Fix `overflow: hidden` to be ignored with border-radius and CSS transforms in Webkit
 */

.x-inline-clip[class*='x-border-'] {
    -webkit-transform: translateZ(0);
    transform        : translateZ(0);
}


/* Box-shadow
 ========================================================================== */

.x-box-shadow-small {
    box-shadow: $global-small-box-shadow;
}

.x-box-shadow-medium {
    box-shadow: $global-medium-box-shadow;
}

.x-box-shadow-large {
    box-shadow: $global-large-box-shadow;
}

.x-box-shadow-xlarge {
    box-shadow: $global-xlarge-box-shadow;
}

/*
 * Hover
 */

[class*='x-box-shadow-hover'] {
    transition: box-shadow $box-shadow-duration ease-in-out;
}

.x-box-shadow-hover-small:hover {
    box-shadow: $global-small-box-shadow;
}

.x-box-shadow-hover-medium:hover {
    box-shadow: $global-medium-box-shadow;
}

.x-box-shadow-hover-large:hover {
    box-shadow: $global-large-box-shadow;
}

.x-box-shadow-hover-xlarge:hover {
    box-shadow: $global-xlarge-box-shadow;
}


/* Box-shadow bottom
 ========================================================================== */

/*
 * 1. Set position.
 * 2. Set style
 * 3. Blur doesn't work on pseudo elements with negative `z-index` in Edge.
 *    Solved by using `before` and add position context to child elements.
 */

@supports (filter: blur(0)) {

    .x-box-shadow-bottom {
        display       : inline-block;
        position      : relative;
        max-width     : 100%;
        vertical-align: middle;
    }

    .x-box-shadow-bottom::before {
        content      : '';
        /* 1 */
        position     : absolute;
        bottom       : (-$box-shadow-bottom-height);
        left         : 0;
        right        : 0;
        /* 2 */
        height       : $box-shadow-bottom-height;
        border-radius: $box-shadow-bottom-border-radius;
        background   : $box-shadow-bottom-background;
        filter       : blur($box-shadow-bottom-blur);

        @if(mixin-exists(hook-box-shadow-bottom)) {
            @include hook-box-shadow-bottom();
        }
    }

    /* 3 */
    .x-box-shadow-bottom>* {
        position: relative;
    }

}


/* Drop cap
 ========================================================================== */

/*
 * 1. Firefox doesn't apply `::first-letter` if the first letter is inside child elements
 *    https://bugzilla.mozilla.org/show_bug.cgi?id=214004
 * 2. In Firefox, a floating `::first-letter` doesn't have a line box and there for no `line-height`
 *    https://bugzilla.mozilla.org/show_bug.cgi?id=317933
 * 3. Caused by 1.: Edge creates two nested `::first-letter` containers, one for each selector
 *    This doubles the `font-size` exponential when using the `em` unit.
 */

.x-dropcap::first-letter,
/* 1 */
.x-dropcap>p:first-of-type::first-letter {
    display     : block;
    margin-right: $dropcap-margin-right;
    float       : left;
    font-size   : $dropcap-font-size;
    line-height : 1;

    @if(mixin-exists(hook-dropcap)) {
        @include hook-dropcap();
    }
}

/* 2 */
@-moz-document url-prefix() {

    .x-dropcap::first-letter,
    .x-dropcap>p:first-of-type::first-letter {
        margin-top: 1.1%;
    }

}

/* 3 */
@supports (-ms-ime-align: auto) {

    .x-dropcap>p:first-of-type::first-letter {
        font-size: 1em;
    }

}


/* Logo
 ========================================================================== */

/*
 * 1. Required for `a`
 */

.x-logo {
    font-size      : $logo-font-size;
    font-family    : $logo-font-family;
    color          : $logo-color;
    /* 1 */
    text-decoration: none;

    @if(mixin-exists(hook-logo)) {
        @include hook-logo();
    }
}

/* Hover + Focus */
.x-logo:hover,
.x-logo:focus {
    color          : $logo-hover-color;
    outline        : none;
    /* 1 */
    text-decoration: none;

    @if(mixin-exists(hook-logo-hover)) {
        @include hook-logo-hover();
    }
}

.x-logo-inverse {
    display: none;
}


/* Disabled State
 ========================================================================== */

.x-disabled {
    pointer-events: none;
}


/* Drag State
 ========================================================================== */

/*
 * 1. Needed if moving over elements with have their own cursor on hover, e.g. links or buttons
 * 2. Fix dragging over iframes
 */

.x-drag,
/* 1 */
.x-drag * {
    cursor: move;
}

/* 2 */
.x-drag iframe {
    pointer-events: none;
}


/* Dragover State
 ========================================================================== */

/*
 * Create a box-shadow when dragging a file over the upload area
 */

.x-dragover {
    box-shadow: $dragover-box-shadow;
}


/* Blend modes
 ========================================================================== */

.x-blend-multiply {
    mix-blend-mode: multiply;
}

.x-blend-screen {
    mix-blend-mode: screen;
}

.x-blend-overlay {
    mix-blend-mode: overlay;
}

.x-blend-darken {
    mix-blend-mode: darken;
}

.x-blend-lighten {
    mix-blend-mode: lighten;
}

.x-blend-color-dodge {
    mix-blend-mode: color-dodge;
}

.x-blend-color-burn {
    mix-blend-mode: color-burn;
}

.x-blend-hard-light {
    mix-blend-mode: hard-light;
}

.x-blend-soft-light {
    mix-blend-mode: soft-light;
}

.x-blend-difference {
    mix-blend-mode: difference;
}

.x-blend-exclusion {
    mix-blend-mode: exclusion;
}

.x-blend-hue {
    mix-blend-mode: hue;
}

.x-blend-saturation {
    mix-blend-mode: saturation;
}

.x-blend-color {
    mix-blend-mode: color;
}

.x-blend-luminosity {
    mix-blend-mode: luminosity;
}


/* Transform
========================================================================== */

.x-transform-center {
    transform: translate(-50%, -50%);
}


/* Transform Origin
========================================================================== */

.x-transform-origin-top-left {
    transform-origin: 0 0;
}

.x-transform-origin-top-center {
    transform-origin: 50% 0;
}

.x-transform-origin-top-right {
    transform-origin: 100% 0;
}

.x-transform-origin-center-left {
    transform-origin: 0 50%;
}

.x-transform-origin-center-right {
    transform-origin: 100% 50%;
}

.x-transform-origin-bottom-left {
    transform-origin: 0 100%;
}

.x-transform-origin-bottom-center {
    transform-origin: 50% 100%;
}

.x-transform-origin-bottom-right {
    transform-origin: 100% 100%;
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-utility-misc)) {
    @include hook-utility-misc();
}

// @mixin hook-panel-scrollable(){}
// @mixin hook-box-shadow-bottom(){}
// @mixin hook-dropcap(){}
// @mixin hook-logo(){}
// @mixin hook-logo-hover(){}
// @mixin hook-utility-misc(){}


// Inverse
// ========================================================================

$inverse-logo-color      : $inverse-global-color !default;
$inverse-logo-hover-color: $inverse-global-color !default;



// @mixin hook-inverse-dropcap(){}
// @mixin hook-inverse-logo(){}
// @mixin hook-inverse-logo-hover(){}

//
// Component: Utility
//
// ========================================================================


// Variables
// ========================================================================


// Panel
// ========================================================================

// @mixin hook-panel-scrollable(){}


// Box-shadow bottom
// ========================================================================

// @mixin hook-box-shadow-bottom(){}


// Drop cap
// ========================================================================




// Logo
// ========================================================================

// @mixin hook-logo(){}

// @mixin hook-logo-hover(){}


// Miscellaneous
// ========================================================================

// @mixin hook-utility-misc(){}


// Inverse
// ========================================================================

// @mixin hook-inverse-dropcap(){}

// @mixin hook-inverse-logo(){}
// @mixin hook-inverse-logo-hover(){}
//
// Component:       Variables
// Description:     Defines common values which are used across all components
//
// ========================================================================


// Load deprecated components
// ========================================================================

$deprecated: false !default;


// Breakpoints
// ========================================================================

// Phone Portrait:   Galaxy (360x640), iPhone 6 (375x667), iPhone 6+ (414x736)
// Phone Landscape:  Galaxy (640x360), iPhone 6 (667x375), iPhone 6+ (736x414)
// Tablet Portrait:  iPad (768x1024), Galaxy Tab (800x1280),
// Tablet Landscape: iPad (1024x768), iPad Pro (1024x1366),
// Desktop:          Galaxy Tab (1280x800), iPad Pro (1366x1024)

$breakpoint-small : 640px !default; // Phone landscape
$breakpoint-medium: 960px !default; // Tablet Landscape
$breakpoint-large : 1200px !default; // Desktop
$breakpoint-xlarge: 1600px !default; // Large Screens

$breakpoint-xsmall-max: ($breakpoint-small - 1) !default;
$breakpoint-small-max : ($breakpoint-medium - 1) !default;
$breakpoint-medium-max: ($breakpoint-large - 1) !default;
$breakpoint-large-max : ($breakpoint-xlarge - 1) !default;


// Global variables
// ========================================================================

//
// Typography
//

$global-font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Helvetica Neue', Arial, sans-serif !default;
$global-font-size  : 16px !default;
$global-line-height: 1.5 !default; // 24px

$global-2xlarge-font-size: 2.625rem !default; // 42px
$global-xlarge-font-size : 2rem !default; // 32px
$global-large-font-size  : 1.5rem !default; // 24px
$global-medium-font-size : 1.25rem !default; // 20px
$global-small-font-size  : 0.875rem !default; // 14px

//
// Colors
//

$global-color         : #30323b !default;
$global-emphasis-color: #1d2027 !default;
$global-muted-color   : #818899 !default;

$global-link-color      : #1e87f0 !default;
$global-link-hover-color: #0f6ecd !default;

$global-inverse-color: #ffffff !default;

//
// Backgrounds
//

$global-background: #ffffff !default;

$global-muted-background    : #ebeff7 !default;
$global-primary-background  : #1e87f0 !default;
$global-secondary-background: #1d2027 !default;

$global-success-background: #32d296 !default;
$global-warning-background: #faa05a !default;
$global-danger-background : #f0506e !default;

//
// Borders
//

$global-border-width: 1px !default;
$global-border      : #dfe1e6 !default;

//
// Box-Shadows
//

$global-small-box-shadow : 0 2px 8px rgba(0, 0, 0, 0.08) !default;
$global-medium-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08) !default;
$global-large-box-shadow : 0 14px 25px rgba(0, 0, 0, 0.16) !default;
$global-xlarge-box-shadow: 0 28px 50px rgba(0, 0, 0, 0.16) !default;

//
// Spacings
//

// Used in margin, section, list
$global-margin       : 20px !default;
$global-small-margin : 10px !default;
$global-medium-margin: 40px !default;
$global-large-margin : 70px !default;
$global-xlarge-margin: 140px !default;

// Used in grid, column, container, align, card, padding
$global-gutter       : 30px !default;
$global-small-gutter : 15px !default;
$global-medium-gutter: 40px !default;
$global-large-gutter : 70px !default;

//
// Controls
//

$global-control-height      : 40px !default;
$global-control-small-height: 30px !default;
$global-control-large-height: 55px !default;

//
// Z-index
//

$global-z-index: 1000 !default;
// Name:            Visibility
// Description:     Utilities to show or hide content on breakpoints, hover or touch
//
// Component:       `x-hidden-*`
//                  `x-visible-*`
//                  `x-invisible`
//                  `x-visible-toggle`
//                  `x-hidden-hover`
//                  `x-invisible-hover`
//                  `x-hidden-touch`
//                  `x-hidden-notouch`
//
// ========================================================================


/* ========================================================================
   Component: Visibility
 ========================================================================== */

/*
 * Hidden
 * `hidden` attribute also set here to make it stronger
 */

[hidden],
.x-hidden {
    display: none !important;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-hidden\:small {
        display: none !important;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-hidden\:medium {
        display: none !important;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-hidden\:large {
        display: none !important;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-hidden\:xlarge {
        display: none !important;
    }

}

/*
 * Visible
 */

/* Phone portrait and smaller */
@media (max-width: $breakpoint-xsmall-max) {

    .x-visible\:small {
        display: none !important;
    }

}

/* Phone landscape and smaller */
@media (max-width: $breakpoint-small-max) {

    .x-visible\:medium {
        display: none !important;
    }

}

/* Tablet landscape and smaller */
@media (max-width: $breakpoint-medium-max) {

    .x-visible\:large {
        display: none !important;
    }

}

/* Desktop and smaller */
@media (max-width: $breakpoint-large-max) {

    .x-visible\:xlarge {
        display: none !important;
    }

}


/* Visibility
 ========================================================================== */

.x-invisible {
    visibility: hidden !important;
}


/* Toggle (Hover + Focus)
 ========================================================================== */

/*
 * Hidden
 * 1. The toggle is triggered on touch devices using `:focus` and tabindex
 * 2. The target stays visible if any element within receives focus through keyboard
 *    Doesn't work in Edge, yet.
 * 3. Can't use `display: none` nor `visibility: hidden` because both are not focusable.
 *
 */

/* 1 + 2 */
.x-visible-toggle:not(:hover):not(:focus) .x-hidden-hover:not(:focus-within) {
    /* 3 */
    position: absolute !important;
    width   : 0 !important;
    height  : 0 !important;
    padding : 0 !important;
    margin  : 0 !important;
    overflow: hidden !important;
}

/*
 * Invisible
 */

/* 1 + 2 */
.x-visible-toggle:not(:hover):not(:focus) .x-invisible-hover:not(:focus-within) {
    /* 3 */
    opacity: 0 !important;
}

/*
 * 1. Prevent tab highlighting on iOS.
 */

.x-visible-toggle {
    /* 1 */
    -webkit-tap-highlight-color: transparent;
}

/*
 * Remove outline for `tabindex`
 */

.x-visible-toggle:focus {
    outline: none;
}


/* Touch
 ========================================================================== */

/*
 * Hide if primary pointing device has limited accuracy, e.g. a touch screen.
 * Works on mobile browsers: Safari, Chrome and Android browser
 */

@media (pointer: coarse) {
    .x-hidden-touch {
        display: none !important;
    }
}

/*
 * Hide if primary pointing device is accurate, e.g. mouse.
 * 1. Fallback for IE11 and Firefox, because `pointer` is not supported
 * 2. Reset if supported
 */

/* 1 */
.x-hidden-notouch {
    display: none !important;
}

@media (pointer: coarse) {
    .x-hidden-notouch {
        display: block !important;
    }
}


// Hooks
// ========================================================================

@if(mixin-exists(hook-visibility-misc)) {
    @include hook-visibility-misc();
}

// @mixin hook-visibility-misc(){}

// Name:            Width
// Description:     Utilities for widths
//
// Component:       `x-child-width-*`
//                  `x-width-*`
//
// ========================================================================


// Variables
// ========================================================================

$width-small-width  : 150px !default;
$width-medium-width : 300px !default;
$width-large-width  : 450px !default;
$width-xlarge-width : 600px !default;
$width-2xlarge-width: 750px !default;


/* ========================================================================
   Component: Width
 ========================================================================== */


/* Equal child widths
 ========================================================================== */

[class*='x-child-width']>* {
    box-sizing: border-box;
    width     : 100%;
}

.x-child-width-1-2>* {
    width: 50%;
}

.x-child-width-1-3>* {
    width: unquote('calc(100% * 1 / 3.001)');
}

.x-child-width-1-4>* {
    width: 25%;
}

.x-child-width-1-5>* {
    width: 20%;
}

.x-child-width-1-6>* {
    width: unquote('calc(100% * 1 / 6.001)');
}

.x-child-width-auto>* {
    width: auto;
}

/*
 * 1. Reset the `min-width`, which is set to auto by default, because
 *    flex items won't shrink below their minimum intrinsic content size.
 *    Using `1px` instead of `0`, so items still wrap into the next line,
 *    if they have zero width and padding and the predecessor is 100% wide.
 */

.x-child-width-expand> :not([class*='x-width']) {
    flex     : 1;
    /* 1 */
    min-width: 1px;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    .x-child-width-1-1\:small>* {
        width: 100%;
    }

    .x-child-width-1-2\:small>* {
        width: 50%;
    }

    .x-child-width-1-3\:small>* {
        width: unquote('calc(100% * 1 / 3.001)');
    }

    .x-child-width-1-4\:small>* {
        width: 25%;
    }

    .x-child-width-1-5\:small>* {
        width: 20%;
    }

    .x-child-width-1-6\:small>* {
        width: unquote('calc(100% * 1 / 6.001)');
    }

    .x-child-width-auto\:small>* {
        width: auto;
    }

    .x-child-width-expand\:small> :not([class*='x-width']) {
        flex     : 1;
        min-width: 1px;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    .x-child-width-1-1\:medium>* {
        width: 100%;
    }

    .x-child-width-1-2\:medium>* {
        width: 50%;
    }

    .x-child-width-1-3\:medium>* {
        width: unquote('calc(100% * 1 / 3.001)');
    }

    .x-child-width-1-4\:medium>* {
        width: 25%;
    }

    .x-child-width-1-5\:medium>* {
        width: 20%;
    }

    .x-child-width-1-6\:medium>* {
        width: unquote('calc(100% * 1 / 6.001)');
    }

    .x-child-width-auto\:medium>* {
        width: auto;
    }

    .x-child-width-expand\:medium> :not([class*='x-width']) {
        flex     : 1;
        min-width: 1px;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    .x-child-width-1-1\:large>* {
        width: 100%;
    }

    .x-child-width-1-2\:large>* {
        width: 50%;
    }

    .x-child-width-1-3\:large>* {
        width: unquote('calc(100% * 1 / 3.001)');
    }

    .x-child-width-1-4\:large>* {
        width: 25%;
    }

    .x-child-width-1-5\:large>* {
        width: 20%;
    }

    .x-child-width-1-6\:large>* {
        width: unquote('calc(100% * 1 / 6.001)');
    }

    .x-child-width-auto\:large>* {
        width: auto;
    }

    .x-child-width-expand\:large> :not([class*='x-width']) {
        flex     : 1;
        min-width: 1px;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    .x-child-width-1-1\:xlarge>* {
        width: 100%;
    }

    .x-child-width-1-2\:xlarge>* {
        width: 50%;
    }

    .x-child-width-1-3\:xlarge>* {
        width: unquote('calc(100% * 1 / 3.001)');
    }

    .x-child-width-1-4\:xlarge>* {
        width: 25%;
    }

    .x-child-width-1-5\:xlarge>* {
        width: 20%;
    }

    .x-child-width-1-6\:xlarge>* {
        width: unquote('calc(100% * 1 / 6.001)');
    }

    .x-child-width-auto\:xlarge>* {
        width: auto;
    }

    .x-child-width-expand\:xlarge> :not([class*='x-width']) {
        flex     : 1;
        min-width: 1px;
    }

}


/* Single Widths
 ========================================================================== */

/*
 * 1. `max-width` is needed for the pixel-based classes
 */

[class*='x-width'] {
    box-sizing: border-box;
    width     : 100%;
    /* 1 */
    max-width : 100%;
}

/* Halves */
.x-width-1-2 {
    width: 50%;
}

/* Thirds */
.x-width-1-3 {
    width: unquote('calc(100% * 1 / 3.001)');
}

.x-width-2-3 {
    width: unquote('calc(100% * 2 / 3.001)');
}

/* Quarters */
.x-width-1-4 {
    width: 25%;
}

.x-width-3-4 {
    width: 75%;
}

/* Fifths */
.x-width-1-5 {
    width: 20%;
}

.x-width-2-5 {
    width: 40%;
}

.x-width-3-5 {
    width: 60%;
}

.x-width-4-5 {
    width: 80%;
}

/* Sixths */
.x-width-1-6 {
    width: unquote('calc(100% * 1 / 6.001)');
}

.x-width-5-6 {
    width: unquote('calc(100% * 5 / 6.001)');
}

/* Pixel */
.x-width-small {
    width: $width-small-width;
}

.x-width-medium {
    width: $width-medium-width;
}

.x-width-large {
    width: $width-large-width;
}

.x-width-xlarge {
    width: $width-xlarge-width;
}

.x-width-2xlarge {
    width: $width-2xlarge-width;
}

@if ($deprecated==true) {
    .x-width-xxlarge {
        width: $width-2xlarge-width;
    }
}

/* Auto */
.x-width-auto {
    width: auto;
}

/* Expand */
.x-width-expand {
    flex     : 1;
    min-width: 1px;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {

    /* Whole */
    .x-width-1-1\:small {
        width: 100%;
    }

    /* Halves */
    .x-width-1-2\:small {
        width: 50%;
    }

    /* Thirds */
    .x-width-1-3\:small {
        width: unquote('calc(100% * 1 / 3.001)');
    }

    .x-width-2-3\:small {
        width: unquote('calc(100% * 2 / 3.001)');
    }

    /* Quarters */
    .x-width-1-4\:small {
        width: 25%;
    }

    .x-width-3-4\:small {
        width: 75%;
    }

    /* Fifths */
    .x-width-1-5\:small {
        width: 20%;
    }

    .x-width-2-5\:small {
        width: 40%;
    }

    .x-width-3-5\:small {
        width: 60%;
    }

    .x-width-4-5\:small {
        width: 80%;
    }

    /* Sixths */
    .x-width-1-6\:small {
        width: unquote('calc(100% * 1 / 6.001)');
    }

    .x-width-5-6\:small {
        width: unquote('calc(100% * 5 / 6.001)');
    }

    /* Pixel */
    .x-width-small\:small {
        width: $width-small-width;
    }

    .x-width-medium\:small {
        width: $width-medium-width;
    }

    .x-width-large\:small {
        width: $width-large-width;
    }

    .x-width-xlarge\:small {
        width: $width-xlarge-width;
    }

    .x-width-2xlarge\:small {
        width: $width-2xlarge-width;
    }

    @if ($deprecated==true) {
        .x-width-xxlarge\:small {
            width: $width-2xlarge-width;
        }
    }

    /* Auto */
    .x-width-auto\:small {
        width: auto;
    }

    /* Expand */
    .x-width-expand\:small {
        flex     : 1;
        min-width: 1px;
    }

}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {

    /* Whole */
    .x-width-1-1\:medium {
        width: 100%;
    }

    /* Halves */
    .x-width-1-2\:medium {
        width: 50%;
    }

    /* Thirds */
    .x-width-1-3\:medium {
        width: unquote('calc(100% * 1 / 3.001)');
    }

    .x-width-2-3\:medium {
        width: unquote('calc(100% * 2 / 3.001)');
    }

    /* Quarters */
    .x-width-1-4\:medium {
        width: 25%;
    }

    .x-width-3-4\:medium {
        width: 75%;
    }

    /* Fifths */
    .x-width-1-5\:medium {
        width: 20%;
    }

    .x-width-2-5\:medium {
        width: 40%;
    }

    .x-width-3-5\:medium {
        width: 60%;
    }

    .x-width-4-5\:medium {
        width: 80%;
    }

    /* Sixths */
    .x-width-1-6\:medium {
        width: unquote('calc(100% * 1 / 6.001)');
    }

    .x-width-5-6\:medium {
        width: unquote('calc(100% * 5 / 6.001)');
    }

    /* Pixel */
    .x-width-small\:medium {
        width: $width-small-width;
    }

    .x-width-medium\:medium {
        width: $width-medium-width;
    }

    .x-width-large\:medium {
        width: $width-large-width;
    }

    .x-width-xlarge\:medium {
        width: $width-xlarge-width;
    }

    .x-width-2xlarge\:medium {
        width: $width-2xlarge-width;
    }

    @if ($deprecated==true) {
        .x-width-xxlarge\:medium {
            width: $width-2xlarge-width;
        }
    }

    /* Auto */
    .x-width-auto\:medium {
        width: auto;
    }

    /* Expand */
    .x-width-expand\:medium {
        flex     : 1;
        min-width: 1px;
    }

}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {

    /* Whole */
    .x-width-1-1\:large {
        width: 100%;
    }

    /* Halves */
    .x-width-1-2\:large {
        width: 50%;
    }

    /* Thirds */
    .x-width-1-3\:large {
        width: unquote('calc(100% * 1 / 3.001)');
    }

    .x-width-2-3\:large {
        width: unquote('calc(100% * 2 / 3.001)');
    }

    /* Quarters */
    .x-width-1-4\:large {
        width: 25%;
    }

    .x-width-3-4\:large {
        width: 75%;
    }

    /* Fifths */
    .x-width-1-5\:large {
        width: 20%;
    }

    .x-width-2-5\:large {
        width: 40%;
    }

    .x-width-3-5\:large {
        width: 60%;
    }

    .x-width-4-5\:large {
        width: 80%;
    }

    /* Sixths */
    .x-width-1-6\:large {
        width: unquote('calc(100% * 1 / 6.001)');
    }

    .x-width-5-6\:large {
        width: unquote('calc(100% * 5 / 6.001)');
    }

    /* Pixel */
    .x-width-small\:large {
        width: $width-small-width;
    }

    .x-width-medium\:large {
        width: $width-medium-width;
    }

    .x-width-large\:large {
        width: $width-large-width;
    }

    .x-width-xlarge\:large {
        width: $width-xlarge-width;
    }

    .x-width-2xlarge\:large {
        width: $width-2xlarge-width;
    }

    @if ($deprecated==true) {
        .x-width-xxlarge\:large {
            width: $width-2xlarge-width;
        }
    }

    /* Auto */
    .x-width-auto\:large {
        width: auto;
    }

    /* Expand */
    .x-width-expand\:large {
        flex     : 1;
        min-width: 1px;
    }

}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {

    /* Whole */
    .x-width-1-1\:xlarge {
        width: 100%;
    }

    /* Halves */
    .x-width-1-2\:xlarge {
        width: 50%;
    }

    /* Thirds */
    .x-width-1-3\:xlarge {
        width: unquote('calc(100% * 1 / 3.001)');
    }

    .x-width-2-3\:xlarge {
        width: unquote('calc(100% * 2 / 3.001)');
    }

    /* Quarters */
    .x-width-1-4\:xlarge {
        width: 25%;
    }

    .x-width-3-4\:xlarge {
        width: 75%;
    }

    /* Fifths */
    .x-width-1-5\:xlarge {
        width: 20%;
    }

    .x-width-2-5\:xlarge {
        width: 40%;
    }

    .x-width-3-5\:xlarge {
        width: 60%;
    }

    .x-width-4-5\:xlarge {
        width: 80%;
    }

    /* Sixths */
    .x-width-1-6\:xlarge {
        width: unquote('calc(100% * 1 / 6.001)');
    }

    .x-width-5-6\:xlarge {
        width: unquote('calc(100% * 5 / 6.001)');
    }

    /* Pixel */
    .x-width-small\:xlarge {
        width: $width-small-width;
    }

    .x-width-medium\:xlarge {
        width: $width-medium-width;
    }

    .x-width-large\:xlarge {
        width: $width-large-width;
    }

    .x-width-xlarge\:xlarge {
        width: $width-xlarge-width;
    }

    .x-width-2xlarge\:xlarge {
        width: $width-2xlarge-width;
    }

    @if ($deprecated==true) {
        .x-width-xxlarge\:xlarge {
            width: $width-2xlarge-width;
        }
    }

    /* Auto */
    .x-width-auto\:xlarge {
        width: auto;
    }

    /* Expand */
    .x-width-expand\:xlarge {
        flex     : 1;
        min-width: 1px;
    }

}


// Hooks
// ========================================================================

@if(mixin-exists(hook-width-misc)) {
    @include hook-width-misc();
}

// @mixin hook-width-misc(){}

//
// Component: Width
//
// ========================================================================


// Variables
// ========================================================================


// Miscellaneous
// ========================================================================

// @mixin hook-width-misc(){}